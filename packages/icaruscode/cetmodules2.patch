diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6fdca85..0f2e267 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -11,63 +11,89 @@
 #  make install
 #  make package (builds distribution tarfile)
 # ======================================================================
+cmake_minimum_required(VERSION 3.19 FATAL_ERROR)
+cmake_policy(VERSION 3.18)
 
 
-cmake_minimum_required (VERSION 3.12...3.18 FATAL_ERROR)
 
-project(icaruscode LANGUAGES CXX)
+find_package(cetmodules 2.25.04 REQUIRED)
+project(icaruscode VERSION 09.28.02 LANGUAGES CXX)
 
 message(STATUS
   "\n-- ============================================================================="
   "\n-- === *** Start of configuration of ${PROJECT_NAME} ***"
   "\n-- ===")
 
-# cetbuildtools contains our cmake modules
-find_package(cetbuildtools REQUIRED)
 
-list(APPEND CMAKE_MODULE_PATH $ENV{CANVAS_ROOT_IO_DIR}/Modules $ENV{ART_DIR}/Modules )
+list(APPEND CMAKE_MODULE_PATH $ENV{CANVAS_ROOT_IO_DIR}/Modules $ENV{ART_DIR}/Modules)
 
 include(CetCMakeEnv)
 cet_cmake_env()
 
 cet_set_compiler_flags(DIAGS CAUTIOUS
-  WERROR
-  NO_UNDEFINED
-  EXTRA_FLAGS -pedantic -I $ENV{CLANG_FQ_DIR}/include/c++/v1 
+	WERROR
+	NO_UNDEFINED
+	EXTRA_FLAGS -pedantic -I$ENV{CLANG_FQ_DIR}/include/c++/v1
 )
 
-cet_report_compiler_flags()
-
-# these are minimum required versions, not the actual product versions
-find_ups_product( larsoft )
-find_ups_product( libwda )
-find_ups_product( postgresql )
-find_ups_product( eigen )
-find_ups_product( fftw )
-find_ups_product( ifdh_art )
-find_ups_product( guideline_sl )
-
-find_ups_product( sbnobj )
-find_ups_product( sbncode )
-find_ups_product( icarus_signal_processing )
-find_ups_product( icarusalg )
-find_ups_product( icarusutil )
-find_ups_product( icarus_data )
-
-find_ups_product( artdaq_core )
-find_ups_product( sbndaq_artdaq_core )
-
-cet_find_library( PQ NAMES pq PATHS ENV POSTGRESQL_LIBRARIES NO_DEFAULT_PATH )
-cet_find_library( NURANDOM_RANDOMUTILS_NURANDOMSERVICE_SERVICE
-                  NAMES nurandom_RandomUtils_NuRandomService_service
-                  PATHS ENV NURANDOM_LIB NO_DEFAULT_PATH )
-
-# deal with fftw
-cet_find_library(ICARUS_FFTW3_LIBRARY  NAMES fftw3  PATHS $ENV{FFTW_LIBRARY} )
-cet_find_library(ICARUS_FFTW3F_LIBRARY NAMES fftw3f PATHS $ENV{FFTW_LIBRARY} )
-cet_find_library(ICARUS_FFTW3L_LIBRARY NAMES fftw3l PATHS $ENV{FFTW_LIBRARY} )
-cet_find_library(ICARUS_FFTW3Q_LIBRARY NAMES fftw3q PATHS $ENV{FFTW_LIBRARY} )
-set(ICARUS_FFTW_LIBRARIES ${ICARUS_FFTW3_LIBRARY} ${ICARUS_FFTW3F_LIBRARY} ${ICARUS_FFTW3L_LIBRARY} ${ICARUS_FFTW3Q_LIBRARY})
+cet_report_compiler_flags(REPORT_THRESHOLD VERBOSE)
+
+#these are minimum required versions,not thea ctual product versions
+find_package(larsoft)
+find_package(libwda)
+find_package(PostgreSQL)
+find_package(Eigen3)
+find_package(ifdh_art)
+find_package(guideline_sl)
+find_package(range-v3)
+find_package(sbnobj)
+find_package(sbndaq-artdaq-core)
+find_package(icarus_signal_processing)
+find_package(icarusalg)
+find_package(icarusutil)
+find_package(icarus_data)
+
+find_package(artdaq_core)
+
+find_package(larcoreobj)
+find_package(larcorealg)
+find_package(lardataobj)
+find_package(lardataalg)
+find_package(larcore)
+find_package(lardata)
+find_package(larsim)
+find_package(larevt)
+find_package(larreco)
+find_package(larana)
+find_package(larpandora)
+find_package(larpandoracontent)
+find_package(nusimdata)
+find_package(nurandom)
+find_package(nug4)
+find_package(art)
+find_package(canvas)
+find_package(messagefacility)
+find_package(FFTW3)
+find_package(libwda)
+find_package(ifdh_art)
+find_package(ROOT)
+find_package(Boost COMPONENTS system)
+find_package(protobuf)
+find_package(PandoraSDK)
+find_package(PandoraMonitoring)
+find_package(SQLite3)
+find_package(artdaq_core)
+find_package(sbndaq_artdaq_core)
+find_package(PostgreSQL)
+
+cet_find_library(PQ NAMES pq )
+
+#deal with fftw
+find_package( PkgConfig REQUIRED)
+pkg_search_module(FFTW3 REQUIRED IMPORTED_TARGET GLOBAL fftw3f fftw3 fftw3q fftw3l fftw3_threads fftw3f_threeads fftw3q_threads)
+set(ICARUS_FFTW_LIBRARIES PkgConfig::FFTW3)
+
+
 
 # macros for dictionary and simple_plugin
 include(ArtDictionary)
@@ -86,10 +112,8 @@ add_subdirectory(test)
 add_subdirectory(fcl)
 
 # ups - table and config files
-add_subdirectory(ups)
 
 # packaging utility
-include(UseCPack)
 
 message(STATUS
   "\n-- ==="
@@ -98,3 +122,4 @@ message(STATUS
   "\n-- "
   )
 
+cet_cmake_config()
diff --git a/icaruscode/Analysis/CMakeLists.txt b/icaruscode/Analysis/CMakeLists.txt
index 63c9487..8969fc5 100644
--- a/icaruscode/Analysis/CMakeLists.txt
+++ b/icaruscode/Analysis/CMakeLists.txt
@@ -1,40 +1,42 @@
 add_subdirectory(tools)
 add_subdirectory(overburden)
 
-art_make( MODULE_LIBRARIES larcorealg_Geometry
-                           larcore_Geometry_Geometry_service
-                           larsim_Simulation nug4_ParticleNavigation
-                           lardataobj_Simulation
-                           lardata_Utilities
-                           larevt_Filters
-                           larsim_MCCheater_BackTrackerService_service
-                           larsim_MCCheater_ParticleInventoryService_service
-                           lardataobj_RawData
-                           larevt_CalibrationDBI_Providers
-                           nurandom_RandomUtils_NuRandomService_service
-			   sbnobj_Common_Analysis
-                           ${ART_FRAMEWORK_CORE}
-                           ${ART_FRAMEWORK_PRINCIPAL}
-                           ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                           ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                           ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-                           ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                           art_Persistency_Common
-                           art_Persistency_Provenance
-                           art_Utilities
-                           canvas
-                           ${MF_MESSAGELOGGER}
-                           ${MF_UTILITIES}
-                           ${FHICLCPP}
-                           ${CETLIB}
-                           cetlib_except
-                           ${CLHEP}
-                           ${ROOT_GEOM}
-                           ${ROOT_XMLIO}
-                           ${ROOT_GDML}
-                           ${ROOT_BASIC_LIB_LIST}
-                           icaruscode_RecoUtils
-        )
+art_make(MODULE_LIBRARIES larcorealg::Geometry
+		larcore::Geometry_Geometry_service
+		larsim::Simulation
+		nug4::ParticleNavigation
+		lardataobj::Simulation
+		lardata::Utilities
+		larevt::Filters
+		larsim::MCCheater_BackTrackerService_service
+		larsim::MCCheater_ParticleInventoryService_service
+		lardataobj::RawData
+		larevt::CalibrationDBI_Providers
+		nurandom::RandomUtils_NuRandomService_service
+		sbnobj::Common_Analysis
+		art::Framework_Core
+		art::Framework_Principal
+		art::Framework_Services_Registry
+		art_root_io::tfile_support
+		ROOT::Core
+		art::Framework_Services_Optional_RandomNumberGenerator_service
+		art_root_io::TFileService_service
+		art::Persistency_Common
+		art::Persistency_Provenance
+		art::Utilities
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib
+		cetlib_except::cetlib_except
+		CLHEP::Random
+		ROOT::Geom
+		ROOT::XMLIO
+		ROOT::Gdml
+		icaruscode::RecoUtils
+		Eigen3::Eigen
+		)
 
 #install_headers()
 install_fhicl()
diff --git a/icaruscode/Analysis/overburden/CMakeLists.txt b/icaruscode/Analysis/overburden/CMakeLists.txt
index e366278..2fc79a7 100644
--- a/icaruscode/Analysis/overburden/CMakeLists.txt
+++ b/icaruscode/Analysis/overburden/CMakeLists.txt
@@ -1,36 +1,35 @@
 art_make(
-          MODULE_LIBRARIES larcorealg_Geometry
-                           larcore_Geometry_Geometry_service
-                           larsim_Simulation lardataobj_Simulation
-                           larsim_MCCheater_BackTrackerService_service
-                           larsim_MCCheater_ParticleInventoryService_service
-                           lardata_Utilities
-                           larevt_Filters
-                           lardataobj_RawData
-                           lardataobj_RecoBase
-                           lardataobj_MCBase
-                           larreco_RecoAlg
-                           lardata_RecoObjects  
-                           larpandora_LArPandoraInterface
-                           nusimdata_SimulationBase
-                           ${ART_FRAMEWORK_CORE}
-                           ${ART_FRAMEWORK_PRINCIPAL}
-                           ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                           ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                           ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                           art_Persistency_Common canvas
-                           art_Persistency_Provenance canvas
-                           art_Utilities canvas
-                           ${MF_MESSAGELOGGER}
-                           
-                           ${FHICLCPP}
-                           ${ROOT_GEOM}
-                           ${ROOT_XMLIO}
-                           ${ROOT_GDML}
-                           ${ROOT_BASIC_LIB_LIST}
-                           icaruscode_RecoUtils
-        )
+MODULE_LIBRARIES larcorealg::Geometry
+	larcore::Geometry_Geometry_service
+	larsim::Simulation
+        lardataobj::Simulation
+	larsim::MCCheater_BackTrackerService_service
+	larsim::MCCheater_ParticleInventoryService_service
+	lardata::Utilities
+	larevt::Filters
+	lardataobj::RawData
+	lardataobj::RecoBase
+	lardataobj::MCBase
+	larreco::RecoAlg
+	lardata::RecoObjects
+	larpandora::LArPandoraInterface
+	nusimdata::SimulationBase
+	art::Framework_Core
+	art::Framework_Principal
+	art::Framework_Services_Registry
+	art_root_io::tfile_support ROOT::Core
+	art_root_io::TFileService_service
+	art::Persistency_Common
+	art::Persistency_Provenance
+	art::Utilities canvas::canvas
+	messagefacility::MF_MessageLogger
+	fhiclcpp::fhiclcpp
+	ROOT::Geom
+	ROOT::XMLIO
+	ROOT::Gdml
+	icaruscode::RecoUtils
+	)
 
-# install_headers()
+#install_headers()
 install_fhicl()
 install_source()
diff --git a/icaruscode/Analysis/tools/CMakeLists.txt b/icaruscode/Analysis/tools/CMakeLists.txt
index 705f2cf..35cd668 100644
--- a/icaruscode/Analysis/tools/CMakeLists.txt
+++ b/icaruscode/Analysis/tools/CMakeLists.txt
@@ -2,40 +2,39 @@ cet_enable_asserts()
 add_subdirectory(MCTruth)
 
 add_definitions(-DEIGEN_FFTW_DEFAULT)
+include_directories(${FFTW3_INCLUDE_DIRS})
 
-art_make( TOOL_LIBRARIES lardataobj_RecoBase
-                         lardataobj_Simulation
-                         lardataalg_DetectorInfo
-                         icaruscode_TPC_SignalProcessing_RawDigitFilter_Algorithms
-                         larcorealg_Geometry
-                         larcore_Geometry_Geometry_service
-                         lardata_RecoObjects
-                         lardata_Utilities
-                         nusimdata_SimulationBase
-                         larsim_Simulation
-                         nusimdata_SimulationBase
-                         ${ART_FRAMEWORK_CORE}
-                         ${ART_FRAMEWORK_PRINCIPAL}
-                         ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                         ${ART_FRAMEWORK_SERVICES_BASIC}
-                         ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                         ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                         ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-                         art_Persistency_Common
-                         art_Persistency_Provenance
-                         art_Utilities
-                         canvas
-                         ${MF_MESSAGELOGGER}
-                         ${MF_UTILITIES}
-                         ${FHICLCPP}
-                         ${CETLIB}
-                         cetlib_except
-                         ${Boost_FILESYSTEM_LIBRARY}
-                         ${Boost_SYSTEM_LIBRARY}
-                         ${CLHEP}
-                         ${ROOT_BASIC_LIB_LIST}
-                         ${ROOT_MINUIT}
-        )
+art_make(TOOL_LIBRARIES lardataobj::RecoBase
+		lardataobj::Simulation
+		lardataalg::DetectorInfo
+		icaruscode::TPC_SignalProcessing_RawDigitFilter_Algorithms
+		larcorealg::Geometry
+		larcore::Geometry_Geometry_service
+		lardata::RecoObjects
+		lardata::Utilities
+		nusimdata::SimulationBase
+		larsim::Simulation
+		art::Framework_Core
+		art::Framework_Principal
+		art::Framework_Services_Registry
+		
+		art_root_io::tfile_support ROOT::Core
+		art_root_io::TFileService_service
+		art::Framework_Services_Optional_RandomNumberGenerator_service
+		art::Persistency_Common
+		art::Persistency_Provenance
+		art::Utilities
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib
+		cetlib_except::cetlib_except
+		Boost::filesystem
+		Boost::system
+		CLHEP::Random
+		${ROOT_MINUIT}
+		)
 
 install_headers()
 install_source()
diff --git a/icaruscode/Analysis/tools/MCTruth/CMakeLists.txt b/icaruscode/Analysis/tools/MCTruth/CMakeLists.txt
index dffd9bf..8ab1312 100644
--- a/icaruscode/Analysis/tools/MCTruth/CMakeLists.txt
+++ b/icaruscode/Analysis/tools/MCTruth/CMakeLists.txt
@@ -1,65 +1,63 @@
 cet_enable_asserts()
 
-art_make( MODULE_LIBRARIES lardataobj_RecoBase
-                           larcorealg_Geometry
-                           larcore_Geometry_Geometry_service
-                           lardata_RecoObjects
-                           lardata_Utilities
-                           larsim_MCCheater_BackTrackerService_service
-                           larsim_MCCheater_ParticleInventoryService_service
-                           icarusalg_gallery_MCTruthBase
-                           nug4_ParticleNavigation
-                           ${ART_FRAMEWORK_CORE}
-                           ${ART_FRAMEWORK_PRINCIPAL}
-                           ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                           ${ART_FRAMEWORK_SERVICES_BASIC}
-                           ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                           ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                           ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-                           art_Persistency_Common
-                           art_Persistency_Provenance
-                           art_Utilities
-                           canvas
-                           ${MF_MESSAGELOGGER}
-                           ${MF_UTILITIES}
-                           ${FHICLCPP}
-                           ${CETLIB}
-                           cetlib_except
-                           ${Boost_FILESYSTEM_LIBRARY}
-                           ${Boost_SYSTEM_LIBRARY}
-                           ${CLHEP}
-                           ${ROOT_BASIC_LIB_LIST}
+art_make(MODULE_LIBRARIES lardataobj::RecoBase
+		larcorealg::Geometry
+		larcore::Geometry_Geometry_service
+		lardata::RecoObjects
+		lardata::Utilities
+		larsim::MCCheater_BackTrackerService_service
+		larsim::MCCheater_ParticleInventoryService_service
+		icarusalg::gallery_MCTruthBase
+		nug4::ParticleNavigation
+		art::Framework_Core
+		art::Framework_Principal
+		art::Framework_Services_Registry
+		
+		art_root_io::tfile_support ROOT::Core
+		art_root_io::TFileService_service
+		art::Framework_Services_Optional_RandomNumberGenerator_service
+		art::Persistency_Common
+		art::Persistency_Provenance
+		art::Utilities
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib
+		cetlib_except::cetlib_except
+		Boost::filesystem
+		Boost::system
+		CLHEP::Random
 
-          TOOL_LIBRARIES   lardataobj_RecoBase
-                           larcorealg_Geometry
-                           larcore_Geometry_Geometry_service
-                           lardata_RecoObjects
-                           lardata_Utilities
-                           larsim_MCCheater_BackTrackerService_service
-                           larsim_MCCheater_ParticleInventoryService_service
-                           icarusalg_gallery_MCTruthBase
-                           nug4_ParticleNavigation
-                           ${ART_FRAMEWORK_CORE}
-                           ${ART_FRAMEWORK_PRINCIPAL}
-                           ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                           ${ART_FRAMEWORK_SERVICES_BASIC}
-                           ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                           ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                           ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-                           art_Persistency_Common
-                           art_Persistency_Provenance
-                           art_Utilities
-                           canvas
-                           ${MF_MESSAGELOGGER}
-                           ${MF_UTILITIES}
-                           ${FHICLCPP}
-                           ${CETLIB}
-                           cetlib_except
-                           ${Boost_FILESYSTEM_LIBRARY}
-                           ${Boost_SYSTEM_LIBRARY}
-                           ${CLHEP}
-                           ${ROOT_BASIC_LIB_LIST}
-        )
+	TOOL_LIBRARIES lardataobj::RecoBase
+		larcorealg::Geometry
+		larcore::Geometry_Geometry_service
+		lardata::RecoObjects
+		lardata::Utilities
+		larsim::MCCheater_BackTrackerService_service
+		larsim::MCCheater_ParticleInventoryService_service
+		icarusalg::gallery_MCTruthBase
+		nug4::ParticleNavigation
+		art::Framework_Core
+		art::Framework_Principal
+		art::Framework_Services_Registry
+		
+		art_root_io::tfile_support ROOT::Core
+		art_root_io::TFileService_service
+		art::Framework_Services_Optional_RandomNumberGenerator_service
+		art::Persistency_Common
+		art::Persistency_Provenance
+		art::Utilities
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib
+		cetlib_except::cetlib_except
+		Boost::filesystem
+		Boost::system
+		CLHEP::Random
+	)
 
 install_headers()
 install_source()
diff --git a/icaruscode/CRT/CMakeLists.txt b/icaruscode/CRT/CMakeLists.txt
index 470b5f2..188bcc7 100644
--- a/icaruscode/CRT/CMakeLists.txt
+++ b/icaruscode/CRT/CMakeLists.txt
@@ -1,303 +1,302 @@
-include_directories( ${CMAKE_CURRENT_SOURCE_DIR} )
-include_directories( $ENV{NURANDOM_INC} )
-include_directories( $ENV{IFDHX_FQ_DIR}/inc )
+include_directories(${CMAKE_CURRENT_SOURCE_DIR})
+include_directories($ENV{NURANDOM_INC})
+include_directories($ENV{IFDHX_FQ_DIR}/inc)
 
 add_subdirectory(CRTUtils)
 add_subdirectory(CRTDecoder)
 
 art_make(
-    NO_PLUGINS
-    EXCLUDE
-        CRTChannelMapAlg.cxx
-        CRTGeometryHelper_service.cc
-        CRTDetSim_module.cc
-        CRTSimHitProducer_module.cc
-        CRTTrueHitProducer_module.cc
-        CRTTzeroProducer_module.cc
-        CRTTrackProducer_module.cc
-        CRTSimAnalysis_module.cc
-        CRTDataAnalysis_module.cc
-        CrtOpHitMatchAnalysis_module.cc
-        CRTTruthMatchAnalysis_module.cc
-        CRTAutoVeto_module.cc
-        FlashResAna_module.cc
-        PhotBackground_module.cc
-    LIBRARY_NAME
-        icaruscode_CRTData
-    LIB_LIBRARIES
-        larcorealg_Geometry
-        larcore_Geometry_Geometry_service
-        ${ART_FRAMEWORK_CORE}
-        ${ART_FRAMEWORK_IO_SOURCES}
-        ${ART_FRAMEWORK_PRINCIPAL}
-        ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-        canvas
-        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-        ${MF_MESSAGELOGGER}
-        ${MF_UTILITIES}
-        ${FHICLCPP}
-        ${ROOT_BASIC_LIB_LIST}
-        ${ROOT_GEOM}
-        ${CETLIB}
-)
+	NO_PLUGINS
+	EXCLUDE
+		CRTChannelMapAlg.cxx
+		CRTGeometryHelper_service.cc
+		CRTDetSim_module.cc
+		CRTSimHitProducer_module.cc
+		CRTTrueHitProducer_module.cc
+		CRTTzeroProducer_module.cc
+		CRTTrackProducer_module.cc
+		CRTSimAnalysis_module.cc
+		CRTDataAnalysis_module.cc
+		CrtOpHitMatchAnalysis_module.cc
+		CRTTruthMatchAnalysis_module.cc
+		CRTAutoVeto_module.cc
+		FlashResAna_module.cc
+		PhotBackground_module.cc
+	LIBRARY_NAME
+		icaruscode_CRTData
+	LIB_LIBRARIES
+		larcorealg::Geometry
+		larcore::Geometry_Geometry_service
+		art::Framework_Core
+		art::Framework_IO_Sources
+		art::Framework_Principal
+		art_root_io::TFileService_service
+		canvas::canvas
+		art::Framework_Services_Registry
+		messagefacility::MF_MessageLogger
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		
+		ROOT::Geom
+		cetlib::cetlib
+	)
 
 art_make_library(
-    LIBRARY_NAME
-        icaruscode_CRT
-    SOURCE
-        CRTChannelMapAlg.cxx
-    LIBRARIES larcorealg_Geometry
-        icaruscode_CRTData
-        cetlib_except
-        ${MF_MESSAGELOGGER}
-        ${MF_UTILITIES}
-        ${FHICLCPP}
-        ${ROOT_BASIC_LIB_LIST}
-        ${ROOT_GEOM}
-        ${CETLIB}
-)
+	LIBRARY_NAME
+		icaruscode_CRT
+	SOURCE
+		CRTChannelMapAlg.cxx
+	LIBRARIES larcorealg::Geometry
+		icaruscode::CRTData
+		cetlib_except::cetlib_except
+		messagefacility::MF_MessageLogger
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		
+		ROOT::Geom
+		cetlib::cetlib
+	)
 
 simple_plugin(CRTGeometryHelper service
-              larcorealg_Geometry
-              icaruscode_CRT
-              ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-              ${ART_FRAMEWORK_SERVICES_REGISTRY}
-              ${MF_MESSAGELOGGER}
-              ${MF_UTILITIES}
-              ${ROOT_BASIC_LIB_LIST}
-)
+	larcorealg::Geometry
+	icaruscode::CRT
+	art_root_io::TFileService_service
+	art::Framework_Services_Registry
+	messagefacility::MF_MessageLogger
+	messagefacility::headers
+	
+	)
 
 simple_plugin(CRTDetSim module
-              larcorealg_Geometry
-              icaruscode_CRT
-              icaruscode_CRTData
-              sbnobj_Common_CRT
-              icaruscode_CRTUtils
-              ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-              lardataalg_DetectorInfo
-              nurandom_RandomUtils_NuRandomService_service
-              ${ART_FRAMEWORK_SERVICES_REGISTRY}
-              ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-              ${MF_MESSAGELOGGER}
-              ${MF_UTILITIES}
-              ${ROOT_BASIC_LIB_LIST}
-              ${CLHEP}
-)
+	larcorealg::Geometry
+	icaruscode::CRT
+	icaruscode::CRTData
+	sbnobj::Common_CRT
+	icaruscode::CRTUtils
+	art_root_io::TFileService_service
+	lardataalg::DetectorInfo
+	nurandom::RandomUtils_NuRandomService_service
+	art::Framework_Services_Registry
+	art::Framework_Services_Optional_RandomNumberGenerator_service
+	messagefacility::MF_MessageLogger
+	messagefacility::headers
+	CLHEP::CLHEP
+	)
 
 simple_plugin(CRTSimHitProducer module
-              larcorealg_Geometry
-              icaruscode_CRT
-              icaruscode_CRTData
-              sbnobj_Common_CRT
-              icaruscode_CRTUtils
-              ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-              lardataalg_DetectorInfo
-              nurandom_RandomUtils_NuRandomService_service
-              ${ART_FRAMEWORK_SERVICES_REGISTRY}
-              ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-              ${MF_MESSAGELOGGER}
-              ${MF_UTILITIES}
-              ${ROOT_BASIC_LIB_LIST}
-              ${CLHEP}
-)
+	larcorealg::Geometry
+	icaruscode::CRT
+	icaruscode::CRTData
+	sbnobj::Common_CRT
+	icaruscode::CRTUtils
+	art_root_io::TFileService_service
+	lardataalg::DetectorInfo
+	nurandom::RandomUtils_NuRandomService_service
+	art::Framework_Services_Registry
+	art::Framework_Services_Optional_RandomNumberGenerator_service
+	messagefacility::MF_MessageLogger
+	messagefacility::headers
+	CLHEP::CLHEP
+	)
 
-simple_plugin( CRTTrueHitProducer module
-        larcorealg_Geometry
-        icaruscode_CRT
-        icaruscode_CRTData
-        sbnobj_Common_CRT
-        icaruscode_CRTUtils
-        ${ART_FRAMEWORK_CORE}
-        ${ART_FRAMEWORK_IO_SOURCES}
-        ${ART_FRAMEWORK_PRINCIPAL}
-        ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-        art_Persistency_Provenance
-        canvas
-        cetlib_except
-        lardata_DetectorInfoServices_DetectorClocksServiceStandard_service
-        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-        ${MF_MESSAGELOGGER}
-        ${MF_UTILITIES}
-        ${ROOT_BASIC_LIB_LIST}
-        ${CLHEP}
-        ${CETLIB}
-)
+simple_plugin(CRTTrueHitProducer module
+	larcorealg::Geometry
+	icaruscode::CRT
+	icaruscode::CRTData
+	sbnobj::Common_CRT
+	icaruscode::CRTUtils
+	art::Framework_Core
+	art::Framework_IO_Sources
+	art::Framework_Principal
+	art_root_io::TFileService_service
+	art::Persistency_Provenance
+	canvas::canvas
+	cetlib_except::cetlib_except
+	lardata::DetectorInfoServices_DetectorClocksServiceStandard_service
+	art::Framework_Services_Registry
+	messagefacility::MF_MessageLogger
+	messagefacility::headers
+	
+	CLHEP::CLHEP
+	cetlib::cetlib
+	)
 
 simple_plugin(CRTTzeroProducer module
-              larcorealg_Geometry
-              icaruscode_CRT
-              icaruscode_CRTData
-              sbnobj_Common_CRT
-              ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-              lardataalg_DetectorInfo
-              nurandom_RandomUtils_NuRandomService_service
-              ${ART_FRAMEWORK_SERVICES_REGISTRY}
-              ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-              ${MF_MESSAGELOGGER}
-              ${MF_UTILITIES}
-              ${ROOT_BASIC_LIB_LIST}
-              ${CLHEP}
-)
+	larcorealg::Geometry
+	icaruscode::CRT
+	icaruscode::CRTData
+	sbnobj::Common_CRT
+	art_root_io::TFileService_service
+	lardataalg::DetectorInfo
+	nurandom::RandomUtils_NuRandomService_service
+	art::Framework_Services_Registry
+	art::Framework_Services_Optional_RandomNumberGenerator_service
+	messagefacility::MF_MessageLogger
+	messagefacility::headers
+	
+	CLHEP::CLHEP
+	lardata::Utilities
+	)
 
 simple_plugin(CRTTrackProducer module
-              larcorealg_Geometry
-              icaruscode_CRT
-              icaruscode_CRTData
-              sbnobj_Common_CRT
-              icaruscode_CRTUtils
-              ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-              lardataalg_DetectorInfo
-              nurandom_RandomUtils_NuRandomService_service
-              ${ART_FRAMEWORK_SERVICES_REGISTRY}
-              ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-              ${MF_MESSAGELOGGER}
-              ${MF_UTILITIES}
-              ${ROOT_BASIC_LIB_LIST}
-              ${CLHEP}
-)
+	larcorealg::Geometry
+	icaruscode::CRT
+	icaruscode::CRTData
+	sbnobj::Common_CRT
+	icaruscode::CRTUtils
+	art_root_io::TFileService_service
+	lardataalg::DetectorInfo
+	nurandom::RandomUtils_NuRandomService_service
+	art::Framework_Services_Registry
+	art::Framework_Services_Optional_RandomNumberGenerator_service
+	messagefacility::MF_MessageLogger
+	messagefacility::headers
+	
+	CLHEP::CLHEP
+	)
 
 simple_plugin(CRTSimAnalysis module
-              icaruscode_CRTData
-              icaruscode_CRT
-              sbnobj_Common_CRT
-              icaruscode_CRTUtils
-              larcore_Geometry_Geometry_service
-              larcorealg_Geometry
-              nusimdata_SimulationBase
-              ${ART_FRAMEWORK_SERVICES_REGISTRY}
-              ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-              ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-              ${MF_MESSAGELOGGER}
-              ${MF_UTILITIES}
-              ${ROOT_BASIC_LIB_LIST}
-              ${ROOT_GEOM}
-              ${ROOT_XMLIO}
-              ${ROOT_GDML}
-)
+	icaruscode::CRTData
+	icaruscode::CRT
+	sbnobj::Common_CRT
+	icaruscode::CRTUtils
+	larcore::Geometry_Geometry_service
+	larcorealg::Geometry
+	nusimdata::SimulationBase
+	art::Framework_Services_Registry
+	art_root_io::tfile_support ROOT::Core
+	art_root_io::TFileService_service
+	messagefacility::MF_MessageLogger
+	messagefacility::headers
+	
+	ROOT::Geom
+	ROOT::XMLIO
+	ROOT::Gdml
+	)
 
 simple_plugin(CRTDataAnalysis module
-              icaruscode_CRTData
-              icaruscode_CRT
-              sbnobj_Common_CRT
-              icaruscode_CRTUtils
-              larcore_Geometry_Geometry_service
-              larcorealg_Geometry
-              nusimdata_SimulationBase
-              ${ART_FRAMEWORK_SERVICES_REGISTRY}
-              ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-              ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-              ${MF_MESSAGELOGGER}
-              ${MF_UTILITIES}
-              ${ROOT_BASIC_LIB_LIST}
-              ${ROOT_GEOM}
-              ${ROOT_XMLIO}
-              ${ROOT_GDML}
-)
+	icaruscode::CRTData
+	icaruscode::CRT
+	sbnobj::Common_CRT
+	icaruscode::CRTUtils
+	larcore::Geometry_Geometry_service
+	larcorealg::Geometry
+	nusimdata::SimulationBase
+	art::Framework_Services_Registry
+	art_root_io::tfile_support ROOT::Core
+	art_root_io::TFileService_service
+	messagefacility::MF_MessageLogger
+	messagefacility::headers
+	
+	ROOT::Geom
+	ROOT::XMLIO
+	ROOT::Gdml
+	)
 
 simple_plugin(CrtOpHitMatchAnalysis module
-              icaruscode_CRTData
-              icaruscode_CRT
-              sbnobj_Common_CRT
-              icaruscode_CRTUtils
-              larcore_Geometry_Geometry_service
-              larcorealg_Geometry
-              nusimdata_SimulationBase
-              lardataobj_RecoBase
-              ${ART_FRAMEWORK_SERVICES_REGISTRY}
-              ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-              ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-              lardataalg_DetectorInfo
-              ${MF_MESSAGELOGGER}
-              ${MF_UTILITIES}
-              ${ROOT_BASIC_LIB_LIST}
-)
+	icaruscode::CRTData
+	icaruscode::CRT
+	sbnobj::Common_CRT
+	icaruscode::CRTUtils
+	larcore::Geometry_Geometry_service
+	larcorealg::Geometry
+	nusimdata::SimulationBase
+	lardataobj::RecoBase
+	art::Framework_Services_Registry
+	art_root_io::tfile_support ROOT::Core
+	art_root_io::TFileService_service
+	lardataalg::DetectorInfo
+	messagefacility::MF_MessageLogger
+	messagefacility::headers
+	
+	)
 
 simple_plugin(CRTTruthMatchAnalysis module
-              icaruscode_CRTData
-              icaruscode_CRT
-              sbnobj_Common_CRT
-              icaruscode_CRTUtils
-              larcore_Geometry_Geometry_service
-              larcorealg_Geometry
-              nusimdata_SimulationBase
-              ${ART_FRAMEWORK_SERVICES_REGISTRY}
-              ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-              ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-              ${MF_MESSAGELOGGER}
-              ${MF_UTILITIES}
-              ${ROOT_BASIC_LIB_LIST}
-              ${ROOT_GEOM}
-              ${ROOT_XMLIO}
-              ${ROOT_GDML}
-)
+	icaruscode::CRTData
+	icaruscode::CRT
+	sbnobj::Common_CRT
+	icaruscode::CRTUtils
+	larcore::Geometry_Geometry_service
+	larcorealg::Geometry
+	nusimdata::SimulationBase
+	art::Framework_Services_Registry
+	art_root_io::tfile_support
+	art_root_io::TFileService_service
+	messagefacility::MF_MessageLogger
+	messagefacility::headers
+	ROOT::Core
+	ROOT::Geom
+	ROOT::XMLIO
+	ROOT::Gdml
+	)
 
-simple_plugin( CRTAutoVeto module
-                        icaruscode_CRTData
-                        icaruscode_CRT
-                        sbnobj_Common_CRT
-                        icaruscode_CRTUtils
-                        larcore_Geometry_Geometry_service
-                        larcorealg_Geometry
-                        nusimdata_SimulationBase
-                        ${ART_FRAMEWORK_CORE}
-                        ${ART_FRAMEWORK_PRINCIPAL}
-                        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                        ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                        ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                        art_Persistency_Common
-                        art_Persistency_Provenance
-                        art_Utilities
-                        canvas
-                        ${MF_MESSAGELOGGER}
-                        ${MF_UTILITIES}
-                        cetlib cetlib_except
-                        ${ROOT_BASIC_LIB_LIST}
-                        ${ROOT_GEOM}
-                        ${ROOT_XMLIO}
-                        ${ROOT_GDML}              
-)
+simple_plugin(CRTAutoVeto module
+	icaruscode::CRTData
+	icaruscode::CRT
+	sbnobj::Common_CRT
+	icaruscode::CRTUtils
+	larcore::Geometry_Geometry_service
+	larcorealg::Geometry
+	nusimdata::SimulationBase
+	art::Framework_Core
+	art::Framework_Principal
+	art::Framework_Services_Registry
+	art_root_io::tfile_support
+	art_root_io::TFileService_service
+	art::Persistency_Common
+	art::Persistency_Provenance
+	art::Utilities
+	canvas::canvas
+	messagefacility::MF_MessageLogger
+	messagefacility::headers
+	cetlib::cetlib cetlib_except::cetlib_except
+	ROOT::Core
+	ROOT::Geom
+	ROOT::XMLIO
+	ROOT::Gdml
+	)
 
-simple_plugin( FlashResAna module
-                        larcore_Geometry_Geometry_service
-                        larcorealg_Geometry
-                        nusimdata_SimulationBase
-                        lardataobj_RecoBase
-                        ${ART_FRAMEWORK_CORE}
-                        ${ART_FRAMEWORK_PRINCIPAL}
-                        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                        ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                        ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                        art_Persistency_Common
-                        art_Persistency_Provenance
-                        art_Utilities
-                        canvas
-                        ${MF_MESSAGELOGGER}
-                        ${MF_UTILITIES}
-                        cetlib cetlib_except
-                        ${ROOT_BASIC_LIB_LIST}
-                        ${ROOT_GEOM}
-                        ${ROOT_XMLIO}
-                        ${ROOT_GDML}              
-)
+simple_plugin(FlashResAna module
+	larcore::Geometry_Geometry_service
+	larcorealg::Geometry
+	nusimdata::SimulationBase
+	lardataobj::RecoBase
+	art::Framework_Core
+	art::Framework_Principal
+	art::Framework_Services_Registry
+	art_root_io::tfile_support
+	art_root_io::TFileService_service
+	art::Persistency_Common
+	art::Persistency_Provenance
+	art::Utilities
+	canvas::canvas
+	messagefacility::MF_MessageLogger
+	messagefacility::headers
+	cetlib::cetlib cetlib_except::cetlib_except
+	ROOT::Core
+	ROOT::Geom
+	ROOT::XMLIO
+	ROOT::Gdml
+	)
 
-simple_plugin( PhotBackground module
-                        larcore_Geometry_Geometry_service
-                        larcorealg_Geometry
-                        nusimdata_SimulationBase
-                        icaruscode_CRTData
-                        icaruscode_CRT
-                        sbnobj_Common_CRT
-                        icaruscode_CRTUtils
-                        ${ART_FRAMEWORK_CORE}
-                        ${ART_FRAMEWORK_PRINCIPAL}
-                        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                        ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                        ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                        art_Persistency_Common
-                        art_Persistency_Provenance
-                        art_Utilities
-                        ${ROOT_BASIC_LIB_LIST}
-)
+simple_plugin(PhotBackground module
+	larcore::Geometry_Geometry_service
+	larcorealg::Geometry
+	nusimdata::SimulationBase
+	icaruscode::CRTData
+	icaruscode::CRT
+	sbnobj::Common_CRT
+	icaruscode::CRTUtils
+	art::Framework_Core
+	art::Framework_Principal
+	art::Framework_Services_Registry
+	art_root_io::tfile_support
+	art_root_io::TFileService_service
+	art::Persistency_Common
+	art::Persistency_Provenance
+	art::Utilities
+	ROOT::Core
+	)
 
 install_headers()
 install_fhicl()
diff --git a/icaruscode/CRT/CRTDecoder/BernCRTTranslator.cc b/icaruscode/CRT/CRTDecoder/BernCRTTranslator.cc
index 1fb2b2d..c33f092 100644
--- a/icaruscode/CRT/CRTDecoder/BernCRTTranslator.cc
+++ b/icaruscode/CRT/CRTDecoder/BernCRTTranslator.cc
@@ -147,8 +147,9 @@ std::vector<icarus::crt::BernCRTTranslator> icarus::crt::BernCRTTranslator::anal
 std::vector<icarus::crt::BernCRTTranslator> icarus::crt::BernCRTTranslator::getCRTData(art::Event const & evt) {
   std::vector<icarus::crt::BernCRTTranslator> out;
 
-  std::vector<art::Handle<artdaq::Fragments>> fragmentHandles;
-  evt.getManyByType(fragmentHandles);
+  //std::vector<art::Handle<artdaq::Fragments>> fragmentHandles;
+  //evt.getManyByType(fragmentHandles);
+  auto fragmentHandles = evt.getMany<artdaq::Fragments>();
   for (auto handle : fragmentHandles) {
     if (!handle.isValid() || handle->size() == 0)
       continue;
diff --git a/icaruscode/CRT/CRTDecoder/CMakeLists.txt b/icaruscode/CRT/CRTDecoder/CMakeLists.txt
index a66fbf1..877ea62 100644
--- a/icaruscode/CRT/CRTDecoder/CMakeLists.txt
+++ b/icaruscode/CRT/CRTDecoder/CMakeLists.txt
@@ -1,205 +1,206 @@
+include_directories(${TRACE_INC})
+
 art_make(
- EXCLUDE
-        CrtCal.cc
-        CrtCalTree.cxx
+	EXCLUDE
+		CrtCal.cc
+		CrtCalTree.cxx
 	CRTTiming.cc
 	CRTRawTree.cc
 	CRTPreProcessTree.cc
 	CRTMergePreProcessTrees.cxx
-        BernCRTTranslator.cc
+	BernCRTTranslator.cc
 	
- NO_PLUGINS # WAnt different link lists for modues
- BASENAME_ONLY
- LIBRARY_NAME sbndaq-artdaq_ArtModules_Common
- LIB_LIBRARIES sbndaq-artdaq-core_Overlays
-               sbndaq-artdaq-core_Overlays_Common
+	NO_PLUGINS
+	BASENAME_ONLY
+	LIBRARY_NAME sbndaq-artdaq_ArtModules_Common
+	LIB_LIBRARIES sbndaq-artdaq-core::Overlays
+		sbndaq-artdaq-core::Overlays_Common
 
 )
 
 art_make_library(
-    LIBRARY_NAME
-        CRT_CAL
-    SOURCE
-        CrtCal.cc
-    LIBRARIES 
-        cetlib_except
-        ${ROOT_BASIC_LIB_LIST}
-        ${ROOT_SPECTRUM}
-        ${ROOT_GEOM}
-        ${ROOT_CORE}
-        ${CETLIB}
+	LIBRARY_NAME
+		CRT_CAL
+	SOURCE
+		CrtCal.cc
+	LIBRARIES
+		cetlib_except::cetlib_except
+                ROOT::Graf
+		ROOT::Spectrum
+		ROOT::Geom
+		ROOT::Core
+                ROOT::Gpad
+		cetlib::cetlib
 )
 
 art_make_library(
-    LIBRARY_NAME
-        CRT_CAL_TREE
-    SOURCE
-        CrtCalTree.cxx
-    LIBRARIES 
-        cetlib_except
-        ${ROOT_CORE}
-        ${ROOT_BASIC_LIB_LIST}
-        ${ROOT_SPECTRUM}
-        ${ROOT_GEOM}
-        ${CETLIB}
-)
+	LIBRARY_NAME
+		CRT_CAL_TREE
+	SOURCE
+		CrtCalTree.cxx
+	LIBRARIES
+		cetlib_except::cetlib_except
+		ROOT::Core
+		ROOT::Spectrum
+		ROOT::Geom
+		cetlib::cetlib
+	)
 
 art_make_library(
-    LIBRARY_NAME
-        CRT_RAW_TREE
-    SOURCE
-        CRTRawTree.cc
-    LIBRARIES 
-        cetlib_except
-        ${ROOT_CORE}
-        ${ROOT_BASIC_LIB_LIST}
-        ${ROOT_SPECTRUM}
-        ${ROOT_GEOM}
-        ${CETLIB}
-)
+	LIBRARY_NAME
+		CRT_RAW_TREE
+	SOURCE
+		CRTRawTree.cc
+	LIBRARIES
+		cetlib_except::cetlib_except
+		ROOT::Core
+		ROOT::Spectrum
+		ROOT::Geom
+		cetlib::cetlib
+	)
 
 art_make_library(
-    LIBRARY_NAME
-        CRT_TIMING
-    SOURCE
-        CRTTiming.cc
-    LIBRARIES 
-        cetlib_except
-        ${ROOT_CORE}
-        ${ROOT_BASIC_LIB_LIST}
-        ${ROOT_SPECTRUM}
-        ${ROOT_GEOM}
-        ${CETLIB}
-	CRT_RAW_TREE
-	CRT_PREPROCESS_TREE
-)
+	LIBRARY_NAME
+		CRT_TIMING
+	SOURCE
+		CRTTiming.cc
+	LIBRARIES
+		cetlib_except::cetlib_except
+		ROOT::Core
+		ROOT::Spectrum
+		ROOT::Geom
+		cetlib::cetlib ROOT::Tree
+		CRT_RAW_TREE
+		CRT_PREPROCESS_TREE
+	)
 
 art_make_library(
-    LIBRARY_NAME
-        CRT_PREPROCESS_TREE
-    SOURCE
-        CRTPreProcessTree.cc
-    LIBRARIES 
-        cetlib_except
-        ${ROOT_CORE}
-        ${ROOT_BASIC_LIB_LIST}
-        ${ROOT_SPECTRUM}
-        ${ROOT_GEOM}
-        ${CETLIB}
-)
+	LIBRARY_NAME
+		CRT_PREPROCESS_TREE
+	SOURCE
+		CRTPreProcessTree.cc
+	LIBRARIES
+		cetlib_except::cetlib_except
+		ROOT::Core
+		ROOT::Spectrum
+		ROOT::Geom
+		cetlib::cetlib
+	)
 
 art_make_library(
-    LIBRARY_NAME
-        CRT_MERGE_PREPROCESS_TREE
-    SOURCE
-        CRTMergePreProcessTrees.cxx
-    LIBRARIES 
-        cetlib_except
-        ${ROOT_CORE}
-        ${ROOT_BASIC_LIB_LIST}
-        ${ROOT_SPECTRUM}
-        ${ROOT_GEOM}
-        ${CETLIB}
-	CRT_TIMING
-	CRT_PREPROCESS_TREE
+	LIBRARY_NAME
+		CRT_MERGE_PREPROCESS_TREE
+	SOURCE
+		CRTMergePreProcessTrees.cxx
+	LIBRARIES
+		cetlib_except::cetlib_except
+		ROOT::Core
+		ROOT::Spectrum
+		ROOT::Geom
+                ROOT::Tree
+		cetlib::cetlib
+		CRT_TIMING
+		CRT_PREPROCESS_TREE
 )
 
 art_make_library(
-    LIBRARY_NAME
-        BERN_CRT_TRANSLATOR
-    SOURCE
-        BernCRTTranslator.cc
-    LIBRARIES 
-        cetlib_except
-        ${CANVAS}
-        ${ARTDAQ_DAQDATA}
-        ${ART_FRAMEWORK_PRINCIPAL}
-        sbndaq-artdaq-core_Overlays
-        sbndaq-artdaq-core_Overlays_Common
-        ${ART_PERSISTENCY_PROVENANCE}
-        artdaq-core_Data
-)
+	LIBRARY_NAME
+		BERN_CRT_TRANSLATOR
+	SOURCE
+		BernCRTTranslator.cc
+	LIBRARIES
+		cetlib_except::cetlib_except
+		canvas::canvas
+		
+		art::Framework_Principal
+		sbndaq-artdaq-core::Overlays
+		sbndaq-artdaq-core::Overlays_Common
+		art::Persistency_Provenance
+		artdaq_core::artdaq-core_Data
+	)
 
 install_headers()
 install_source()
 
-simple_plugin( BernCRTAna "module"
-  art_Framework_Services_Registry
-  art_root_io_tfile_support
-  art_root_io_TFileService_service
-  ${ROOT_BASIC_LIB_LIST}
-        ${ARTDAQ-CORE_UTILITIES}
-  sbndaq-artdaq-core_Overlays_Common 
-  artdaq-core_Data
-  BERN_CRT_TRANSLATOR
-)
-
-simple_plugin( CrtNoiseMonTool "module"
-  art_Framework_Services_Registry
-  art_root_io_tfile_support
-  art_root_io_TFileService_service
-  #art_Framework_Services_Optional
-  #art_Framework_Services_Optional_TFileService_service
-  ${ROOT_BASIC_LIB_LIST}
-        ${ARTDAQ-CORE_UTILITIES}
-  sbndaq-artdaq-core_Overlays_Common 
-  artdaq-core_Data
-  BERN_CRT_TRANSLATOR
-)
-
-simple_plugin( CrtCalAnalysis "module"
-  art_Framework_Services_Registry
-  art_root_io_tfile_support
-  art_root_io_TFileService_service
-  #art_Framework_Services_Optional
-  #art_Framework_Services_Optional_TFileService_service
-  ${ROOT_BASIC_LIB_LIST}
-        ${ARTDAQ-CORE_UTILITIES}
-  sbndaq-artdaq-core_Overlays_Common 
-  artdaq-core_Data
-  CRT_CAL
-  BERN_CRT_TRANSLATOR
-)
-
-simple_plugin( AnaProducer "module"
-  art_Framework_Services_Registry
-  art_root_io_tfile_support
-  art_root_io_TFileService_service
-  #art_Framework_Services_Optional
-  #art_Framework_Services_Optional_TFileService_service
-  ${ROOT_BASIC_LIB_LIST}
-        ${ARTDAQ-CORE_UTILITIES}
-  sbndaq-artdaq-core_Overlays_Common 
-  artdaq-core_Data
-  CRT_CAL
-  CRT_CAL_TREE
-  CRT_RAW_TREE
-  CRT_TIMING
-  BERN_CRT_TRANSLATOR
-)
-
-simple_plugin( CRTEventProducer "module"
-  art_Framework_Services_Registry
-  art_root_io_tfile_support
-  art_root_io_TFileService_service
-  #art_Framework_Services_Optional
-  #art_Framework_Services_Optional_TFileService_service
-  #${ROOT_BASIC_LIB_LIST}
-  CRT_PREPROCESS_TREE
-  #CRT_CAL_TREE
-  sbnobj_Common_CRT
-)
-
-simple_plugin( DecoderICARUSCRT "module"
-  art_Framework_Services_Registry
-  art_root_io_tfile_support
-  art_root_io_TFileService_service
-  ${ROOT_BASIC_LIB_LIST}
-  ${ARTDAQ-CORE_UTILITIES}
-  sbndaq-artdaq-core_Overlays_Common
-  artdaq-core_Data
-  BERN_CRT_TRANSLATOR
-  sbnobj_Common_CRT
-)
+simple_plugin(BernCRTAna "module"
+	art::Framework_Services_Registry
+	art_root_io::tfile_support
+	art_root_io::TFileService_service
+	artdaq_core::artdaq-core_Utilities
+	sbndaq-artdaq-core::Overlays_Common
+	artdaq_core::artdaq-core_Data
+	BERN_CRT_TRANSLATOR
+	ROOT::Tree ROOT::Hist ROOT::Core
+	)
+
+simple_plugin(CrtNoiseMonTool "module"
+	art::Framework_Services_Registry
+	art_root_io::tfile_support
+	art_root_io::TFileService_service
+	#art::Framework_Services_Optional
+	artdaq_core::artdaq-core_Utilities
+	sbndaq-artdaq-core::Overlays_Common
+	artdaq_core::artdaq-core_Data
+	BERN_CRT_TRANSLATOR
+	ROOT::Tree ROOT::Hist ROOT::Core
+	)
+
+simple_plugin(CrtCalAnalysis "module"
+	art::Framework_Services_Registry
+	art_root_io::tfile_support
+	art_root_io::TFileService_service
+	#art::Framework_Services_Optional
+	#art::Framework_Services_Optional_TFileService_service
+	artdaq_core::artdaq-core_Utilities
+	sbndaq-artdaq-core::Overlays_Common
+	artdaq_core::artdaq-core_Data
+	CRT_CAL
+	BERN_CRT_TRANSLATOR
+	ROOT::Tree ROOT::Hist ROOT::Core
+	)
+
+simple_plugin(AnaProducer "module"
+	art::Framework_Services_Registry
+	art_root_io::tfile_support
+	art_root_io::TFileService_service
+	#art::Framework_Services_Optional
+	#art::Framework_Services_Optional_TFileService_service
+	artdaq_core::artdaq-core_Utilities
+	sbndaq-artdaq-core::Overlays_Common
+	artdaq_core::artdaq-core_Data
+	CRT_CAL
+	CRT_CAL_TREE
+	CRT_RAW_TREE
+	CRT_TIMING
+	BERN_CRT_TRANSLATOR
+	ROOT::Tree ROOT::Hist ROOT::Core
+	)
+
+simple_plugin(CRTEventProducer "module"
+	art::Framework_Services_Registry
+	art_root_io::tfile_support
+	art_root_io::TFileService_service
+	#art::Framework_Services_Optional
+	#art::Framework_Services_Optional_TFileService_service
+	#
+	CRT_PREPROCESS_TREE
+	#CRT_CAL_TREE
+	sbnobj::Common_CRT
+	lardata::Utilities
+        larcore::Geometry_StandardGeometryHelper_service
+	ROOT::Tree ROOT::Hist ROOT::Core
+	)
+
+simple_plugin(DecoderICARUSCRT "module"
+	art::Framework_Services_Registry
+	art_root_io::tfile_support
+	art_root_io::TFileService_service
+	artdaq_core::artdaq-core_Utilities
+	sbndaq-artdaq-core::Overlays_Common
+	artdaq_core::artdaq-core_Data
+	BERN_CRT_TRANSLATOR
+	sbnobj::Common_CRT
+	ROOT::Tree ROOT::Hist ROOT::Core
+	)
 
 install_fhicl()
diff --git a/icaruscode/CRT/CRTDetSim_module.cc b/icaruscode/CRT/CRTDetSim_module.cc
index a1e5a50..885c27c 100644
--- a/icaruscode/CRT/CRTDetSim_module.cc
+++ b/icaruscode/CRT/CRTDetSim_module.cc
@@ -68,6 +68,7 @@
 #include "nurandom/RandomUtils/NuRandomService.h"
 #include "canvas/Persistency/Common/Ptr.h"
 #include "canvas/Persistency/Common/PtrVector.h"
+#include "canvas/Persistency/Common/Assns.h"
 #include "art/Persistency/Common/PtrMaker.h"
 
 //larsoft includes
diff --git a/icaruscode/CRT/CRTGeometryHelper.h b/icaruscode/CRT/CRTGeometryHelper.h
index ae6bfba..e0fcaa2 100644
--- a/icaruscode/CRT/CRTGeometryHelper.h
+++ b/icaruscode/CRT/CRTGeometryHelper.h
@@ -18,6 +18,8 @@
 #include "larcore/Geometry/AuxDetExptGeoHelperInterface.h"
 #include "larcorealg/Geometry/AuxDetChannelMapAlg.h"
 #include "icaruscode/CRT/CRTChannelMapAlg.h"
+#include "art/Framework/Services/Registry/ServiceHandle.h"
+#include "art/Framework/Services/Registry/ServiceDeclarationMacros.h"
 #include <memory>
 
 namespace geo
diff --git a/icaruscode/CRT/CRTGeometryHelper_service.cc b/icaruscode/CRT/CRTGeometryHelper_service.cc
index 351f9a0..d631dc4 100644
--- a/icaruscode/CRT/CRTGeometryHelper_service.cc
+++ b/icaruscode/CRT/CRTGeometryHelper_service.cc
@@ -11,6 +11,8 @@
 #include "larcorealg/Geometry/AuxDetChannelMapAlg.h"
 #include "larcorealg/Geometry/AuxDetGeometryCore.h"
 #include "larcorealg/Geometry/AuxDetGeo.h"
+#include "art/Framework/Services/Registry/ServiceDefinitionMacros.h"
+#include "fhiclcpp/ParameterSet.h"
 #include "icaruscode/CRT/CRTGeometryHelper.h"
 #include "icaruscode/CRT/CRTChannelMapAlg.h"
 #include <memory>
diff --git a/icaruscode/CRT/CRTTrackProducer_module.cc b/icaruscode/CRT/CRTTrackProducer_module.cc
index 926d785..fa97cb1 100644
--- a/icaruscode/CRT/CRTTrackProducer_module.cc
+++ b/icaruscode/CRT/CRTTrackProducer_module.cc
@@ -37,6 +37,7 @@
 #include <utility>
 #include <cmath> 
 #include <memory>
+#include <numeric> // std::accumulate
 
 using std::string;
 using std::vector;
diff --git a/icaruscode/CRT/CRTUtils/CMakeLists.txt b/icaruscode/CRT/CRTUtils/CMakeLists.txt
index 07e742f..b605150 100644
--- a/icaruscode/CRT/CRTUtils/CMakeLists.txt
+++ b/icaruscode/CRT/CRTUtils/CMakeLists.txt
@@ -1,46 +1,47 @@
 if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
-cet_add_compiler_flags(CXX -Wno-maybe-uninitialized)
+	cet_add_compiler_flags(CXX -Wno-maybe-uninitialized)
 endif()
-art_make(    LIBRARY_NAME icaruscode_CRTUtils
-             LIB_LIBRARIES larcorealg_Geometry
-                           larcore_Geometry_Geometry_service
-                           larsim_Simulation lardataobj_Simulation
-                           larsim_MCCheater_BackTrackerService_service
-                           larsim_MCCheater_ParticleInventoryService_service
-                           lardata_Utilities
-                           larevt_Filters
-                           lardataobj_RawData
-                           lardataobj_RecoBase
-                           lardata_RecoObjects  
-                           lardataalg_DetectorInfo
-                           larpandora_LArPandoraInterface
-                           nusimdata_SimulationBase
-                           cetlib cetlib_except
-                           ${ART_FRAMEWORK_CORE}
-                           ${ART_FRAMEWORK_PRINCIPAL}
-                           ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                           ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                           ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                           ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-                           art_Persistency_Common canvas
-                           art_Persistency_Provenance canvas
-                           art_Utilities canvas
-                           ${MF_MESSAGELOGGER}
-                           ${CLHEP}
-                           ${FHICLCPP}
-                           ${ROOT_GEOM}
-                           ${ROOT_XMLIO}
-                           ${ROOT_GDML}
-                           ${ROOT_GENVECTOR}
-                           ${ROOT_BASIC_LIB_LIST}
-                           ${Boost_SYSTEM_LIBRARY}
-                           icaruscode_CRT
-                           sbnobj_Common_CRT
-                           icaruscode_CRTData
-                           lardata_DetectorInfoServices_DetectorClocksServiceStandard_service
-                           nurandom_RandomUtils_NuRandomService_service
-        )
+art_make(LIBRARY_NAME icaruscode_CRTUtils
+	LIB_LIBRARIES larcorealg::Geometry
+	larcore::Geometry_Geometry_service
+	larsim::Simulation
+	lardataobj::Simulation
+	larsim::MCCheater_BackTrackerService_service
+	larsim::MCCheater_ParticleInventoryService_service
+	lardata::Utilities
+	larevt::Filters
+	lardataobj::RawData
+	lardataobj::RecoBase
+	lardata::RecoObjects
+	lardataalg::DetectorInfo
+	larpandora::LArPandoraInterface
+	nusimdata::SimulationBase
+	cetlib::cetlib cetlib_except::cetlib_except
+	art::Framework_Core
+	art::Framework_Principal
+	art::Framework_Services_Registry
+	art_root_io::tfile_support ROOT::Core
+	art_root_io::TFileService_service
+	art::Framework_Services_Optional_RandomNumberGenerator_service
+	art::Persistency_Common
+	art::Persistency_Provenance
+	art::Utilities canvas::canvas
+	messagefacility::MF_MessageLogger
+	CLHEP::CLHEP
+	fhiclcpp::fhiclcpp
+	ROOT::Geom
+	ROOT::XMLIO
+	ROOT::Gdml
+	ROOT::GenVector
+	Boost::system
+	icaruscode::CRT
+	sbnobj::Common_CRT
+	icaruscode::CRTData
+	lardata::DetectorInfoServices_DetectorClocksServiceStandard_service
+	nurandom::RandomUtils_NuRandomService_service
+	)
 
 install_headers()
 install_fhicl()
 install_source()
+
diff --git a/icaruscode/CRT/CRTUtils/CRTCommonUtils.cc b/icaruscode/CRT/CRTUtils/CRTCommonUtils.cc
index 6c5032c..8928ac0 100644
--- a/icaruscode/CRT/CRTUtils/CRTCommonUtils.cc
+++ b/icaruscode/CRT/CRTUtils/CRTCommonUtils.cc
@@ -2,6 +2,7 @@
 #define IC_CRTCOMMONUTILS_CC
 
 #include "icaruscode/CRT/CRTUtils/CRTCommonUtils.h"
+#include <fstream>
 
 using namespace icarus::crt;
 
diff --git a/icaruscode/Decode/CMakeLists.txt b/icaruscode/Decode/CMakeLists.txt
index 0739aff..b28f1f3 100644
--- a/icaruscode/Decode/CMakeLists.txt
+++ b/icaruscode/Decode/CMakeLists.txt
@@ -1,87 +1,92 @@
+include_directories(${TRACE_INC})
+
 cet_enable_asserts()
 
+cet_find_library(LIBWDA NAMES wda PATHS ENV LIBWDA_LIB)
+
 art_make(
-          EXCLUDE
-                        PMTconfigurationExtraction_module.cc
-                        DumpPMTconfiguration_module.cc
-                        DumpArtDAQfragments_module.cc
-                        DaqDecoderICARUSPMT_module.cc
-          MODULE_LIBRARIES
-                        icarus_signal_processing
-                        icarus_signal_processing_Detection
-                        icarus_signal_processing_Filters
-                        sbndaq-artdaq-core_Overlays_ICARUS 
-                        artdaq-core_Utilities
-                        larcorealg_Geometry
-                        larcore_Geometry_Geometry_service
-                        lardata_Utilities
-                        larevt_Filters
-                        lardataobj_RawData
-                        lardata_ArtDataHelper
-                        ${ROOT_BASIC_LIB_LIST}
-                        ${LIBWDA}
-                        ${ART_FRAMEWORK_CORE}
-                        ${ART_FRAMEWORK_PRINCIPAL}
-                        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                        ${ART_ROOT_IO_TFILE_SUPPORT}
-                        ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                        ${ART_UTILITIES}
-                        art_Persistency_Common canvas
-                        art_Persistency_Provenance canvas
-                        art_Utilities canvas
-                        ${MF_MESSAGELOGGER}
-                        ${MF_UTILITIES}
-                        ${FHICLCPP}
-                        cetlib cetlib_except
-                        ${TBB}
-        )
+	EXCLUDE
+		PMTconfigurationExtraction_module.cc
+		DumpPMTconfiguration_module.cc
+		DumpArtDAQfragments_module.cc
+		DaqDecoderICARUSPMT_module.cc
+	MODULE_LIBRARIES
+	icarus_signal_processing::icarus_signal_processing
+	icarus_signal_processing::Detection
+	icarus_signal_processing::Filters
+	sbndaq-artdaq-core::Overlays_ICARUS
+	artdaq_core::artdaq-core_Utilities
+	larcorealg::Geometry
+	larcore::Geometry_Geometry_service
+	lardata::Utilities
+	larevt::Filters
+	lardataobj::RawData
+	lardata::ArtDataHelper
+	LIBWDA
+	art::Framework_Core
+	art::Framework_Principal
+	art::Framework_Services_Registry
+	art_root_io::tfile_support
+	art_root_io::TFileService_service
+	art::Utilities
+	art::Persistency_Common canvas::canvas
+	art::Persistency_Provenance
+	art::Utilities
+	messagefacility::MF_MessageLogger
+	messagefacility::headers
+	fhiclcpp::fhiclcpp
+	cetlib::cetlib cetlib_except::cetlib_except
+	${TBB}
+	)
 
 simple_plugin(DaqDecoderICARUSPMT module
-  sbnobj_Common_PMT_Data
-  icaruscode_Decode_DecoderTools_Dumpers
-  icaruscode_Decode_DataProducts # should become sbnobj_Common_Trigger
-  icaruscode_Decode_DecoderTools
-  sbndaq-artdaq-core_Overlays_Common
-  sbndaq-artdaq-core_Overlays
-  lardataobj_RawData
-  artdaq-core_Data
-  ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-  ${ART_ROOT_IO_TFILE_SUPPORT}
-  ${ART_FRAMEWORK_SERVICES_REGISTRY}
-  ${MF_MESSAGELOGGER}
-  ${FHICLCPP}
-  cetlib_except
-  ROOT::Tree
-  )
+	sbnobj::Common_PMT_Data
+	icaruscode::Decode_DecoderTools_Dumpers
+	icaruscode::Decode_DataProducts # should become sbnobj::Common_Trigger
+	icaruscode::Decode_DecoderTools
+	sbndaq-artdaq-core::Overlays_Common
+	sbndaq-artdaq-core::Overlays
+	lardataobj::RawData
+	larcore::Geometry_Geometry_service
+	artdaq_core::artdaq-core_Data
+	art_root_io::TFileService_service
+	art_root_io::tfile_support
+	art::Framework_Services_Registry
+	messagefacility::MF_MessageLogger
+	fhiclcpp::fhiclcpp
+	cetlib_except::cetlib_except
+	ROOT::Tree
+	lardata::Utilities
+	)
 
 simple_plugin(PMTconfigurationExtraction module
-  icaruscode_Decode_DecoderTools
-  sbnobj_Common_PMT_Data
-  art_Framework_Services_Registry
-  fhiclcpp
-  cetlib_except
-  )
+	icaruscode::Decode_DecoderTools
+	sbnobj::Common_PMT_Data
+	art::Framework_Services_Registry
+	fhiclcpp::fhiclcpp
+	cetlib_except::cetlib_except
+	)
 
 simple_plugin(DumpPMTconfiguration module
-  sbnobj_Common_PMT_Data
-  ${MF_MESSAGELOGGER}
-  fhiclcpp
-  cetlib_except
-  )
+	sbnobj::Common_PMT_Data
+	messagefacility::MF_MessageLogger
+	fhiclcpp::fhiclcpp
+	cetlib_except::cetlib_except
+	)
 
 simple_plugin(DumpArtDAQfragments module
-  icaruscode_Decode_DecoderTools_Dumpers
-  artdaq-core_Data
-  ${MF_MESSAGELOGGER}
-  fhiclcpp
-  cetlib_except
-  )
+	icaruscode::Decode_DecoderTools_Dumpers
+	artdaq_core::artdaq-core_Data
+	messagefacility::MF_MessageLogger
+	fhiclcpp::fhiclcpp
+	cetlib_except::cetlib_except
+	)
 
 install_headers()
 install_fhicl()
 install_source()
 
-# Add our tools directory
+#Addourtoolsdirectory
 add_subdirectory(DecoderTools)
 add_subdirectory(ChannelMapping)
 add_subdirectory(DataProducts)
diff --git a/icaruscode/Decode/ChannelMapping/CMakeLists.txt b/icaruscode/Decode/ChannelMapping/CMakeLists.txt
index b31c43e..6f6893d 100644
--- a/icaruscode/Decode/ChannelMapping/CMakeLists.txt
+++ b/icaruscode/Decode/ChannelMapping/CMakeLists.txt
@@ -1,65 +1,68 @@
 cet_enable_asserts()
 
+include_directories(${LIBWDA_INC})
+
 art_make(
-          EXCLUDE "PMTChannelMapDumper.cxx"
-          LIB_LIBRARIES
-                        art_Utilities
-                        canvas
-                        ${FHICLCPP}
-                        ${MF_MESSAGELOGGER}
-                        cetlib_except
-                        cetlib
-          SERVICE_LIBRARIES
-                        icaruscode_Decode_ChannelMapping
-                        lardata_Utilities
-                        lardata_ArtDataHelper
-                        ${ROOT_BASIC_LIB_LIST}
-                        ${LIBWDA}
-                        ${ART_FRAMEWORK_CORE}
-                        ${ART_FRAMEWORK_PRINCIPAL}
-                        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                        ${ART_ROOT_IO_TFILE_SUPPORT}
-                        ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                        ${ART_UTILITIES}
-                        art_Persistency_Common canvas
-                        art_Persistency_Provenance canvas
-                        art_Utilities canvas
-                        ${MF_MESSAGELOGGER}
-                        ${MF_UTILITIES}
-                        ${FHICLCPP}
-                        cetlib cetlib_except
-                        ${TBB}
-          TOOL_LIBRARIES
-                        lardata_Utilities
-                        lardata_ArtDataHelper
-                        ${ROOT_BASIC_LIB_LIST}
-                        ${LIBWDA}
-                        ${ART_FRAMEWORK_CORE}
-                        ${ART_FRAMEWORK_PRINCIPAL}
-                        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                        ${ART_ROOT_IO_TFILE_SUPPORT}
-                        ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                        ${ART_UTILITIES}
-                        art_Persistency_Common canvas
-                        art_Persistency_Provenance canvas
-                        art_Utilities canvas
-                        ${MF_MESSAGELOGGER}
-                        ${MF_UTILITIES}
-                        ${FHICLCPP}
-                        cetlib cetlib_except
-                        ${SQLITE3}
-                        ${TBB}
-        )
+	EXCLUDE "PMTChannelMapDumper.cxx"
+	LIB_LIBRARIES
+		art::Utilities
+		canvas::canvas
+		fhiclcpp::fhiclcpp
+		messagefacility::MF_MessageLogger
+		cetlib_except::cetlib_except
+		cetlib::cetlib
+                larcorealg::CoreUtils
+	SERVICE_LIBRARIES
+		icaruscode::Decode_ChannelMapping
+		lardata::Utilities
+		lardata::ArtDataHelper
+                larcorealg::CoreUtils
+		LIBWDA
+		art::Framework_Core
+		art::Framework_Principal
+		art::Framework_Services_Registry
+		art_root_io::tfile_support
+		art_root_io::TFileService_service
+		art::Utilities
+		art::Persistency_Common
+		art::Persistency_Provenance
+		art::Utilities canvas::canvas
+		messagefacility::MF_MessageLogger
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib cetlib_except::cetlib_except
+		${TBB}
+	TOOL_LIBRARIES
+                larcorealg::CoreUtils
+		lardata::Utilities
+		lardata::ArtDataHelper
+		LIBWDA
+		art::Framework_Core
+		art::Framework_Principal
+		art::Framework_Services_Registry
+		art_root_io::tfile_support
+		art_root_io::TFileService_service
+		art::Utilities
+		art::Persistency_Common canvas::canvas
+		art::Persistency_Provenance
+		art::Utilities
+		messagefacility::MF_MessageLogger
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib cetlib_except::cetlib_except
+		SQLite::SQLite3
+		${TBB}
+	)
 
 art_make_exec(NAME "PMTChannelMapDumper"
-  LIBRARIES
-    icaruscode_Decode_ChannelMapping
-    ${MF_MESSAGELOGGER}
-    ${FHICLCPP}
-    cetlib
-    cetlib_except
-    Boost::filesystem
-  )
+	LIBRARIES
+		icaruscode::Decode_ChannelMapping
+		messagefacility::MF_MessageLogger
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib
+		cetlib_except::cetlib_except
+		Boost::filesystem
+	)
 
 install_headers()
 install_fhicl()
diff --git a/icaruscode/Decode/ChannelMapping/ICARUSChannelMap_service.cc b/icaruscode/Decode/ChannelMapping/ICARUSChannelMap_service.cc
index c662301..8da6c63 100644
--- a/icaruscode/Decode/ChannelMapping/ICARUSChannelMap_service.cc
+++ b/icaruscode/Decode/ChannelMapping/ICARUSChannelMap_service.cc
@@ -8,7 +8,8 @@
 
 // framework libraries
 #include "art/Framework/Services/Registry/ActivityRegistry.h"
-#include "art/Framework/Services/Registry/ServiceMacros.h"
+#include "art/Framework/Services/Registry/ServiceDefinitionMacros.h"
+#include "art/Framework/Services/Registry/ServiceDeclarationMacros.h"
 #include "fhiclcpp/ParameterSet.h"
 #include "cetlib_except/exception.h"
 
diff --git a/icaruscode/Decode/ChannelMapping/IICARUSChannelMap.h b/icaruscode/Decode/ChannelMapping/IICARUSChannelMap.h
index 228af67..9a9c770 100644
--- a/icaruscode/Decode/ChannelMapping/IICARUSChannelMap.h
+++ b/icaruscode/Decode/ChannelMapping/IICARUSChannelMap.h
@@ -12,7 +12,7 @@
 #ifndef IICARUSChannelMap_H
 #define IICARUSChannelMap_H
 
-#include "art/Framework/Services/Registry/ServiceMacros.h"
+#include "art/Framework/Services/Registry/ServiceDeclarationMacros.h"
 
 #include <vector>
 #include <string>
diff --git a/icaruscode/Decode/DaqDecoderICARUSPMT_module.cc b/icaruscode/Decode/DaqDecoderICARUSPMT_module.cc
index ddc6f01..c749e52 100644
--- a/icaruscode/Decode/DaqDecoderICARUSPMT_module.cc
+++ b/icaruscode/Decode/DaqDecoderICARUSPMT_module.cc
@@ -1194,8 +1194,10 @@ icarus::DaqDecoderICARUSPMT::DaqDecoderICARUSPMT(Parameters const& params)
 //------------------------------------------------------------------------------
 void icarus::DaqDecoderICARUSPMT::beginRun(art::Run& run) {
   
+  //sbn::PMTconfiguration const* PMTconfig = fPMTconfigTag
+  //  ? run.getPointerByLabel<sbn::PMTconfiguration>(*fPMTconfigTag): nullptr;
   sbn::PMTconfiguration const* PMTconfig = fPMTconfigTag
-    ? run.getPointerByLabel<sbn::PMTconfiguration>(*fPMTconfigTag): nullptr;
+    ? run.getHandle<sbn::PMTconfiguration>(*fPMTconfigTag).product(): nullptr;
   
   UpdatePMTConfiguration(PMTconfig);
   
@@ -1592,7 +1594,7 @@ auto icarus::DaqDecoderICARUSPMT::fetchTriggerTimestamp
   
   
   auto const& extraTrigger
-    = event.getByLabel<sbn::ExtraTriggerInfo>(*fTriggerTag);
+    = event.getProduct<sbn::ExtraTriggerInfo>(*fTriggerTag);
   if (!extraTrigger.isValid()) {
     // this means there is some problem from trigger decoder;
     // while we might recover additional information from other data products,
@@ -1608,7 +1610,7 @@ auto icarus::DaqDecoderICARUSPMT::fetchTriggerTimestamp
   }
   
   auto const& triggers
-    = event.getByLabel<std::vector<raw::Trigger>>(*fTriggerTag);
+    = event.getProduct<std::vector<raw::Trigger>>(*fTriggerTag);
   if (triggers.size() != 1U) {
     // if this is hit, the decoder needs some development to correctly deal
     // with input with no trigger, or more than one
diff --git a/icaruscode/Decode/DaqDecoderICARUSPMTnotThatOld_module.cc b/icaruscode/Decode/DaqDecoderICARUSPMTnotThatOld_module.cc
index 3d9f88b..92c7135 100644
--- a/icaruscode/Decode/DaqDecoderICARUSPMTnotThatOld_module.cc
+++ b/icaruscode/Decode/DaqDecoderICARUSPMTnotThatOld_module.cc
@@ -136,7 +136,7 @@ void DaqDecoderICARUSPMT::produce(art::Event & event)
     try
     {
         // Recover the data fragments for the PMT 
-        auto const& fragments = event.getByLabel<artdaq::Fragments>(fInputTag);
+        auto const& fragments = event.getProduct<artdaq::Fragments>(fInputTag);
     
         // Make sure data available
         if (!fragments.empty())
diff --git a/icaruscode/Decode/DaqDecoderICARUSPMTold_module.cc b/icaruscode/Decode/DaqDecoderICARUSPMTold_module.cc
index 8d67942..f74694e 100644
--- a/icaruscode/Decode/DaqDecoderICARUSPMTold_module.cc
+++ b/icaruscode/Decode/DaqDecoderICARUSPMTold_module.cc
@@ -15,7 +15,6 @@
 #include "canvas/Persistency/Common/FindMany.h"
 #include "canvas/Persistency/Common/FindOne.h"
 #include "fhiclcpp/ParameterSet.h"
-#include "fhiclcpp/make_ParameterSet.h"
 #include "messagefacility/MessageLogger/MessageLogger.h"
 
 #include "lardataobj/RawData/RawDigit.h"
diff --git a/icaruscode/Decode/DataProducts/CMakeLists.txt b/icaruscode/Decode/DataProducts/CMakeLists.txt
index ab30dea..1afc573 100644
--- a/icaruscode/Decode/DataProducts/CMakeLists.txt
+++ b/icaruscode/Decode/DataProducts/CMakeLists.txt
@@ -1,8 +1,8 @@
-cet_make( 
-  NO_DICTIONARY
-  )
+cet_make(
+NO_DICTIONARY
+)
 
-art_dictionary(DICTIONARY_LIBRARIES icaruscode_Decode_DataProducts)
+art_dictionary(DICTIONARY_LIBRARIES icaruscode::Decode_DataProducts)
 
 install_headers()
 install_source()
diff --git a/icaruscode/Decode/DecoderTools/CMakeLists.txt b/icaruscode/Decode/DecoderTools/CMakeLists.txt
index 40885ee..8f70475 100644
--- a/icaruscode/Decode/DecoderTools/CMakeLists.txt
+++ b/icaruscode/Decode/DecoderTools/CMakeLists.txt
@@ -1,54 +1,58 @@
 cet_enable_asserts()
 
-cet_find_library(LIBWDA NAMES wda PATHS ENV LIBWDA_LIB NO_DEFAULT_PATH)
+cet_find_library(LIBWDA NAMES wda PATHS ENV LIBWDA_LIB)
 
 include_directories($ENV{LIBWDA_FQ_DIR}/include)
 
+include_directories(${FFTW3_INCLUDE_DIRS})
+
 add_subdirectory("Dumpers")
 
-art_make( SUBDIRS details
-          LIB_LIBRARIES
-                        icaruscode_Utilities
-                        sbnobj_Common_PMT_Data
-                        ${MF_MESSAGELOGGER}
-                        ${FHICLCPP}
-                        cetlib_except
-                        cetlib
-                        ROOT::RIO
-                        ROOT::Core
-          TOOL_LIBRARIES
-                        sbndaq-artdaq-core_Overlays_ICARUS 
-                        artdaq-core_Utilities
-                        icarus_signal_processing
-                        icarus_signal_processing_Detection
-                        icarus_signal_processing_Filters
-                        icaruscode_TPC_Utilities_SignalShapingICARUSService_service
-                        icaruscode_Decode_DecoderTools
-                        icaruscode_Decode_DecoderTools_Dumpers
-                        icaruscode_Utilities
-                        larcorealg_Geometry
-                        larcore_Geometry_Geometry_service
-                        lardata_Utilities
-                        lardataalg_DetectorInfo
-                        larevt_Filters
-                        lardataobj_RawData
-                        lardata_ArtDataHelper
-                        ${ROOT_BASIC_LIB_LIST}
-                        ${LIBWDA}
-                        ${ART_FRAMEWORK_CORE}
-                        ${ART_FRAMEWORK_PRINCIPAL}
-                        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                        ${ART_ROOT_IO_TFILE_SUPPORT}
-                        ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                        ${ART_UTILITIES}
-                        art_Persistency_Common canvas
-                        art_Persistency_Provenance canvas
-                        art_Utilities canvas
-                        ${MF_MESSAGELOGGER}
-                        ${MF_UTILITIES}
-                        ${FHICLCPP}
-                        cetlib cetlib_except
-        )
+art_make(SUBDIRS details
+	LIB_LIBRARIES
+                lardataalg::DetectorInfo
+		icaruscode::Utilities
+		sbnobj::Common_PMT_Data
+		messagefacility::MF_MessageLogger
+		fhiclcpp::fhiclcpp
+		cetlib_except::cetlib_except
+		cetlib::cetlib
+		ROOT::RIO
+		ROOT::Core
+		art::Framework_Services_Registry
+	TOOL_LIBRARIES
+		sbndaq-artdaq-core::Overlays_ICARUS
+		artdaq_core::artdaq-core_Utilities
+		icarus_signal_processing::icarus_signal_processing
+		icarus_signal_processing::Detection
+		icarus_signal_processing::Filters
+		icaruscode::TPC_Utilities_SignalShapingICARUSService_service
+		icaruscode::Decode_DecoderTools
+		icaruscode::Decode_DecoderTools_Dumpers
+		icaruscode::Utilities
+		larcorealg::Geometry
+		larcore::Geometry_Geometry_service
+		lardata::Utilities
+		lardataalg::DetectorInfo
+		larevt::Filters
+		lardataobj::RawData
+		lardata::ArtDataHelper
+		ROOT::Core
+		LIBWDA
+		art::Framework_Core
+		art::Framework_Principal
+		art::Framework_Services_Registry
+		art_root_io::tfile_support
+		art_root_io::TFileService_service
+		art::Utilities
+		art::Persistency_Common canvas::canvas
+		art::Persistency_Provenance
+		art::Utilities
+		messagefacility::MF_MessageLogger
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib cetlib_except::cetlib_except
+	)
 
 install_headers()
 install_fhicl()
diff --git a/icaruscode/Decode/DecoderTools/Dumpers/CMakeLists.txt b/icaruscode/Decode/DecoderTools/Dumpers/CMakeLists.txt
index 478eafa..3ddacad 100644
--- a/icaruscode/Decode/DecoderTools/Dumpers/CMakeLists.txt
+++ b/icaruscode/Decode/DecoderTools/Dumpers/CMakeLists.txt
@@ -1,7 +1,8 @@
 art_make_library(
-  SOURCE
-    "FragmentDumper.cxx"
-  LIBRARIES
-    artdaq-core_Data
-    ${CETLIB_EXCEPT}
-  )
+	SOURCE
+		"FragmentDumper.cxx"
+	LIBRARIES
+		artdaq_core::artdaq-core_Data
+		cetlib_except::cetlib_except
+                icarusalg::Utilities
+	)
diff --git a/icaruscode/Decode/DecoderTools/PMTDecoder_tool.cc b/icaruscode/Decode/DecoderTools/PMTDecoder_tool.cc
index f429f03..633ff1e 100644
--- a/icaruscode/Decode/DecoderTools/PMTDecoder_tool.cc
+++ b/icaruscode/Decode/DecoderTools/PMTDecoder_tool.cc
@@ -759,7 +759,7 @@ void daq::PMTDecoder::configure(fhicl::ParameterSet const&) {
 void daq::PMTDecoder::setupRun(art::Run const& run)
 {
     sbn::PMTconfiguration const* PMTconfig = fPMTconfigTag
-      ? run.getPointerByLabel<sbn::PMTconfiguration>(*fPMTconfigTag): nullptr;
+      ? run.getHandle<sbn::PMTconfiguration>(*fPMTconfigTag).product(): nullptr;
     
     UpdatePMTConfiguration(PMTconfig);
 }
@@ -772,7 +772,7 @@ void daq::PMTDecoder::setupEvent(art::Event const& event)
     // global trigger
     //
     auto const& triggers
-      = event.getByLabel<std::vector<raw::ExternalTrigger>>(fTriggerTag);
+      = event.getProduct<std::vector<raw::ExternalTrigger>>(fTriggerTag);
     if (triggers.size() != 1) {
       // if this is hit, the decoder needs some development to correctly deal
       // with input with no trigger, or more than one
diff --git a/icaruscode/Decode/DecoderTools/PMTconfigurationExtractor.cxx b/icaruscode/Decode/DecoderTools/PMTconfigurationExtractor.cxx
index 5eff2a1..9d7f69b 100644
--- a/icaruscode/Decode/DecoderTools/PMTconfigurationExtractor.cxx
+++ b/icaruscode/Decode/DecoderTools/PMTconfigurationExtractor.cxx
@@ -11,7 +11,7 @@
 #include "icaruscode/Decode/DecoderTools/PMTconfigurationExtractor.h"
 
 // framework libraries
-#include "fhiclcpp/make_ParameterSet.h"
+#include "fhiclcpp/ParameterSet.h"
 #include "messagefacility/MessageLogger/MessageLogger.h"
 
 // C/C++ standard libraries
@@ -44,7 +44,7 @@ icarus::PMTconfigurationExtractorBase::convertConfigurationDocuments(
     
     fhicl::ParameterSet pset;
     try {
-      fhicl::make_ParameterSet(psetStr, pset);
+      auto pset = fhicl::ParameterSet::make(psetStr);
     }
     catch (cet::exception& e) {
       throw cet::exception{ "convertConfigurationDocuments", "", e }
diff --git a/icaruscode/Decode/DumpArtDAQfragments_module.cc b/icaruscode/Decode/DumpArtDAQfragments_module.cc
index 261d3ba..dde1b92 100644
--- a/icaruscode/Decode/DumpArtDAQfragments_module.cc
+++ b/icaruscode/Decode/DumpArtDAQfragments_module.cc
@@ -166,9 +166,9 @@ void sbn::DumpArtDAQfragments::dumpFragments(
 ) const {
   
   art::Handle<artdaq::Fragments> fragmentHandle;
-  bool found = event.getByToken(inputToken, fragmentHandle);
+  //bool found = event.getByToken(inputToken, fragmentHandle);
   
-  if (!found) {
+  if ( !(fragmentHandle = event.getHandle<artdaq::Fragments>(inputToken)) ) {
     mf::LogVerbatim(fOutputCategory)
       << "No fragment collection found as '" << inputTag.encode() << "'.";
     return;
diff --git a/icaruscode/Decode/DumpPMTconfiguration_module.cc b/icaruscode/Decode/DumpPMTconfiguration_module.cc
index 75eeb95..7309b32 100644
--- a/icaruscode/Decode/DumpPMTconfiguration_module.cc
+++ b/icaruscode/Decode/DumpPMTconfiguration_module.cc
@@ -167,7 +167,7 @@ void sbn::DumpPMTconfiguration::beginRun(art::Run const& run) {
   } // if skip duplicates
   
   auto const& config
-    = run.getByLabel<sbn::PMTconfiguration>(fPMTconfigurationTag);
+    = run.getProduct<sbn::PMTconfiguration>(fPMTconfigurationTag);
   
   std::ostringstream sstr;
   config.dump(sstr, "  ", "", fVerbosity);
diff --git a/icaruscode/Decode/PMTconfigurationExtraction_module.cc b/icaruscode/Decode/PMTconfigurationExtraction_module.cc
index c9f6d31..c0b69b9 100644
--- a/icaruscode/Decode/PMTconfigurationExtraction_module.cc
+++ b/icaruscode/Decode/PMTconfigurationExtraction_module.cc
@@ -16,6 +16,7 @@
 #include "art/Framework/Core/ModuleMacros.h"
 #include "art/Framework/Core/FileBlock.h"
 #include "art/Framework/Principal/Run.h"
+#include "messagefacility/MessageLogger/MessageLogger.h"
 #include "fhiclcpp/types/Atom.h"
 #include "cetlib_except/exception.h"
 
diff --git a/icaruscode/Filters/CMakeLists.txt b/icaruscode/Filters/CMakeLists.txt
index d7c31a8..87d9ac5 100644
--- a/icaruscode/Filters/CMakeLists.txt
+++ b/icaruscode/Filters/CMakeLists.txt
@@ -1,39 +1,38 @@
-art_make( 
-          MODULE_LIBRARIES
-                        icarusalg_Utilities
-                        larcorealg_Geometry
-                        larcore_Geometry_Geometry_service
-                        larsim_Simulation 
-                        nug4_ParticleNavigation
-                        lardataobj_Simulation
-                        lardata_Utilities
-                        larevt_Filters
-                        lardataalg_MCDumpers
-                        lardataobj_RawData
-                        lardataobj_RecoBase
-                        lardata_RecoObjects
-                        nusimdata_SimulationBase
-                        ${ART_FRAMEWORK_CORE}
-                        ${ART_FRAMEWORK_PRINCIPAL}
-                        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                        ${ROOT_CORE}
-                        art_Persistency_Common 
-                        art_Persistency_Provenance 
-                        art_Utilities 
-                        ${MF_MESSAGELOGGER}
-                        ${MF_UTILITIES}
-                        ${FHICLCPP}
-                        ${CETLIB}
-                        ${CETLIB_EXCEPT}
-                        ROOT::EG
-                        ${ROOT_GEOM}
-                        ${ROOT_XMLIO}
-                        ${ROOT_GDML}
-                        ${ROOT_GENVECTOR}
-                        ${ROOT_BASIC_LIB_LIST}
-        )
+art_make(
+	MODULE_LIBRARIES
+		icarusalg::Utilities
+		larcorealg::Geometry
+		larcore::Geometry_Geometry_service
+		larsim::Simulation
+		nug4::ParticleNavigation
+		lardataobj::Simulation
+		lardata::Utilities
+		larevt::Filters
+		lardataalg::MCDumpers
+		lardataobj::RawData
+		lardataobj::RecoBase
+		lardata::RecoObjects
+		nusimdata::SimulationBase
+		art::Framework_Core
+		art::Framework_Principal
+		art::Framework_Services_Registry
+		ROOT::Core
+		art::Persistency_Common
+		art::Persistency_Provenance
+		art::Utilities
+		messagefacility::MF_MessageLogger
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib
+		cetlib_except::cetlib_except
+		ROOT::EG
+		ROOT::Geom
+		ROOT::XMLIO
+		ROOT::Gdml
+		ROOT::GenVector
+	)
 
-# install_headers()
+#install_headers()
 install_fhicl()
 install_source()
 
diff --git a/icaruscode/Filters/FilterNeutrinosActiveVolume_module.cc b/icaruscode/Filters/FilterNeutrinosActiveVolume_module.cc
index 52deaee..b366b7a 100644
--- a/icaruscode/Filters/FilterNeutrinosActiveVolume_module.cc
+++ b/icaruscode/Filters/FilterNeutrinosActiveVolume_module.cc
@@ -375,8 +375,9 @@ bool icarus::simfilter::FilterNeutrinosActiveVolume::filter(art::Event& event) {
    * Consider all truth information available in the event.
    * Any record of any truth data product will be enough to pass the event.
    */
-  std::vector<art::Handle<std::vector<simb::MCTruth>>> allTruth;
-  event.getManyByType(allTruth);
+  //std::vector<art::Handle<std::vector<simb::MCTruth>>> allTruth;
+  //event.getManyByType(allTruth);
+  auto allTruth = event.getMany<std::vector<simb::MCTruth>>();
   
   if (allTruth.empty()) { // is this real data?
     throw art::Exception(art::errors::ProductNotFound)
diff --git a/icaruscode/Filters/FilterNumberTPCHits_module.cc b/icaruscode/Filters/FilterNumberTPCHits_module.cc
index 654a7d3..d2edd43 100644
--- a/icaruscode/Filters/FilterNumberTPCHits_module.cc
+++ b/icaruscode/Filters/FilterNumberTPCHits_module.cc
@@ -50,7 +50,7 @@ bool filter::FilterNumberTPCHits::filter(art::Event &event)
 
     for(auto const& hitDataLabel : fHitDataLabelVec)
     {
-       auto const& hitData = event.getByLabel<std::vector<recob::Hit>>(hitDataLabel);
+       auto const& hitData = event.getProduct<std::vector<recob::Hit>>(hitDataLabel);
 
 //       std::cout << "FilterNumberTPCHits: label: " << hitDataLabel << " has " << hitData.size() << " hits (rejection is " << fMaximumHits << ")" << std::endl;
 
diff --git a/icaruscode/Filters/FilterParticlesActiveVolume_module.cc b/icaruscode/Filters/FilterParticlesActiveVolume_module.cc
index f53ad6b..fce3623 100644
--- a/icaruscode/Filters/FilterParticlesActiveVolume_module.cc
+++ b/icaruscode/Filters/FilterParticlesActiveVolume_module.cc
@@ -135,8 +135,9 @@ namespace simfilter {
       
     // * MC truth information
 
-      std::vector< art::Handle< std::vector<simb::MCTruth> > > allmclists;
-      evt.getManyByType(allmclists);
+      //std::vector< art::Handle< std::vector<simb::MCTruth> > > allmclists;
+      //evt.getManyByType(allmclists);
+      auto allmclists = evt.getMany< std::vector<simb::MCTruth> >();
 
 
       std::cout << fXmin << " " << fXmax << " " << fYmin << " " <<fYmax << " " << fZmin << " " << fZmax << std::endl;
diff --git a/icaruscode/Filters/TriggerTypeFilter_module.cc b/icaruscode/Filters/TriggerTypeFilter_module.cc
index a56f721..875d542 100644
--- a/icaruscode/Filters/TriggerTypeFilter_module.cc
+++ b/icaruscode/Filters/TriggerTypeFilter_module.cc
@@ -56,7 +56,7 @@ bool filter::TriggerTypeFilter::filter(art::Event &event)
 {
     bool filterPass = false;
 
-    auto const& triggerVec = event.getByLabel<std::vector<raw::Trigger>>(fTriggerDataLabel);
+    auto const& triggerVec = event.getProduct<std::vector<raw::Trigger>>(fTriggerDataLabel);
 
     if (!triggerVec.empty())
     {
diff --git a/icaruscode/Geometry/CMakeLists.txt b/icaruscode/Geometry/CMakeLists.txt
index 449df28..b651ee0 100644
--- a/icaruscode/Geometry/CMakeLists.txt
+++ b/icaruscode/Geometry/CMakeLists.txt
@@ -1,28 +1,30 @@
 
 art_make(
-  SERVICE_LIBRARIES
-      icarusalg_Geometry
-      larcorealg_Geometry
-      ${ART_UTILITIES}
-      ${MF_MESSAGELOGGER}
-      ${FHICLCPP}
-      ${CETLIB}
-      ${CETLIB_EXCEPT}
-      ${ROOT_GEOM}
-      ${ROOT_XMLIO}
-      ${ROOT_GDML}
-      ${ROOT_BASIC_LIB_LIST}
-  TOOL_LIBRARIES
-      icarusalg_Geometry
-      larcorealg_Geometry
-      ${ART_UTILITIES}
-      ${MF_UTILITIES}
-      ${FHICLCPP}
-      ${CETLIB}
-      ${CETLIB_EXCEPT}
-      ${ROOT_GEOM}
-      ${ROOT_XMLIO}
-      ${ROOT_GDML}
-      ${ROOT_BASIC_LIB_LIST}    
-  )
+	SERVICE_LIBRARIES
+		icarusalg::Geometry
+		larcorealg::Geometry
+		larcore::Geometry_Geometry_service
+		art::Utilities
+		messagefacility::MF_MessageLogger
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib
+		cetlib_except::cetlib_except
+		ROOT::Geom
+		ROOT::XMLIO
+		ROOT::Gdml
+
+	TOOL_LIBRARIES
+		icarusalg::Geometry
+		larcorealg::Geometry
+		larcore::Geometry_Geometry_service
+		art::Utilities
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib
+		cetlib_except::cetlib_except
+		ROOT::Geom
+		ROOT::XMLIO
+		ROOT::Gdml
+
+	)
 
diff --git a/icaruscode/Geometry/IcarusGeometryHelper.h b/icaruscode/Geometry/IcarusGeometryHelper.h
index b099aae..c6939ff 100644
--- a/icaruscode/Geometry/IcarusGeometryHelper.h
+++ b/icaruscode/Geometry/IcarusGeometryHelper.h
@@ -15,7 +15,7 @@
 #include "larcore/Geometry/ExptGeoHelperInterface.h"
 
 // framework libraries
-#include "art/Framework/Services/Registry/ServiceMacros.h"
+#include "art/Framework/Services/Registry/ServiceDeclarationMacros.h"
 #include "fhiclcpp/ParameterSet.h"
 
 // C/C++ standard libraries
diff --git a/icaruscode/Geometry/IcarusGeometryHelper_service.cc b/icaruscode/Geometry/IcarusGeometryHelper_service.cc
index 4223576..d604560 100644
--- a/icaruscode/Geometry/IcarusGeometryHelper_service.cc
+++ b/icaruscode/Geometry/IcarusGeometryHelper_service.cc
@@ -13,6 +13,7 @@
 
 // framework libraries
 #include "art/Utilities/make_tool.h"
+#include "art/Framework/Services/Registry/ServiceDefinitionMacros.h"
 #include "messagefacility/MessageLogger/MessageLogger.h"
 
 // C/C++ standard libraries
diff --git a/icaruscode/PMT/Algorithms/CMakeLists.txt b/icaruscode/PMT/Algorithms/CMakeLists.txt
index a7b424a..f531eae 100644
--- a/icaruscode/PMT/Algorithms/CMakeLists.txt
+++ b/icaruscode/PMT/Algorithms/CMakeLists.txt
@@ -1,28 +1,24 @@
-# Leave this out for the time being. One day the grid will be updated enough...
-# cet_set_compiler_flags(EXTRA_CXX_FLAGS -mavx)
+#Leave this out for the time being. One day the grid will be updated enough ...
+#cet_set_compiler_flags(EXTRA_CXX_FLAGS -mavx)
+
+include_directories(${CPPGSL_INC})
 
 art_make(
-  LIB_LIBRARIES 
-    larcorealg_Geometry
-    lardataobj_RawData
-    icarusalg_Utilities
-#    lardataobj_RecoBase
-#    lardata_Utilities
-#    larcorealg_Geometry
-#    lardata_ArtDataHelper
-#    nusimdata_SimulationBase
-     canvas
-     ${MF_MESSAGELOGGER}
-     ${MF_UTILITIES}
-     ${FHICLCPP}
-     ${CETLIB}
-     cetlib_except
-     ${ROOT_FFTW}
-     ${ROOT_GENVECTOR}
-     ${ROOT_BASIC_LIB_LIST}
-     ${CLHEP}
-#    ${Boost_SYSTEM_LIBRARY}
-  )
+	LIB_LIBRARIES
+		larcorealg::Geometry
+		lardataobj::RawData
+		icarusalg::Utilities
+                lardataalg::DetectorInfo
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib
+		cetlib_except::cetlib_except
+		ROOT::FFTW
+		ROOT::GenVector
+		CLHEP::Random
+	)
 
 install_headers()
 install_fhicl()
diff --git a/icaruscode/PMT/Algorithms/PMTsimulationAlg.cxx b/icaruscode/PMT/Algorithms/PMTsimulationAlg.cxx
index 5a53ea8..06cd913 100644
--- a/icaruscode/PMT/Algorithms/PMTsimulationAlg.cxx
+++ b/icaruscode/PMT/Algorithms/PMTsimulationAlg.cxx
@@ -32,10 +32,11 @@
 // C++ standard libaries
 #include <chrono> // std::chrono::high_resolution_clock
 #include <unordered_map>
-#include <algorithm> // std::accumulate()
+#include <algorithm>
 #include <utility> // std::move(), std::cref(), ...
 #include <limits> // std::numeric_limits
 #include <cmath> // std::signbit(), std::pow()
+#include <numeric> // std::accumulate
 
 
 // -----------------------------------------------------------------------------
diff --git a/icaruscode/PMT/CMakeLists.txt b/icaruscode/PMT/CMakeLists.txt
index d0b48ec..33b064e 100644
--- a/icaruscode/PMT/CMakeLists.txt
+++ b/icaruscode/PMT/CMakeLists.txt
@@ -7,129 +7,136 @@ add_subdirectory(Trigger)
 # Removing AVX instructions because assuming the grid nodes
 # being less than 6 year old proved to be pretentious.
 # AVX is not so relevant after the last commit anyway
-# cet_set_compiler_flags(EXTRA_CXX_FLAGS -mavx)
+# cet_set_compiler_flags(EXTRA_CXX_FLAGS-mavx)
+
+include_directories(${CPPGSL_INC})
 
 simple_plugin(SimPMTIcarus "module"
-  icaruscode_PMT_Algorithms
-  lardataobj_RawData
-  lardataobj_Simulation
-  nurandom_RandomUtils_NuRandomService_service
-  ${ART_FRAMEWORK_CORE}
-  ${ART_FRAMEWORK_PRINCIPAL}
-  ${ART_FRAMEWORK_SERVICES_REGISTRY}
-  ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-  ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-  ${ART_ROOT_IO_TFILE_SUPPORT}
-  art_Persistency_Provenance
-  ${CANVAS}
-  ${MF_MESSAGELOGGER}
-  ${FHICLCPP}
-  ${CETLIB}
-  cetlib_except
-  ${ROOT_BASIC_LIB_LIST}
-  ${Boost_SYSTEM_LIBRARY}
-  )
+			icaruscode::PMT_Algorithms
+			lardataobj::RawData
+			lardataobj::Simulation
+                        larcore::Geometry_Geometry_service
+                        lardata::Utilities
+			nurandom::RandomUtils_NuRandomService_service
+			art::Framework_Core
+			art::Framework_Principal
+			art::Framework_Services_Registry
+			art::Framework_Services_Optional_RandomNumberGenerator_service
+			art_root_io::TFileService_service
+			art_root_io::tfile_support
+			art::Persistency_Provenance
+			canvas::canvas
+			messagefacility::MF_MessageLogger
+			fhiclcpp::fhiclcpp
+			cetlib::cetlib
+			cetlib_except::cetlib_except
+			Boost::system
+			)
 
 simple_plugin(PMTWaveformBaselines "module"
-  icaruscode_PMT_Algorithms
-  sbnobj_ICARUS_PMT_Data
-  larcore_Geometry_Geometry_service
-  larcorealg_Geometry
-  lardataobj_RawData
-  ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-  ${ART_ROOT_IO_TFILE_SUPPORT}
-  ${ART_FRAMEWORK_SERVICES_REGISTRY}
-  ${MF_MESSAGELOGGER}
-  ROOT::Hist
-  ROOT::Core
-  )
+			icaruscode::PMT_Algorithms
+			sbnobj::ICARUS_PMT_Data
+			larcore::Geometry_Geometry_service
+			larcorealg::Geometry
+			lardataobj::RawData
+                        lardata::Utilities
+			art_root_io::TFileService_service
+			art_root_io::tfile_support
+			art::Framework_Services_Registry
+			messagefacility::MF_MessageLogger
+			ROOT::Hist
+			ROOT::Core
+			)
 
 simple_plugin(PMTWaveformBaselinesFromReadoutConfiguration "module"
-  sbnobj_ICARUS_PMT_Data
-  sbnobj_Common_PMT_Data
-  larcore_Geometry_Geometry_service
-  larcorealg_Geometry
-  lardataobj_RawData
-  ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-  ${ART_ROOT_IO_TFILE_SUPPORT}
-  ${ART_FRAMEWORK_SERVICES_REGISTRY}
-  ${MF_MESSAGELOGGER}
-  ROOT::Hist
-  ROOT::Core
-  )
+			sbnobj::ICARUS_PMT_Data
+			sbnobj::Common_PMT_Data
+			larcore::Geometry_Geometry_service
+			larcorealg::Geometry
+			lardataobj::RawData
+                        lardata::Utilities
+			art_root_io::TFileService_service
+			art_root_io::tfile_support
+			art::Framework_Services_Registry
+			messagefacility::MF_MessageLogger
+			ROOT::Hist
+			ROOT::Core
+			)
 
 
 simple_plugin(AsymGaussPulseFunctionTool "tool"
-  icaruscode_PMT_Algorithms
-  )
+	icaruscode::PMT_Algorithms
+	)
 
 simple_plugin(AsymExpPulseFunctionTool "tool"
-  icaruscode_PMT_Algorithms
-  )
+	icaruscode::PMT_Algorithms
+	)
 
 simple_plugin(CustomPulseFunctionTool "tool"
-  icaruscode_PMT_Algorithms
-  ROOT::Hist
-  )
+	icaruscode::PMT_Algorithms
+	ROOT::Hist
+	)
 
 
 art_make(
-  EXCLUDE
-    "SimPMTIcarus_module.cc"
-    "PMTWaveformBaselines_module.cc"
-    "PMTWaveformBaselinesFromReadoutConfiguration_module.cc"
-    "AsymGaussPulseFunctionTool_tool.cc"
-    "AsymExpPulseFunctionTool_tool.cc"
-    "CustomPulseFunctionTool_tool.cc"
-          LIB_LIBRARIES 
-            lardataobj_RawData
-            lardataobj_RecoBase
-            lardata_Utilities
-            ${FHICLCPP}
-			${CETLIB}
-			${ROOT_BASIC_LIB_LIST}
-			${Boost_SYSTEM_LIBRARY}
-	        MODULE_LIBRARIES larcorealg_Geometry
-	  		larcore_Geometry_Geometry_service
-	        lardata_Utilities
-			larevt_Filters
-			lardataobj_RawData
-			larevt_CalibrationDBI_IOVData
-			larevt_CalibrationDBI_Providers
-			lardataobj_RecoBase
-			lardata_ArtDataHelper
-			nusimdata_SimulationBase
-            nurandom_RandomUtils_NuRandomService_service
-			${CLHEP}
-            ${ART_FRAMEWORK_CORE}
-			${ART_FRAMEWORK_PRINCIPAL}
-			${ART_FRAMEWORK_SERVICES_REGISTRY}
-			${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-			${ART_ROOT_IO_TFILESERVICE_SERVICE}
-			art_Persistency_Common
-			art_Persistency_Provenance
-			art_Utilities
-			canvas
-			${MF_MESSAGELOGGER}
-			${MF_UTILITIES}
-	        ${FHICLCPP}
-			${CETLIB}
-			cetlib_except
-            ${ROOT_GEOM}
-            ${ROOT_XMLIO}
-            ${ROOT_GDML}
-			${ROOT_FFTW}
-			${ROOT_BASIC_LIB_LIST}
-			${Boost_SYSTEM_LIBRARY}
-        )
+	EXCLUDE
+		"SimPMTIcarus_module.cc"
+		"PMTWaveformBaselines_module.cc"
+		"PMTWaveformBaselinesFromReadoutConfiguration_module.cc"
+		"AsymGaussPulseFunctionTool_tool.cc"
+		"AsymExpPulseFunctionTool_tool.cc"
+		"CustomPulseFunctionTool_tool.cc"
+	LIB_LIBRARIES
+			lardataobj::RawData
+			lardataobj::RecoBase
+			lardata::Utilities
+			fhiclcpp::fhiclcpp
+			cetlib::cetlib
+			Boost::system
+	MODULE_LIBRARIES
+			larcorealg::Geometry
+			larcore::Geometry_Geometry_service
+			lardata::Utilities
+                        larana::OpticalDetector
+			larreco::Calorimetry
+			larevt::Filters
+			lardataobj::RawData
+			larsim::PhotonPropagation
+			larevt::CalibrationDBI_IOVData
+			larevt::CalibrationDBI_Providers
+			lardataobj::RecoBase
+			lardata::ArtDataHelper
+			nusimdata::SimulationBase
+			nurandom::RandomUtils_NuRandomService_service
+			CLHEP::Random
+			art::Framework_Core
+			art::Framework_Principal
+			art::Framework_Services_Registry
+			art_root_io::tfile_support ROOT::Core
+			art_root_io::TFileService_service
+			art::Persistency_Common
+			art::Persistency_Provenance
+			art::Utilities
+			canvas::canvas
+			messagefacility::MF_MessageLogger
+			messagefacility::headers
+			fhiclcpp::fhiclcpp
+			cetlib::cetlib
+			cetlib_except::cetlib_except
+			ROOT::Geom
+			ROOT::XMLIO
+			ROOT::Gdml
+			ROOT::FFTW			
+			Boost::system
+)
 
 install_headers()
 install_fhicl()
 install_source()
 install_scripts(
-  SUBDIRS scripts
-  EXTRAS
-    "scripts/MergePhotonLibrary.C"
-    "scripts/RecompressROOTtrees.C"
-  )
+	SUBDIRS scripts
+	EXTRAS
+		"scripts/MergePhotonLibrary.C"
+		"scripts/RecompressROOTtrees.C"
+	)
 
diff --git a/icaruscode/PMT/LibraryMappingTools/CMakeLists.txt b/icaruscode/PMT/LibraryMappingTools/CMakeLists.txt
index 0382f83..6ff423a 100644
--- a/icaruscode/PMT/LibraryMappingTools/CMakeLists.txt
+++ b/icaruscode/PMT/LibraryMappingTools/CMakeLists.txt
@@ -1,25 +1,25 @@
 art_make_library(
-  SOURCE
-    "ICARUSPhotonMappingTransformations.cxx"
-  LIBRARIES
-    larsim_PhotonPropagation_LibraryMappingTools
-    larcore_Geometry_Geometry_service
-    larcorealg_Geometry
-    ${ART_FRAMEWORK_SERVICES_REGISTRY}
-    ${ART_UTILITIES}
-    ${CANVAS}
-    ${CETLIB_EXCEPT}
-    ${MF_MESSAGELOGGER}
-    ${FHICLCPP}
-    ${ROOT_GENVECTOR}
-    ${ROOT_BASIC_LIB_LIST}
-    ${Boost_SYSTEM_LIBRARY}
-  )
+		SOURCE
+			"ICARUSPhotonMappingTransformations.cxx"
+		LIBRARIES
+			larsim::PhotonPropagation_LibraryMappingTools
+			larcore::Geometry_Geometry_service
+			larcorealg::Geometry
+                        lardataalg::DetectorInfo
+			art::Framework_Services_Registry
+			art::Utilities
+			canvas::canvas
+			cetlib_except::cetlib_except
+			messagefacility::MF_MessageLogger
+			fhiclcpp::fhiclcpp
+			ROOT::GenVector
+			Boost::system
+		)
 
 simple_plugin(ICARUSPhotonMappingTransformations "tool"
-  icaruscode_PMT_LibraryMappingTools
-  larsim_PhotonPropagation_LibraryMappingTools
-  )
+		icaruscode::PMT_LibraryMappingTools
+		larsim::PhotonPropagation_LibraryMappingTools
+		)
 
 install_headers()
 install_fhicl()
diff --git a/icaruscode/PMT/LibraryMappingTools/ICARUSPhotonMappingTransformations.cxx b/icaruscode/PMT/LibraryMappingTools/ICARUSPhotonMappingTransformations.cxx
index 6e2010d..a5d8f59 100644
--- a/icaruscode/PMT/LibraryMappingTools/ICARUSPhotonMappingTransformations.cxx
+++ b/icaruscode/PMT/LibraryMappingTools/ICARUSPhotonMappingTransformations.cxx
@@ -20,9 +20,10 @@
 #include "messagefacility/MessageLogger/MessageLogger.h" // MF_LOG_DEBUG()
 
 // C/C++ standard libraries
-#include <algorithm> // std::iota()
+#include <algorithm>
 #include <string> // std::to_string()
 #include <cassert>
+#include <numeric> // std::iota()
 
 
 //------------------------------------------------------------------------------
diff --git a/icaruscode/PMT/OpReco/CMakeLists.txt b/icaruscode/PMT/OpReco/CMakeLists.txt
index 2b4e76e..72246c7 100644
--- a/icaruscode/PMT/OpReco/CMakeLists.txt
+++ b/icaruscode/PMT/OpReco/CMakeLists.txt
@@ -1,35 +1,36 @@
 
 art_make(
-	  MODULE_LIBRARIES larcorealg_Geometry
-	  		larcore_Geometry_Geometry_service
-			lardataobj_RecoBase
-			lardataobj_Simulation
-			larcoreobj_SummaryData
-			larana_OpticalDetector_OpHitFinder
-			nusimdata_SimulationBase
-			nurandom_RandomUtils_NuRandomService_service
-			larsim_PhotonPropagation_PhotonVisibilityService_service
-            ${ART_FRAMEWORK_CORE}
-			${ART_FRAMEWORK_PRINCIPAL}
-			${ART_FRAMEWORK_SERVICES_REGISTRY}
-			${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-			${ART_ROOT_IO_TFILESERVICE_SERVICE}
-			art_Persistency_Common
-			art_Persistency_Provenance
-			art_Utilities
-			canvas
-			${MF_MESSAGELOGGER}
-			${MF_UTILITIES}
-	        ${FHICLCPP}
-			${CETLIB}
-			${CLHEP}
-            ${ROOT_GEOM}
-            ${ROOT_XMLIO}
-            ${ROOT_GDML}
-			${ROOT_FFTW}
-			${ROOT_BASIC_LIB_LIST}
-
-        )
+	MODULE_LIBRARIES larcorealg::Geometry
+			larcore::Geometry_Geometry_service
+			lardataobj::RecoBase
+			lardataobj::Simulation
+			larcoreobj::SummaryData
+			larana::OpticalDetector_OpHitFinder
+                        larreco::Calorimetry
+                        lardata::Utilities
+			nusimdata::SimulationBase
+			nurandom::RandomUtils_NuRandomService_service
+			larsim::PhotonPropagation_PhotonVisibilityService_service
+			art::Framework_Core
+			art::Framework_Principal
+			art::Framework_Services_Registry
+			art_root_io::tfile_support
+			art_root_io::TFileService_service
+			art::Persistency_Common
+			art::Persistency_Provenance
+			art::Utilities
+			canvas::canvas
+			messagefacility::MF_MessageLogger
+			messagefacility::headers
+			fhiclcpp::fhiclcpp
+			cetlib::cetlib
+			CLHEP::Random
+			ROOT::Geom
+			ROOT::XMLIO
+			ROOT::Gdml
+			ROOT::FFTW
+			ROOT::Core
+)
 
 install_headers()
 install_source()
diff --git a/icaruscode/PMT/OpReco/FlashFinder/CMakeLists.txt b/icaruscode/PMT/OpReco/FlashFinder/CMakeLists.txt
index 8367efd..bc95c90 100644
--- a/icaruscode/PMT/OpReco/FlashFinder/CMakeLists.txt
+++ b/icaruscode/PMT/OpReco/FlashFinder/CMakeLists.txt
@@ -1,60 +1,61 @@
-include_directories( ${CMAKE_CURRENT_SOURCE_DIR} )
+include_directories(${CMAKE_CURRENT_SOURCE_DIR})
 
-art_make( 
-	  LIB_LIBRARIES
-		   icarusalg_Geometry
-		   larcore_Geometry_Geometry_service
-		   larcorealg_Geometry
-		   lardataobj_RecoBase
-		   ${LARDATA_LIB}
-		   canvas
-		   cetlib
-		   cetlib_except
-		   ${ART_FRAMEWORK_ART}
-		   ${ART_FRAMEWORK_CORE}
-		   ${ART_FRAMEWORK_PRINCIPAL}
-		   ${ART_FRAMEWORK_UTILITIES}
-                   ${ART_FRAMEWORK_BASIC}
-		   ${ART_FRAMEWORK_SERVICES_REGISTRY}
-		   ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-		   ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-		   art_Persistency_Common
-		   art_Persistency_Provenance
-		   art_Utilities
-		   ${MF_MESSAGELOGGER}
-		   ${FHICLCPP}
-		   ${ROOT_GEOM}
-		   ${ROOT_XMLIO}
-		   ${ROOT_GDML}
-		   ${ROOT_BASIC_LIB_LIST}
-          MODULE_LIBRARIES
-		   icaruscode_PMT_OpReco_FlashFinder
-		   icarusalg_Geometry
-		   larcore_Geometry_Geometry_service
-		   larcorealg_Geometry
-		   lardataobj_RecoBase
-		   ${LARDATA_LIB}
-		   canvas
-		   cetlib
-		   cetlib_except
-		   ${ART_FRAMEWORK_ART}
-		   ${ART_FRAMEWORK_CORE}
-		   ${ART_FRAMEWORK_PRINCIPAL}
-                   ${ART_FRAMEWORK_BASIC}
-		   ${ART_FRAMEWORK_SERVICES_REGISTRY}
-		   ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-		   ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-		   art_Persistency_Common
-		   art_Persistency_Provenance
-		   art_Utilities
-		   ${MF_MESSAGELOGGER}
-		   ${FHICLCPP}
-		   ${ROOT_GEOM}
-		   ${ROOT_XMLIO}
-		   ${ROOT_GDML}
-		   ${ROOT_BASIC_LIB_LIST}
-
-        )							   
+art_make(
+	LIB_LIBRARIES
+		icarusalg::Geometry
+		larcore::Geometry_Geometry_service
+		larcorealg::Geometry
+		lardataobj::RecoBase
+		${LARDATA_LIB}
+		canvas::canvas
+		cetlib::cetlib
+		cetlib_except::cetlib_except
+		${ART_FRAMEWORK_ART}
+		art::Framework_Core
+		art::Framework_Principal
+		${ART_FRAMEWORK_UTILITIES}
+		${ART_FRAMEWORK_BASIC}
+		art::Framework_Services_Registry
+		art_root_io::tfile_support ROOT::Core
+		art_root_io::TFileService_service
+		art::Persistency_Common
+		art::Persistency_Provenance
+		art::Utilities
+		messagefacility::MF_MessageLogger
+		fhiclcpp::fhiclcpp
+		ROOT::Geom
+		ROOT::XMLIO
+		ROOT::Gdml
+		
+	MODULE_LIBRARIES
+		icaruscode::PMT_OpReco_FlashFinder
+		icarusalg::Geometry
+		larcore::Geometry_Geometry_service
+		larcorealg::Geometry
+		lardataobj::RecoBase
+		${LARDATA_LIB}
+                lardata::Utilities
+                larcore::Geometry_AuxDetGeometry_service
+		canvas::canvas
+		cetlib::cetlib
+		cetlib_except::cetlib_except
+		${ART_FRAMEWORK_ART}
+		art::Framework_Core
+		art::Framework_Principal
+		${ART_FRAMEWORK_BASIC}
+		art::Framework_Services_Registry
+		art_root_io::tfile_support
+		art_root_io::TFileService_service
+		art::Persistency_Common
+		art::Persistency_Provenance
+		art::Utilities
+		messagefacility::MF_MessageLogger
+		fhiclcpp::fhiclcpp
+		ROOT::Geom
+		ROOT::XMLIO
+		ROOT::Gdml
+		ROOT::Core
+)							
 
 install_headers()
 install_source()
diff --git a/icaruscode/PMT/OpReco/ICARUSFlashAssAna_module.cc b/icaruscode/PMT/OpReco/ICARUSFlashAssAna_module.cc
index f34afdf..b654ae2 100644
--- a/icaruscode/PMT/OpReco/ICARUSFlashAssAna_module.cc
+++ b/icaruscode/PMT/OpReco/ICARUSFlashAssAna_module.cc
@@ -41,6 +41,7 @@
 
 #include <vector>
 #include <map>
+#include <numeric> // std::accumulate
 
 
 
diff --git a/icaruscode/PMT/OpReco/ICARUSOpFlashAna_module.cc b/icaruscode/PMT/OpReco/ICARUSOpFlashAna_module.cc
index cacd5bd..22a3910 100644
--- a/icaruscode/PMT/OpReco/ICARUSOpFlashAna_module.cc
+++ b/icaruscode/PMT/OpReco/ICARUSOpFlashAna_module.cc
@@ -25,6 +25,8 @@
 #include <TFile.h>
 #include <TLorentzVector.h>
 
+#include <numeric> // std::accumulate
+
 class ICARUSOpFlashAna;
 
 class ICARUSOpFlashAna : public art::EDAnalyzer {
diff --git a/icaruscode/PMT/OpReco/driver/CMakeLists.txt b/icaruscode/PMT/OpReco/driver/CMakeLists.txt
index 251e104..f8bfb37 100644
--- a/icaruscode/PMT/OpReco/driver/CMakeLists.txt
+++ b/icaruscode/PMT/OpReco/driver/CMakeLists.txt
@@ -1,3 +1,3 @@
 install_fhicl()
-#FILE(GLOB fcl_files *.fcl)
-#install_source( EXTRAS ${fcl_files} )
+#FILE(GLOBfcl_files*.fcl)
+#install_source(EXTRAS${fcl_files})
diff --git a/icaruscode/PMT/OpReco/fcl/CMakeLists.txt b/icaruscode/PMT/OpReco/fcl/CMakeLists.txt
index 0361ef3..c51b7b3 100644
--- a/icaruscode/PMT/OpReco/fcl/CMakeLists.txt
+++ b/icaruscode/PMT/OpReco/fcl/CMakeLists.txt
@@ -1,3 +1,3 @@
 install_fhicl()
 FILE(GLOB fcl_files *.fcl)
-install_source( EXTRAS ${fcl_files} )
+install_source(EXTRAS ${fcl_files})
diff --git a/icaruscode/PMT/OpticalTools/CMakeLists.txt b/icaruscode/PMT/OpticalTools/CMakeLists.txt
index 5292feb..9995f9b 100644
--- a/icaruscode/PMT/OpticalTools/CMakeLists.txt
+++ b/icaruscode/PMT/OpticalTools/CMakeLists.txt
@@ -1,36 +1,37 @@
 cet_enable_asserts()
 
-art_make( 
-          TOOL_LIBRARIES  icaruscode_TPC_Utilities_SignalShapingICARUSService_service
-                          larcorealg_Geometry
-                          larevt_CalibrationDBI_IOVData
-                          larevt_CalibrationDBI_Providers
-			              lardataobj_RecoBase
-			              larcore_Geometry_Geometry_service
-			              lardata_Utilities
-			              nurandom_RandomUtils_NuRandomService_service
-  			              ${ART_FRAMEWORK_CORE}
-			              ${ART_FRAMEWORK_PRINCIPAL}
-			              ${ART_FRAMEWORK_SERVICES_REGISTRY}
-			              art_Persistency_Common
-			              art_Persistency_Provenance
-			              ${ART_FRAMEWORK_SERVICES_BASIC}
-			              ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                          ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-			              ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-			              ${ART_FRAMEWORK_SERVICES_SYSTEM_FILECATALOGMETADATA_SERVICE}
-			              art_Utilities
-			              canvas
-			              ${MF_MESSAGELOGGER}
-			              ${MF_UTILITIES}
-			              ${FHICLCPP}
-			              ${CETLIB}
-			              cetlib_except
-			              ${Boost_FILESYSTEM_LIBRARY}
-			              ${Boost_SYSTEM_LIBRARY}
-                          ${CLHEP}
-			              ${ROOT_BASIC_LIB_LIST}
-    )
+art_make(
+		TOOL_LIBRARIES
+			icaruscode::TPC_Utilities_SignalShapingICARUSService_service
+			larcorealg::Geometry
+			larevt::CalibrationDBI_IOVData
+			larevt::CalibrationDBI_Providers
+			lardataobj::RecoBase
+			larcore::Geometry_Geometry_service
+			lardata::Utilities
+			nurandom::RandomUtils_NuRandomService_service
+			art::Framework_Core
+			art::Framework_Principal
+			art::Framework_Services_Registry
+			art::Persistency_Common
+			art::Persistency_Provenance
+			
+			art_root_io::tfile_support
+			ROOT::Core
+			art::Framework_Services_Optional_RandomNumberGenerator_service
+			art_root_io::TFileService_service
+			art::Framework_Services_System_FileCatalogMetadata_service
+			art::Utilities
+			canvas::canvas
+			messagefacility::MF_MessageLogger
+			messagefacility::headers
+			fhiclcpp::fhiclcpp
+			cetlib::cetlib
+			cetlib_except::cetlib_except
+			Boost::filesystem
+			Boost::system
+			CLHEP::Random
+)
 
 install_headers()
 install_source()
diff --git a/icaruscode/PMT/PMTStartCalibTime_module.cc b/icaruscode/PMT/PMTStartCalibTime_module.cc
index 45a0bbd..4867153 100644
--- a/icaruscode/PMT/PMTStartCalibTime_module.cc
+++ b/icaruscode/PMT/PMTStartCalibTime_module.cc
@@ -202,8 +202,9 @@ std::vector<sim::SimChannel> const& charge   = *(evt.getValidHandle<std::vector<
 
 event = evt.id().event();
 
-std::vector< art::Handle< std::vector<simb::MCTruth> > > type;
-evt.getManyByType(type);
+//std::vector< art::Handle< std::vector<simb::MCTruth> > > type;
+//evt.getManyByType(type);
+auto type = evt.getMany< std::vector<simb::MCTruth> >();
       art::Handle< std::vector<simb::MCParticle> > particleVecHandle;
       evt.getByLabel("largeant", particleVecHandle);
 
diff --git a/icaruscode/PMT/PMTWaveformBaselinesFromReadoutConfiguration_module.cc b/icaruscode/PMT/PMTWaveformBaselinesFromReadoutConfiguration_module.cc
index e13d95c..5939686 100644
--- a/icaruscode/PMT/PMTWaveformBaselinesFromReadoutConfiguration_module.cc
+++ b/icaruscode/PMT/PMTWaveformBaselinesFromReadoutConfiguration_module.cc
@@ -323,7 +323,7 @@ void icarus::PMTWaveformBaselinesFromReadoutConfiguration::beginRun
   (art::Run& run)
 {
   auto const& PMTconfig
-    = run.getByLabel<sbn::PMTconfiguration>(fPMTconfigurationTag);
+    = run.getProduct<sbn::PMTconfiguration>(fPMTconfigurationTag);
   
   std::vector<Baseline_t> newBaselines;
   std::tie(fConfigured, newBaselines)
diff --git a/icaruscode/PMT/PMTcoordinates_module.cc b/icaruscode/PMT/PMTcoordinates_module.cc
index b33d18d..cd59569 100644
--- a/icaruscode/PMT/PMTcoordinates_module.cc
+++ b/icaruscode/PMT/PMTcoordinates_module.cc
@@ -179,8 +179,9 @@ std::vector<sim::SimChannel> const& charge   = *(evt.getValidHandle<std::vector<
 
 event = evt.id().event();
 
-std::vector< art::Handle< std::vector<simb::MCTruth> > > type;
-evt.getManyByType(type);
+//std::vector< art::Handle< std::vector<simb::MCTruth> > > type;
+//evt.getManyByType(type);
+auto type = evt.getMany< std::vector<simb::MCTruth> >();
 
 for(size_t mcl = 0; mcl < type.size(); ++mcl)
 {	
diff --git a/icaruscode/PMT/TrigInfo_module.cc b/icaruscode/PMT/TrigInfo_module.cc
index 2464822..1b49d61 100644
--- a/icaruscode/PMT/TrigInfo_module.cc
+++ b/icaruscode/PMT/TrigInfo_module.cc
@@ -196,8 +196,9 @@ std::vector<recob::OpHit> const& hit        = *(evt.getValidHandle<std::vector<r
 
 event = evt.id().event();
 
-std::vector< art::Handle< std::vector<simb::MCTruth> > > type;
-evt.getManyByType(type);
+//std::vector< art::Handle< std::vector<simb::MCTruth> > > type;
+//evt.getManyByType(type);
+auto type = evt.getMany< std::vector<simb::MCTruth> >();
 
 for(size_t mcl = 0; mcl < type.size(); ++mcl)
 {	
diff --git a/icaruscode/PMT/Trigger/Algorithms/CMakeLists.txt b/icaruscode/PMT/Trigger/Algorithms/CMakeLists.txt
index ef910a7..32ed21c 100644
--- a/icaruscode/PMT/Trigger/Algorithms/CMakeLists.txt
+++ b/icaruscode/PMT/Trigger/Algorithms/CMakeLists.txt
@@ -1,16 +1,19 @@
 cet_make(
-  SUBDIRS
-    "details"
-  LIBRARIES
-    sbnobj_ICARUS_PMT_Trigger_Data
-    icaruscode_PMT_Algorithms
-    lardataalg_DetectorInfo
-    lardataalg_MCDumpers
-    lardataobj_RawData
-    nusimdata_SimulationBase
-    MF_MessageLogger
-    fhiclcpp
-  )
+	SUBDIRS
+		"details"
+	LIBRARIES
+                range-v3::range-v3
+                art::Framework_Principal
+		sbnobj::ICARUS_PMT_Trigger_Data
+		icaruscode::PMT_Algorithms
+		lardataalg::DetectorInfo
+		lardataalg::MCDumpers
+		lardataobj::RawData
+                icarusalg::Utilities
+		nusimdata::SimulationBase
+		messagefacility::MF_MessageLogger
+		fhiclcpp::fhiclcpp
+	)
 
 install_headers(SUBDIRS "details")
 install_source(SUBDIRS "details")
diff --git a/icaruscode/PMT/Trigger/Algorithms/details/EventInfoUtils.h b/icaruscode/PMT/Trigger/Algorithms/details/EventInfoUtils.h
index c8998ba..56268e2 100644
--- a/icaruscode/PMT/Trigger/Algorithms/details/EventInfoUtils.h
+++ b/icaruscode/PMT/Trigger/Algorithms/details/EventInfoUtils.h
@@ -490,7 +490,7 @@ auto icarus::trigger::details::EventInfoExtractor::extractInfo
   for (art::InputTag const& inputTag: fGeneratorTags) {
   
     auto const& truthRecords
-      = event.template getByLabel<std::vector<simb::MCTruth>>(inputTag);
+      = event.template getProduct<std::vector<simb::MCTruth>>(inputTag);
     
     for (simb::MCTruth const& truth: truthRecords) {
       
@@ -510,7 +510,7 @@ auto icarus::trigger::details::EventInfoExtractor::extractInfo
     using GeV = util::quantities::gigaelectronvolt;
     
     auto const& energyDeposits = event
-      .template getByLabel<icarus::SimEnergyDepositSummary>(summaryTag->tag());
+      .template getProduct<icarus::SimEnergyDepositSummary>(summaryTag->tag());
     
     info.SetDepositedEnergy                        (GeV(energyDeposits.Total));
     info.SetDepositedEnergyInSpill                 (GeV(energyDeposits.Spill));
@@ -525,7 +525,7 @@ auto icarus::trigger::details::EventInfoExtractor::extractInfo
   {
     
     auto const& channels
-      = event.template getByLabel<std::vector<sim::SimChannel>>
+      = event.template getProduct<std::vector<sim::SimChannel>>
         (channelsTag->tag())
       ;
     mf::LogTrace(fLogCategory)
@@ -543,7 +543,7 @@ auto icarus::trigger::details::EventInfoExtractor::extractInfo
     for (art::InputTag const& edepTag: *edepListTag) {
       
       auto const& energyDeposits
-        = event.template getByLabel<std::vector<sim::SimEnergyDeposit>>(edepTag);
+        = event.template getProduct<std::vector<sim::SimEnergyDeposit>>(edepTag);
       mf::LogTrace(fLogCategory)
         << "Event " << event.id() << " has " << energyDeposits.size()
         << " energy deposits recorded in '" << edepTag.encode() << "'";
diff --git a/icaruscode/PMT/Trigger/CMakeLists.txt b/icaruscode/PMT/Trigger/CMakeLists.txt
index 7abf36b..1028715 100644
--- a/icaruscode/PMT/Trigger/CMakeLists.txt
+++ b/icaruscode/PMT/Trigger/CMakeLists.txt
@@ -3,210 +3,239 @@ add_subdirectory(Utilities)
 add_subdirectory(scripts)
 
 art_make(
-  EXCLUDE
-    "DiscriminatePMTwaveformsByChannel_module.cc"
-    "MajorityTriggerSimulation_module.cc"
-    "SlidingWindowTrigger_module.cc"
-    "SlidingWindowTriggerSimulation_module.cc"
-    "TriggerEfficiencyPlots_module.cc"
-    "MajorityTriggerEfficiencyPlots_module.cc"
-    "SlidingWindowTriggerEfficiencyPlots_module.cc"
-    "MakeTriggerSimulationTree_module.cc"
-  LIB_LIBRARIES
-    icaruscode_PMT_Trigger_Algorithms
-    icaruscode_PMT_Trigger_Utilities
-    sbnobj_ICARUS_PMT_Trigger_Data
-    larcore_Geometry_Geometry_service
-    lardataalg_MCDumpers
-    larcorealg_Geometry
-    lardataobj_RawData
-    nusimdata_SimulationBase
-    ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-    ${ART_ROOT_IO_TFILE_SUPPORT}
-    ${ART_FRAMEWORK_SERVICES_REGISTRY}
-    ${ART_FRAMEWORK_PRINCIPAL}
-    ${ART_FRAMEWORK_CORE}
-    ${ART_PERSISTENCY_PROVENANCE}
-    ${ART_UTILITIES}
-    ${CANVAS}
-    ${MF_MESSAGELOGGER}
-    ${FHICLCPP}
-    ${CETLIB_EXCEPT}
-    ROOT::GenVector
-    ROOT::Hist
-    ROOT::Tree
-    ROOT::Core
-  MODULE_LIBRARIES
-    icaruscode_PMT_Trigger_Algorithms
-    sbnobj_ICARUS_PMT_Trigger_Data
-    lardataalg_DetectorInfo
-    lardataobj_RawData
-    ${ART_FRAMEWORK_SERVICES_REGISTRY}
-    ${MF_MESSAGELOGGER}
-    ${FHICLCPP}
-    ROOT::Core
-    ROOT::Physics
-  TOOL_LIBRARIES
-    icaruscode_PMT_Trigger_Algorithms
-    sbnobj_ICARUS_PMT_Trigger_Data
-    lardataalg_DetectorInfo
-    lardataobj_RawData
-    ${MF_MESSAGELOGGER}
-    ${FHICLCPP}
-  )
+	EXCLUDE
+		"DiscriminatePMTwaveformsByChannel_module.cc"
+		"MajorityTriggerSimulation_module.cc"
+		"SlidingWindowTrigger_module.cc"
+		"SlidingWindowTriggerSimulation_module.cc"
+		"TriggerEfficiencyPlots_module.cc"
+		"MajorityTriggerEfficiencyPlots_module.cc"
+		"SlidingWindowTriggerEfficiencyPlots_module.cc"
+		"MakeTriggerSimulationTree_module.cc"
+	LIB_LIBRARIES
+		icaruscode::PMT_Trigger_Algorithms
+		icaruscode::PMT_Trigger_Utilities
+		sbnobj::ICARUS_PMT_Trigger_Data
+		larcore::Geometry_Geometry_service
+		lardataalg::MCDumpers
+		larcorealg::Geometry
+		lardataobj::RawData
+                lardata::Utilities
+		lardata::DetectorInfoServices_DetectorClocksServiceStandard_service
+		nusimdata::SimulationBase
+		art_root_io::TFileService_service
+		art_root_io::tfile_support
+		art::Framework_Services_Registry
+		art::Framework_Principal
+		art::Framework_Core
+		art::Persistency_Provenance
+		art::Utilities
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		fhiclcpp::fhiclcpp
+		cetlib_except::cetlib_except
+		ROOT::GenVector
+		ROOT::Hist
+		ROOT::Tree
+		ROOT::Core
+	MODULE_LIBRARIES
+		icaruscode::PMT_Trigger_Algorithms
+		sbnobj::ICARUS_PMT_Trigger_Data
+		lardataalg::DetectorInfo
+		lardataobj::RawData
+                lardata::Utilities
+		larcore::Geometry_Geometry_service
+		art::Framework_Services_Registry
+		messagefacility::MF_MessageLogger
+		fhiclcpp::fhiclcpp
+		ROOT::Core
+		ROOT::Physics
+		TOOL_LIBRARIES
+		icaruscode::PMT_Trigger_Algorithms
+		sbnobj::ICARUS_PMT_Trigger_Data
+		lardataalg::DetectorInfo
+		lardataobj::RawData
+		lardata::DetectorInfoServices_DetectorClocksServiceStandard_service
+		messagefacility::MF_MessageLogger
+		fhiclcpp::fhiclcpp
+		larcore::Geometry_Geometry_service
+	)
 
 simple_plugin(DiscriminatePMTwaveformsByChannel module
-  icaruscode_PMT_Trigger_Algorithms
-  sbnobj_ICARUS_PMT_Trigger_Data
-  sbnobj_ICARUS_PMT_Data
-  sbnobj_Common_PMT_Data
-  icaruscode_PMT_Trigger_Utilities
-  icaruscode_PMT_Algorithms
-  lardataobj_RawData
-  ${ART_FRAMEWORK_SERVICES_REGISTRY}
-  ${ART_FRAMEWORK_PRINCIPAL}
-  ${ART_FRAMEWORK_CORE}
-  ${CANVAS}
-  ${MF_MESSAGELOGGER}
-  ${FHICLCPP}
-  ${CETLIB_EXCEPT}
-  ROOT::Core
-  )
+                LIBRARIES
+		icaruscode::PMT_Trigger_Algorithms
+		sbnobj::ICARUS_PMT_Trigger_Data
+		sbnobj::ICARUS_PMT_Data
+		sbnobj::Common_PMT_Data
+		icaruscode::PMT_Trigger_Utilities
+		icaruscode::PMT_Algorithms
+		lardataobj::RawData
+                lardata::Utilities
+		lardata::DetectorInfoServices_DetectorClocksServiceStandard_service
+		larcore::Geometry_Geometry_service
+		art::Framework_Services_Registry
+		art::Framework_Principal
+		art::Framework_Core
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		fhiclcpp::fhiclcpp
+		cetlib_except::cetlib_except
+		ROOT::Core
+		)
 
 simple_plugin(SlidingWindowTrigger module
-  icaruscode_PMT_Trigger_Algorithms
-  sbnobj_ICARUS_PMT_Trigger_Data
-  icaruscode_PMT_Trigger_Utilities
-  icaruscode_PMT_Algorithms
-  larcore_Geometry_Geometry_service
-  larcorealg_Geometry
-  lardataobj_RawData
-  ${ART_FRAMEWORK_SERVICES_REGISTRY}
-  ${ART_FRAMEWORK_PRINCIPAL}
-  ${ART_FRAMEWORK_CORE}
-  ${CANVAS}
-  ${MF_MESSAGELOGGER}
-  ${FHICLCPP}
-  ${CETLIB_EXCEPT}
-  ROOT::Core
-  )
+                LIBRARIES
+		icaruscode::PMT_Trigger_Algorithms
+		sbnobj::ICARUS_PMT_Trigger_Data
+		icaruscode::PMT_Trigger_Utilities
+		icaruscode::PMT_Algorithms
+		larcore::Geometry_Geometry_service
+		larcorealg::Geometry
+                lardata::Utilities
+		lardata::DetectorInfoServices_DetectorClocksServiceStandard_service
+		lardataobj::RawData
+		art::Framework_Services_Registry
+		art::Framework_Principal
+		art::Framework_Core
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		fhiclcpp::fhiclcpp
+		cetlib_except::cetlib_except
+		ROOT::Core
+		)
 
 simple_plugin(MajorityTriggerSimulation module
-  icaruscode_PMT_Trigger_Algorithms
-  sbnobj_ICARUS_PMT_Trigger_Data
-  icaruscode_PMT_Trigger_Utilities
-  larcore_Geometry_Geometry_service
-  larcorealg_Geometry
-  lardataobj_RawData
-  ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-  ${ART_ROOT_IO_TFILE_SUPPORT}
-  ${ART_FRAMEWORK_SERVICES_REGISTRY}
-  ${ART_FRAMEWORK_PRINCIPAL}
-  ${ART_FRAMEWORK_CORE}
-  ${CANVAS}
-  ${MF_MESSAGELOGGER}
-  ${FHICLCPP}
-  ${CETLIB_EXCEPT}
-  ROOT::Hist
-  ROOT::Core
-  )
+                LIBRARIES
+		icaruscode::PMT_Trigger_Algorithms
+		sbnobj::ICARUS_PMT_Trigger_Data
+		icaruscode::PMT_Trigger_Utilities
+		larcore::Geometry_Geometry_service
+		larcorealg::Geometry
+                lardata::Utilities
+		lardataobj::RawData
+		lardata::DetectorInfoServices_DetectorClocksServiceStandard_service
+		art_root_io::TFileService_service
+		art_root_io::tfile_support
+		art::Framework_Services_Registry
+		art::Framework_Principal
+		art::Framework_Core
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		fhiclcpp::fhiclcpp
+		cetlib_except::cetlib_except
+		ROOT::Hist
+		ROOT::Core
+		)
 
 simple_plugin(SlidingWindowTriggerSimulation module
-  icaruscode_PMT_Trigger_Algorithms
-  sbnobj_ICARUS_PMT_Trigger_Data
-  icaruscode_PMT_Trigger_Utilities
-  larcore_Geometry_Geometry_service
-  larcorealg_Geometry
-  lardataobj_RawData
-  ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-  ${ART_ROOT_IO_TFILE_SUPPORT}
-  ${ART_FRAMEWORK_SERVICES_REGISTRY}
-  ${ART_FRAMEWORK_PRINCIPAL}
-  ${ART_FRAMEWORK_CORE}
-  ${CANVAS}
-  ${MF_MESSAGELOGGER}
-  ${FHICLCPP}
-  ${CETLIB_EXCEPT}
-  ROOT::Hist
-  ROOT::Core
-  )
+                LIBRARIES
+		icaruscode::PMT_Trigger_Algorithms
+		sbnobj::ICARUS_PMT_Trigger_Data
+		icaruscode::PMT_Trigger_Utilities
+		larcore::Geometry_Geometry_service
+		larcorealg::Geometry
+		lardataobj::RawData
+                lardata::Utilities
+		lardata::DetectorInfoServices_DetectorClocksServiceStandard_service
+		art_root_io::TFileService_service
+		art_root_io::tfile_support
+		art::Framework_Services_Registry
+		art::Framework_Principal
+		art::Framework_Core
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		fhiclcpp::fhiclcpp
+		cetlib_except::cetlib_except
+		ROOT::Hist
+		ROOT::Core
+		)
 
 simple_plugin(TriggerEfficiencyPlots module
-  icaruscode_PMT_Trigger_Utilities
-  sbnobj_ICARUS_PMT_Trigger_Data
-  larcore_Geometry_Geometry_service
-  lardataalg_MCDumpers
-  larcorealg_Geometry
-  lardataobj_RawData
-  nusimdata_SimulationBase
-  ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-  ${ART_ROOT_IO_TFILE_SUPPORT}
-  ${ART_FRAMEWORK_SERVICES_REGISTRY}
-  ${ART_FRAMEWORK_PRINCIPAL}
-  ${ART_FRAMEWORK_CORE}
-  ${CANVAS}
-  ${MF_MESSAGELOGGER}
-  ${FHICLCPP}
-  ${CETLIB_EXCEPT}
-  ROOT::GenVector
-  ROOT::Hist
-  ROOT::Tree
-  ROOT::Core
-  )
+                LIBRARIES
+                icarusalg::Utilities
+		icaruscode::PMT_Trigger_Utilities
+		sbnobj::ICARUS_PMT_Trigger_Data
+		larcore::Geometry_Geometry_service
+		lardataalg::MCDumpers
+		larcorealg::Geometry
+		lardataobj::RawData
+                lardata::Utilities
+		lardata::DetectorInfoServices_DetectorClocksServiceStandard_service
+		nusimdata::SimulationBase
+		art_root_io::TFileService_service
+		art_root_io::tfile_support
+		art::Framework_Services_Registry
+		art::Framework_Principal
+		art::Framework_Core
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		fhiclcpp::fhiclcpp
+		cetlib_except::cetlib_except
+		ROOT::GenVector
+		ROOT::Hist
+		ROOT::Tree
+		ROOT::Core
+		)
 
 simple_plugin(MakeTriggerSimulationTree module
-  icaruscode_PMT_Trigger_Algorithms
-  icaruscode_PMT_Trigger_Utilities
-  sbnobj_ICARUS_PMT_Trigger_Data
-  larcore_Geometry_Geometry_service
-  lardataalg_MCDumpers
-  larcorealg_Geometry
-  nusimdata_SimulationBase
-  ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-  ${ART_ROOT_IO_TFILE_SUPPORT}
-  ${ART_FRAMEWORK_SERVICES_REGISTRY}
-  ${ART_FRAMEWORK_PRINCIPAL}
-  ${ART_FRAMEWORK_CORE}
-  ${CANVAS}
-  ${MF_MESSAGELOGGER}
-  ${FHICLCPP}
-  ${CETLIB_EXCEPT}
-  ROOT::GenVector
-  ROOT::Tree
-  ROOT::Core
-  )
+                LIBRARIES
+		icaruscode::PMT_Trigger_Algorithms
+		icaruscode::PMT_Trigger_Utilities
+		sbnobj::ICARUS_PMT_Trigger_Data
+		larcore::Geometry_Geometry_service
+		lardataalg::MCDumpers
+                lardata::Utilities
+		lardata::DetectorInfoServices_DetectorClocksServiceStandard_service
+		larcorealg::Geometry
+		nusimdata::SimulationBase
+		art_root_io::TFileService_service
+		art_root_io::tfile_support
+		art::Framework_Services_Registry
+		art::Framework_Principal
+		art::Framework_Core
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		fhiclcpp::fhiclcpp
+		cetlib_except::cetlib_except
+		ROOT::GenVector
+		ROOT::Tree
+		ROOT::Core
+		)
 
 # trigger efficiency plot modules with the same build configuration:
 foreach(TriggerEfficiencyPlotsModule
-  MajorityTriggerEfficiencyPlots
-  SlidingWindowTriggerEfficiencyPlots
-)
+	MajorityTriggerEfficiencyPlots
+	SlidingWindowTriggerEfficiencyPlots
+	)
 
-  simple_plugin(${TriggerEfficiencyPlotsModule} module
-    icaruscode_PMT_Trigger_Algorithms
-    icaruscode_PMT_Trigger
-    icaruscode_PMT_Trigger_Utilities
-    sbnobj_ICARUS_PMT_Trigger_Data
-    larcore_Geometry_Geometry_service
-    lardataalg_MCDumpers
-    larcorealg_Geometry
-    lardataobj_RawData
-    nusimdata_SimulationBase
-    ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-    ${ART_ROOT_IO_TFILE_SUPPORT}
-    ${ART_FRAMEWORK_SERVICES_REGISTRY}
-    ${ART_FRAMEWORK_PRINCIPAL}
-    ${ART_FRAMEWORK_CORE}
-    ${ART_FRAMEWORK_PRINCIPAL}
-    ${CANVAS}
-    ${MF_MESSAGELOGGER}
-    ${FHICLCPP}
-    ${CETLIB_EXCEPT}
-    ROOT::GenVector
-    ROOT::Hist
-    ROOT::Tree
-    ROOT::Core
-    )
+	simple_plugin(${TriggerEfficiencyPlotsModule} module
+                LIBRARIES
+		icaruscode::PMT_Trigger_Algorithms
+		icaruscode::PMT_Trigger
+		icaruscode::PMT_Trigger_Utilities
+		sbnobj::ICARUS_PMT_Trigger_Data
+		larcore::Geometry_Geometry_service
+		lardataalg::MCDumpers
+                lardata::Utilities
+		lardata::DetectorInfoServices_DetectorClocksServiceStandard_service
+		larcorealg::Geometry
+		lardataobj::RawData
+		nusimdata::SimulationBase
+		art_root_io::TFileService_service
+		art_root_io::tfile_support
+		art::Framework_Services_Registry
+		art::Framework_Principal
+		art::Framework_Core
+		art::Framework_Principal
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		fhiclcpp::fhiclcpp
+		cetlib_except::cetlib_except
+		ROOT::GenVector
+		ROOT::Hist
+		ROOT::Tree
+		ROOT::Core
+		)
 
 endforeach()
 
diff --git a/icaruscode/PMT/Trigger/DiscriminatePMTwaveformsByChannel_module.cc b/icaruscode/PMT/Trigger/DiscriminatePMTwaveformsByChannel_module.cc
index e3a246a..e500699 100644
--- a/icaruscode/PMT/Trigger/DiscriminatePMTwaveformsByChannel_module.cc
+++ b/icaruscode/PMT/Trigger/DiscriminatePMTwaveformsByChannel_module.cc
@@ -537,7 +537,7 @@ void icarus::trigger::DiscriminatePMTwaveformsByChannel::beginRun
 {
   if (fThresholdsFromPMTconfig) {
     auto const& PMTconfig
-      = run.getByLabel<sbn::PMTconfiguration>(fThresholdsFromPMTconfig.value());
+      = run.getProduct<sbn::PMTconfiguration>(fThresholdsFromPMTconfig.value());
     
     if (!fPMTconfig || (fPMTconfig != PMTconfig)) {
       fPMTconfig = PMTconfig;
@@ -577,7 +577,7 @@ void icarus::trigger::DiscriminatePMTwaveformsByChannel::produce(art::Event& eve
   if (fBaselineTag) {
     // read and assign from the data product; configured baselines are ignored
     
-    baselines = event.getByLabel<std::vector<icarus::WaveformBaseline>>
+    baselines = event.getProduct<std::vector<icarus::WaveformBaseline>>
       (fBaselineTag.value());
     
   } // if baselines from event
diff --git a/icaruscode/PMT/Trigger/DiscriminatePMTwaveforms_module.cc b/icaruscode/PMT/Trigger/DiscriminatePMTwaveforms_module.cc
index 3e2363e..0b95be6 100644
--- a/icaruscode/PMT/Trigger/DiscriminatePMTwaveforms_module.cc
+++ b/icaruscode/PMT/Trigger/DiscriminatePMTwaveforms_module.cc
@@ -398,7 +398,7 @@ void icarus::trigger::DiscriminatePMTwaveforms::produce(art::Event& event) {
   std::vector<icarus::WaveformBaseline> const* baselines = nullptr;
   if (fBaselineTag) {
     baselines =
-      &(event.getByLabel<std::vector<icarus::WaveformBaseline>>(*fBaselineTag));
+      &(event.getProduct<std::vector<icarus::WaveformBaseline>>(*fBaselineTag));
   }
   else {
     fixedBaselines.resize
diff --git a/icaruscode/PMT/Trigger/DumpTriggerGateData_module.cc b/icaruscode/PMT/Trigger/DumpTriggerGateData_module.cc
index 62a055a..6cfa110 100644
--- a/icaruscode/PMT/Trigger/DumpTriggerGateData_module.cc
+++ b/icaruscode/PMT/Trigger/DumpTriggerGateData_module.cc
@@ -21,6 +21,7 @@
 #include "art/Framework/Principal/Event.h"
 #include "art/Framework/Principal/Handle.h"
 #include "canvas/Utilities/InputTag.h"
+#include "canvas/Persistency/Common/Assns.h"
 #include "messagefacility/MessageLogger/MessageLogger.h"
 #include "fhiclcpp/types/Atom.h"
 
@@ -194,8 +195,8 @@ void icarus::trigger::DumpTriggerGateData::analyze(art::Event const& event) {
   auto const& gates =
    *(event.getValidHandle<std::vector<TriggerGateData_t>>(fTriggerGateDataTag));
   auto const* gateToWaveforms = fPrintChannels
-    ? event.getPointerByLabel<art::Assns<TriggerGateData_t, raw::OpDetWaveform>>
-      (fTriggerGateDataTag)
+    ? event.getHandle<art::Assns<TriggerGateData_t, raw::OpDetWaveform>>
+      (fTriggerGateDataTag).product()
     : nullptr
     ;
   
diff --git a/icaruscode/PMT/Trigger/MakeTriggerSimulationTree_module.cc b/icaruscode/PMT/Trigger/MakeTriggerSimulationTree_module.cc
index bf68821..d6b2072 100644
--- a/icaruscode/PMT/Trigger/MakeTriggerSimulationTree_module.cc
+++ b/icaruscode/PMT/Trigger/MakeTriggerSimulationTree_module.cc
@@ -636,7 +636,7 @@ TriggerGatesInfo icarus::trigger::MakeTriggerSimulationTree::extractTriggerInfo
   // 1. get the data product from the event
   //
   auto const& gates
-    = event.getByLabel<std::vector<OpticalTriggerGateData_t>>(fTriggerGatesTag);
+    = event.getProduct<std::vector<OpticalTriggerGateData_t>>(fTriggerGatesTag);
   
   //
   // 2. fill one "channel" of `TriggerGateInfo` per entry in the data product
diff --git a/icaruscode/PMT/Trigger/Utilities/CMakeLists.txt b/icaruscode/PMT/Trigger/Utilities/CMakeLists.txt
index b5b7ac2..1cab5ce 100644
--- a/icaruscode/PMT/Trigger/Utilities/CMakeLists.txt
+++ b/icaruscode/PMT/Trigger/Utilities/CMakeLists.txt
@@ -1,15 +1,16 @@
 if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
-cet_add_compiler_flags(CXX -Wno-maybe-uninitialized)
+	cet_add_compiler_flags(CXX -Wno-maybe-uninitialized)
 endif()
 
 art_make(
-  LIB_LIBRARIES
-    ${ART_ROOT_IO_TFILE_SUPPORT}
-    ${MF_MESSAGELOGGER}
-    ${CETLIB_EXCEPT}
-    ${ROOT_RIO}
-    ${ROOT_CORE}
-  )
+	LIB_LIBRARIES
+                larcorealg::CoreUtils
+		art_root_io::tfile_support
+		messagefacility::MF_MessageLogger
+		cetlib_except::cetlib_except
+		ROOT::RIO
+		ROOT::Core
+	)
 
 install_headers()
 install_source()
diff --git a/icaruscode/RecoUtils/CMakeLists.txt b/icaruscode/RecoUtils/CMakeLists.txt
index aa70ef5..b1a0ade 100644
--- a/icaruscode/RecoUtils/CMakeLists.txt
+++ b/icaruscode/RecoUtils/CMakeLists.txt
@@ -1,34 +1,33 @@
 art_make(
-             LIB_LIBRARIES larcorealg_Geometry
-                           larcore_Geometry_Geometry_service
-                           larsim_Simulation lardataobj_Simulation
-                           larsim_MCCheater_BackTrackerService_service
-                           larsim_MCCheater_ParticleInventoryService_service
-                           lardata_Utilities
-                           larevt_Filters
-                           lardataobj_RawData
-                           lardataobj_RecoBase
-                           lardata_RecoObjects
-                           larpandora_LArPandoraInterface
-                           nusimdata_SimulationBase
-                           cetlib cetlib_except
-                           ${ART_FRAMEWORK_CORE}
-                           ${ART_FRAMEWORK_PRINCIPAL}
-                           ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                           ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                           ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                           art_Persistency_Common canvas
-                           art_Persistency_Provenance canvas
-                           art_Utilities canvas
-                           ${MF_MESSAGELOGGER}
-                           ${MF_UTILITIES}
-                           ${FHICLCPP}
-                           ${ROOT_GEOM}
-                           ${ROOT_XMLIO}
-                           ${ROOT_GDML}
-                           ${ROOT_BASIC_LIB_LIST}
-                           ${Boost_SYSTEM_LIBRARY}
-        )
+     LIB_LIBRARIES larcorealg::Geometry
+          larcore::Geometry_Geometry_service
+          larsim::Simulation lardataobj::Simulation
+          larsim::MCCheater_BackTrackerService_service
+          larsim::MCCheater_ParticleInventoryService_service
+          lardata::Utilities
+          larevt::Filters
+          lardataobj::RawData
+          lardataobj::RecoBase
+          lardata::RecoObjects
+          larpandora::LArPandoraInterface
+          nusimdata::SimulationBase
+          cetlib::cetlib cetlib_except::cetlib_except
+          art::Framework_Core
+          art::Framework_Principal
+          art::Framework_Services_Registry
+          art_root_io::tfile_support ROOT::Core
+          art_root_io::TFileService_service
+          art::Persistency_Common canvas::canvas
+          art::Persistency_Provenance
+          art::Utilities
+          messagefacility::MF_MessageLogger
+          messagefacility::headers
+          fhiclcpp::fhiclcpp
+          ROOT::Geom
+          ROOT::XMLIO
+          ROOT::Gdml
+          Boost::system
+)
 
 install_headers()
 install_fhicl()
@@ -36,39 +35,39 @@ install_source()
 
 
 #art_make(
-#	  LIB_LIBRARIES larcorealg_Geometry
-#	  	        larcore_Geometry_Geometry_service
-#		        larsim_Simulation nurandom_ParticleNavigation lardataobj_Simulation
-# 	  	        larsim_MCCheater_BackTracker_service
-#	  	        lardata_Utilities
-#larevt_Filters
-#	  	        lardataobj_RawData
-#	  	        lardataobj_RecoBase
-#	  	        lardata_RecoObjects
+#     LIB_LIBRARIES larcorealg::Geometry
+#          larcore::Geometry_Geometry_service
+#          larsim_Simulationnurandom_ParticleNavigation lardataobj::Simulation
+#          larsim::MCCheater_BackTracker_service
+#          lardata::Utilities
+#larevt::Filters
+#          lardataobj::RawData
+#          lardataobj::RecoBase
+#          lardata::RecoObjects
 #larreco_RecoAlg
 #larreco_Calorimetry
 #larpandora_LArPandoraInterface
-#          	        nusimdata_SimulationBase
-#          	        ${LARRECO_LIB}
-#          	        ${LARDATA_LIB}
-#	  	        ${MF_MESSAGELOGGER}
-#	  	        ${MF_UTILITIES}
-#	  	        ${FHICLCPP}
-#	  	        cetlib cetlib_except
-#          	        ${ROOT_GEOM}
-#          	        ${ROOT_XMLIO}
-#          	        ${ROOT_GDML}
-#	  	        ${ROOT_BASIC_LIB_LIST}
-#	  MODULE_LIBRARIES RecoUtils
-#          	           ${ART_FRAMEWORK_CORE}
-#	  	           ${ART_FRAMEWORK_PRINCIPAL}
-#		       	   ${ART_FRAMEWORK_SERVICES_REGISTRY}
-#	  	       	   ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-#			   ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-#	  	           art_Persistency_Common canvas
-#	  	           art_Persistency_Provenance canvas
-#	  	           art_Utilities canvas
-#        )
+#     nusimdata::SimulationBase
+#     ${LARRECO_LIB}
+#     ${LARDATA_LIB}
+#          messagefacility::MF_MessageLogger
+#          messagefacility::headers
+#          fhiclcpp::fhiclcpp
+#          cetlib::cetlib cetlib_except::cetlib_except
+#     ROOT::Geom
+#     ROOT::XMLIO
+#     ROOT::Gdml
+#          
+#     MODULE_LIBRARIES RecoUtils
+#     art::Framework_Core
+#          art::Framework_Principal
+#               art::Framework_Services_Registry
+#               art_root_io::tfile_support ROOT::Core
+#               art_root_io::TFileService_service
+#          art::Persistency_Commoncanvas
+#          art::Persistency_Provenancecanvas
+#          art::Utilitiescanvas
+#)
 #
 #install_headers()
 ##install_fhicl()
diff --git a/icaruscode/TPC/CMakeLists.txt b/icaruscode/TPC/CMakeLists.txt
index c7ccb4e..b10c89d 100644
--- a/icaruscode/TPC/CMakeLists.txt
+++ b/icaruscode/TPC/CMakeLists.txt
@@ -1,5 +1,5 @@
 
-set( IFDH_ART_DIR $ENV{IFDH_ART_DIR} )
+set(IFDH_ART_DIR$ENV{IFDH_ART_DIR})
 
 add_subdirectory(Calorimetry)
 add_subdirectory(Utilities)
diff --git a/icaruscode/TPC/Calorimetry/Algorithms/CMakeLists.txt b/icaruscode/TPC/Calorimetry/Algorithms/CMakeLists.txt
old mode 100755
new mode 100644
index 1b8217c..c493141
--- a/icaruscode/TPC/Calorimetry/Algorithms/CMakeLists.txt
+++ b/icaruscode/TPC/Calorimetry/Algorithms/CMakeLists.txt
@@ -1,68 +1,69 @@
-art_make( 
-          LIB_LIBRARIES 
-                          lardataobj_RawData
-                          lardataobj_RecoBase
-                          lardata_Utilities
-                          ${FHICLCPP}
-                          cetlib cetlib_except
-                          ${ROOT_BASIC_LIB_LIST}
-                          larcorealg_Geometry
-                          larcore_Geometry_Geometry_service
-                          lardata_Utilities
-                          larevt_Filters
-                          lardataobj_RawData
-                          larevt_CalibrationDBI_IOVData
-                          larevt_CalibrationDBI_Providers
-                          lardataalg_DetectorInfo
-                          lardataobj_RecoBase
-                          icaruscode_TPC_Utilities_SignalShapingICARUSService_service
-                          ${ICARUS_FFTW_LIBRARIES}
-                          ${ART_FRAMEWORK_CORE}
-                          ${ART_FRAMEWORK_PRINCIPAL}
-                          ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                          ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                          ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                          art_Persistency_Common canvas
-                          art_Persistency_Provenance canvas
-                          art_Utilities canvas
-                          ${MF_MESSAGELOGGER}
-                          ${MF_UTILITIES}
-                          ${FHICLCPP}
-                          cetlib cetlib_except
-                          ${ROOT_GEOM}
-                          ${ROOT_XMLIO}
-                          ${ROOT_GDML}
-                          ${ROOT_FFTW}
-                          ${ROOT_BASIC_LIB_LIST}
+include_directories(${FFTW3_INCLUDE_DIRS})
+link_directories(${FFTW3_LIBRARY_DIRS})
 
-          TOOL_LIBRARIES  icaruscode_TPC_Calorimetry_Algorithms
-                          icaruscode_TPC_Utilities_SignalShapingICARUSService_service
-                          lardataobj_RawData
-                          lardataobj_RecoBase
-                          lardata_Utilities
-                          ${FHICLCPP}
-                          cetlib cetlib_except
-                          larcorealg_Geometry
-                          larcore_Geometry_Geometry_service
-                          larevt_CalibrationDBI_IOVData
-                          larevt_CalibrationDBI_Providers
-                          ${ICARUS_FFTW_LIBRARIES}
-                          ${ART_FRAMEWORK_CORE}
-                          ${ART_FRAMEWORK_PRINCIPAL}
-                          ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                          ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                          ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                          art_Persistency_Common canvas
-                          art_Persistency_Provenance canvas
-                          art_Utilities canvas
-                          ${MF_MESSAGELOGGER}
-                          ${MF_UTILITIES}
-                          ${FHICLCPP}
-                          cetlib cetlib_except
-                          ${ROOT_GEOM}
-                          ${ROOT_FFTW}
-                          ${ROOT_BASIC_LIB_LIST}
-       )
+art_make(
+	LIB_LIBRARIES
+		lardataobj::RawData
+		lardataobj::RecoBase
+		lardata::Utilities
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib cetlib_except::cetlib_except
+		larcorealg::Geometry
+		larcore::Geometry_Geometry_service
+		lardata::Utilities
+		larevt::Filters
+		lardataobj::RawData
+		larevt::CalibrationDBI_IOVData
+		larevt::CalibrationDBI_Providers
+		lardataalg::DetectorInfo
+		lardataobj::RecoBase
+		icaruscode::TPC_Utilities_SignalShapingICARUSService_service
+		${ICARUS_FFTW_LIBRARIES}
+		art::Framework_Core
+		art::Framework_Principal
+		art::Framework_Services_Registry
+		art_root_io::tfile_support ROOT::Core
+		art_root_io::TFileService_service
+		art::Persistency_Common canvas::canvas
+		art::Persistency_Provenance canvas::canvas
+		art::Utilities canvas::canvas
+		messagefacility::MF_MessageLogger
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib cetlib_except::cetlib_except
+		ROOT::Geom
+		ROOT::XMLIO
+		ROOT::Gdml
+		ROOT::FFTW
+
+	TOOL_LIBRARIES
+		icaruscode::TPC_Calorimetry_Algorithms
+		icaruscode::TPC_Utilities_SignalShapingICARUSService_service
+		lardataobj::RawData
+		lardataobj::RecoBase
+		lardata::Utilities
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib cetlib_except::cetlib_except
+		larcorealg::Geometry
+		larcore::Geometry_Geometry_service
+		larevt::CalibrationDBI_IOVData
+		larevt::CalibrationDBI_Providers
+		${ICARUS_FFTW_LIBRARIES}
+		art::Framework_Core
+		art::Framework_Principal
+		art::Framework_Services_Registry
+		art_root_io::tfile_support ROOT::Core
+		art_root_io::TFileService_service
+		art::Persistency_Common canvas::canvas
+		art::Persistency_Provenance canvas::canvas
+		art::Utilities canvas::canvas
+		messagefacility::MF_MessageLogger
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib cetlib_except::cetlib_except
+		ROOT::Geom
+		ROOT::FFTW
+	)
 
 install_headers()
 install_fhicl()
diff --git a/icaruscode/TPC/Calorimetry/CMakeLists.txt b/icaruscode/TPC/Calorimetry/CMakeLists.txt
index d84c1aa..c08fe8f 100644
--- a/icaruscode/TPC/Calorimetry/CMakeLists.txt
+++ b/icaruscode/TPC/Calorimetry/CMakeLists.txt
@@ -1,27 +1,27 @@
 add_subdirectory(Algorithms)
 
-# Build the module
-art_make( MODULE_LIBRARIES
-           icaruscode_TPC_Calorimetry_Algorithms
-           larcorealg_Geometry
-           larreco_Calorimetry
-           lardataobj_RecoBase
-           lardata_ArtDataHelper
-           lardataalg_DetectorInfo
-           larcorealg_Geometry
-           lardataobj_AnalysisBase
-           ${ART_FRAMEWORK_SERVICES_REGISTRY}
-           ${ART_UTILITIES}
-           canvas
-           ${FHICLCPP}
-           cetlib_except
-           ROOT::Core
-           ROOT::Physics
-           ROOT::Core
-           ROOT::Hist
-           ROOT::Physics
-           ${MF_MESSAGELOGGER}
-         )
+#Buildthemodule
+art_make(MODULE_LIBRARIES
+		icaruscode::TPC_Calorimetry_Algorithms
+		larcorealg::Geometry
+		larreco::Calorimetry
+		lardataobj::RecoBase
+		lardata::ArtDataHelper
+		lardataalg::DetectorInfo
+		larcorealg::Geometry
+		lardataobj::AnalysisBase
+		art::Framework_Services_Registry
+		art::Utilities
+		canvas::canvas
+		fhiclcpp::fhiclcpp
+		cetlib_except::cetlib_except
+		ROOT::Core
+		ROOT::Physics
+		ROOT::Core
+		ROOT::Hist
+		ROOT::Physics
+		messagefacility::MF_MessageLogger
+		)
 
 install_headers()
 install_fhicl()
diff --git a/icaruscode/TPC/Calorimetry/GnocchiCalorimetryICARUS_module.cc b/icaruscode/TPC/Calorimetry/GnocchiCalorimetryICARUS_module.cc
index 3198c67..6ab9b8b 100644
--- a/icaruscode/TPC/Calorimetry/GnocchiCalorimetryICARUS_module.cc
+++ b/icaruscode/TPC/Calorimetry/GnocchiCalorimetryICARUS_module.cc
@@ -10,6 +10,7 @@
 #include <optional>
 #include <cmath>
 #include <limits> // std::numeric_limits<>
+#include <numeric> // std::accumulate
 
 #include "larreco/Calorimetry/CalorimetryAlg.h"
 #include "larcoreobj/SimpleTypesAndConstants/PhysicalConstants.h"
diff --git a/icaruscode/TPC/ICARUSWireCell/icarus/CMakeLists.txt b/icaruscode/TPC/ICARUSWireCell/icarus/CMakeLists.txt
index c15f855..f7592a1 100644
--- a/icaruscode/TPC/ICARUSWireCell/icarus/CMakeLists.txt
+++ b/icaruscode/TPC/ICARUSWireCell/icarus/CMakeLists.txt
@@ -1,7 +1,7 @@
 # Wire-Cell configuration files, required at runtime.
 FILE(GLOB cfg_file *.jsonnet *.fcl )
 message(STATUS "Configuration files ${cfg_file}")
-#install(FILES ${data} DESTINATION #${product}/${version}/WireCellData/pgrapher/experiment/icarus)
+#install(FILES ${data} DESTINATION #WireCellData/pgrapher/experiment/icarus)
 install_wp(LIST ${cfg_file} SUBDIRNAME pgrapher/experiment/icarus)
 
 #add_subdirectory(fhicl)
diff --git a/icaruscode/TPC/SignalProcessing/CMakeLists.txt b/icaruscode/TPC/SignalProcessing/CMakeLists.txt
index 70284c9..077227a 100644
--- a/icaruscode/TPC/SignalProcessing/CMakeLists.txt
+++ b/icaruscode/TPC/SignalProcessing/CMakeLists.txt
@@ -1,5 +1,5 @@
 
-set( IFDH_ART_DIR $ENV{IFDH_ART_DIR} )
+set(IFDH_ART_DIR$ENV{IFDH_ART_DIR})
 
 add_subdirectory(HitFinder)
 add_subdirectory(RawDigitFilter)
diff --git a/icaruscode/TPC/SignalProcessing/HitFinder/CMakeLists.txt b/icaruscode/TPC/SignalProcessing/HitFinder/CMakeLists.txt
index 4e507da..44edef1 100644
--- a/icaruscode/TPC/SignalProcessing/HitFinder/CMakeLists.txt
+++ b/icaruscode/TPC/SignalProcessing/HitFinder/CMakeLists.txt
@@ -1,42 +1,43 @@
 add_subdirectory(HitFinderTools)
 
-art_make( 
-          LIB_LIBRARIES 
-			           lardataobj_RawData
-                       lardataobj_RecoBase
-	                   lardata_Utilities
-	                   ${FHICLCPP}
-			           ${CETLIB}
-			           ${ROOT_BASIC_LIB_LIST}
-	  MODULE_LIBRARIES larcorealg_Geometry
-	  		           larcore_Geometry_Geometry_service
-	                   lardata_Utilities
-			           larevt_Filters
-			           lardataobj_RawData
-			           larevt_CalibrationDBI_IOVData
-			           larevt_CalibrationDBI_Providers
-			           lardataobj_RecoBase
-			           lardata_ArtDataHelper
-			           larreco_RecoAlg
-                       ${ART_FRAMEWORK_CORE}
-			           ${ART_FRAMEWORK_PRINCIPAL}
-			           ${ART_FRAMEWORK_SERVICES_REGISTRY}
-			           ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-			           ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-			           art_Persistency_Common
-			           art_Persistency_Provenance
-			           art_Utilities
-			           canvas
-			           ${MF_MESSAGELOGGER}
-			           ${MF_UTILITIES}
-	                   ${FHICLCPP}
-			           ${CETLIB}
-                       ${ROOT_GEOM}
-                       ${ROOT_XMLIO}
-                       ${ROOT_GDML}
-			           ${ROOT_FFTW}
-			           ${ROOT_BASIC_LIB_LIST}
-        )
+art_make(
+		LIB_LIBRARIES
+			lardataobj::RawData
+			lardataobj::RecoBase
+			lardata::Utilities
+			fhiclcpp::fhiclcpp
+			cetlib::cetlib
+			
+		MODULE_LIBRARIES
+			larcorealg::Geometry
+			larcore::Geometry_Geometry_service
+			lardata::Utilities
+			larevt::Filters
+			lardataobj::RawData
+			larevt::CalibrationDBI_IOVData
+			larevt::CalibrationDBI_Providers
+			lardataobj::RecoBase
+			lardata::ArtDataHelper
+			larreco::RecoAlg
+			art::Framework_Core
+			art::Framework_Principal
+			art::Framework_Services_Registry
+			art_root_io::tfile_support ROOT::Core
+			art_root_io::TFileService_service
+			art::Persistency_Common
+			art::Persistency_Provenance
+			art::Utilities
+			canvas::canvas
+			messagefacility::MF_MessageLogger
+			messagefacility::headers
+			fhiclcpp::fhiclcpp
+			cetlib::cetlib
+			ROOT::Geom
+			ROOT::XMLIO
+			ROOT::Gdml
+			ROOT::FFTW
+			
+	)
 
 install_headers()
 install_fhicl()
diff --git a/icaruscode/TPC/SignalProcessing/HitFinder/HitFinderTools/CMakeLists.txt b/icaruscode/TPC/SignalProcessing/HitFinder/HitFinderTools/CMakeLists.txt
index 1601ea8..51f88fd 100644
--- a/icaruscode/TPC/SignalProcessing/HitFinder/HitFinderTools/CMakeLists.txt
+++ b/icaruscode/TPC/SignalProcessing/HitFinder/HitFinderTools/CMakeLists.txt
@@ -1,35 +1,33 @@
 cet_enable_asserts()
 
-set( hitfinder_tool_lib_list
-			larcorealg_Geometry
-			lardataobj_RecoBase
-			larcore_Geometry_Geometry_service
-			lardata_Utilities
-			nurandom_RandomUtils_NuRandomService_service
-  			${ART_FRAMEWORK_CORE}
-			${ART_FRAMEWORK_PRINCIPAL}
-			${ART_FRAMEWORK_SERVICES_REGISTRY}
-			art_Persistency_Common
-			art_Persistency_Provenance
-			${ART_FRAMEWORK_SERVICES_BASIC}
-			${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-            ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-			${ART_ROOT_IO_TFILESERVICE_SERVICE}
-			${ART_FRAMEWORK_SERVICES_SYSTEM_FILECATALOGMETADATA_SERVICE}
-			art_Utilities
-			canvas
-			${MF_MESSAGELOGGER}
-			${MF_UTILITIES}
-			${FHICLCPP}
-			${CETLIB}
-			${Boost_FILESYSTEM_LIBRARY}
-			${Boost_SYSTEM_LIBRARY}
-            ${CLHEP}
-			${ROOT_BASIC_LIB_LIST}
-    )
+set(hitfinder_tool_lib_list
+			larcorealg::Geometry
+			lardataobj::RecoBase
+			larcore::Geometry_Geometry_service
+			lardata::Utilities
+			larreco::HitFinder
+			nurandom::RandomUtils_NuRandomService_service
+			art::Framework_Core
+			art::Framework_Principal
+			art::Framework_Services_Registry
+			art::Persistency_Common
+			art::Persistency_Provenance		
+			art_root_io::tfile_support ROOT::Core
+			art::Framework_Services_Optional_RandomNumberGenerator_service
+			art_root_io::TFileService_service
+			art::Framework_Services_System_FileCatalogMetadata_service
+			art::Utilities
+			canvas::canvas
+			messagefacility::MF_MessageLogger
+			messagefacility::headers
+			fhiclcpp::fhiclcpp
+			cetlib::cetlib
+			Boost::filesystem
+			Boost::system
+			CLHEP::Random			
+)
 
-art_make(TOOL_LIBRARIES ${hitfinder_tool_lib_list}
-        )
+art_make(TOOL_LIBRARIES ${hitfinder_tool_lib_list})
 
 install_headers()
 install_source()
diff --git a/icaruscode/TPC/SignalProcessing/RawDigitFilter/Algorithms/CMakeLists.txt b/icaruscode/TPC/SignalProcessing/RawDigitFilter/Algorithms/CMakeLists.txt
old mode 100755
new mode 100644
index 3561a35..a22323b
--- a/icaruscode/TPC/SignalProcessing/RawDigitFilter/Algorithms/CMakeLists.txt
+++ b/icaruscode/TPC/SignalProcessing/RawDigitFilter/Algorithms/CMakeLists.txt
@@ -1,70 +1,76 @@
 
+include_directories(${FFTW3_INCLUDE_DIRS})
+link_directories(${FFTW3_LIBRARY_DIRS})
+
 add_definitions(-DEIGEN_FFTW_DEFAULT)
 
-art_make( 
-          LIB_LIBRARIES 
-                          lardataobj_RawData
-                          lardataobj_RecoBase
-                          lardata_Utilities
-                          ${FHICLCPP}
-                          cetlib cetlib_except
-                          ${ROOT_BASIC_LIB_LIST}
-                          larcorealg_Geometry
-                          larcore_Geometry_Geometry_service
-                          lardata_Utilities
-                          larevt_Filters
-                          lardataobj_RawData
-                          larevt_CalibrationDBI_IOVData
-                          larevt_CalibrationDBI_Providers
-                          lardataobj_RecoBase
-                          icaruscode_TPC_Utilities_SignalShapingICARUSService_service
-                          ${ICARUS_FFTW_LIBRARIES}
-                          ${ART_FRAMEWORK_CORE}
-                          ${ART_FRAMEWORK_PRINCIPAL}
-                          ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                          ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                          ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                          art_Persistency_Common canvas
-                          art_Persistency_Provenance canvas
-                          art_Utilities canvas
-                          ${MF_MESSAGELOGGER}
-                          ${MF_UTILITIES}
-                          ${FHICLCPP}
-                          cetlib cetlib_except
-                          ${ROOT_GEOM}
-                          ${ROOT_XMLIO}
-                          ${ROOT_GDML}
-                          ${ROOT_FFTW}
-                          ${ROOT_BASIC_LIB_LIST}
+art_make(
+	LIB_LIBRARIES
+		lardataobj::RawData
+		lardataobj::RecoBase
+		lardata::Utilities
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib
+		cetlib_except::cetlib_except
+		larcorealg::Geometry
+		larcore::Geometry_Geometry_service
+		lardata::Utilities
+		larevt::Filters
+		lardataobj::RawData
+		larevt::CalibrationDBI_IOVData
+		larevt::CalibrationDBI_Providers
+		lardataobj::RecoBase
+		icaruscode::TPC_Utilities_SignalShapingICARUSService_service
+		${ICARUS_FFTW_LIBRARIES}
+                icarus_signal_processing::icarus_signal_processing
+		art::Framework_Core
+		art::Framework_Principal
+		art::Framework_Services_Registry
+		art_root_io::tfile_support ROOT::Core
+		art_root_io::TFileService_service
+		art::Persistency_Common canvas::canvas
+		art::Persistency_Provenance
+		art::Utilities
+		messagefacility::MF_MessageLogger
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib
+		cetlib_except::cetlib_except
+		ROOT::Geom
+		ROOT::XMLIO
+		ROOT::Gdml
+		ROOT::FFTW
+		Eigen3::Eigen
+
+	TOOL_LIBRARIES
+		icaruscode::TPC_SignalProcessing_RawDigitFilter_Algorithms
+		icaruscode::TPC_Utilities_SignalShapingICARUSService_service
+		lardataobj::RawData
+		lardataobj::RecoBase
+		lardata::Utilities
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib cetlib_except::cetlib_except
+		larcorealg::Geometry
+		larcore::Geometry_Geometry_service
+		larevt::CalibrationDBI_IOVData
+		larevt::CalibrationDBI_Providers
+		${ICARUS_FFTW_LIBRARIES}
+		art::Framework_Core
+		art::Framework_Principal
+		art::Framework_Services_Registry
+		art_root_io::tfile_support ROOT::Core
+		art_root_io::TFileService_service
+		art::Persistency_Common canvas::canvas
+		art::Persistency_Provenance
+		art::Utilities
+		messagefacility::MF_MessageLogger
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib cetlib_except::cetlib_except
+		ROOT::Geom
+		ROOT::FFTW
 
-          TOOL_LIBRARIES  icaruscode_TPC_SignalProcessing_RawDigitFilter_Algorithms
-                          icaruscode_TPC_Utilities_SignalShapingICARUSService_service
-                          lardataobj_RawData
-                          lardataobj_RecoBase
-                          lardata_Utilities
-                          ${FHICLCPP}
-                          cetlib cetlib_except
-                          larcorealg_Geometry
-                          larcore_Geometry_Geometry_service
-                          larevt_CalibrationDBI_IOVData
-                          larevt_CalibrationDBI_Providers
-                          ${ICARUS_FFTW_LIBRARIES}
-                          ${ART_FRAMEWORK_CORE}
-                          ${ART_FRAMEWORK_PRINCIPAL}
-                          ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                          ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                          ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                          art_Persistency_Common canvas
-                          art_Persistency_Provenance canvas
-                          art_Utilities canvas
-                          ${MF_MESSAGELOGGER}
-                          ${MF_UTILITIES}
-                          ${FHICLCPP}
-                          cetlib cetlib_except
-                          ${ROOT_GEOM}
-                          ${ROOT_FFTW}
-                          ${ROOT_BASIC_LIB_LIST}
-       )
+)
 
 install_headers()
 install_fhicl()
diff --git a/icaruscode/TPC/SignalProcessing/RawDigitFilter/Algorithms/RawDigitCharacterizationAlg.cxx b/icaruscode/TPC/SignalProcessing/RawDigitFilter/Algorithms/RawDigitCharacterizationAlg.cxx
index 3cbf2d9..078c9f7 100755
--- a/icaruscode/TPC/SignalProcessing/RawDigitFilter/Algorithms/RawDigitCharacterizationAlg.cxx
+++ b/icaruscode/TPC/SignalProcessing/RawDigitFilter/Algorithms/RawDigitCharacterizationAlg.cxx
@@ -4,6 +4,8 @@
 #include "art/Framework/Core/ModuleMacros.h"
 #include "messagefacility/MessageLogger/MessageLogger.h"
 
+#include <numeric> // std::accumulate and std::inner_product
+
 namespace caldata
 {
 //----------------------------------------------------------------------------
diff --git a/icaruscode/TPC/SignalProcessing/RawDigitFilter/Algorithms/RawDigitCorrelatedCorrectionAlg.cc b/icaruscode/TPC/SignalProcessing/RawDigitFilter/Algorithms/RawDigitCorrelatedCorrectionAlg.cc
index ff3ad54..00c0f60 100755
--- a/icaruscode/TPC/SignalProcessing/RawDigitFilter/Algorithms/RawDigitCorrelatedCorrectionAlg.cc
+++ b/icaruscode/TPC/SignalProcessing/RawDigitFilter/Algorithms/RawDigitCorrelatedCorrectionAlg.cc
@@ -12,6 +12,7 @@
 
 #include <cmath>
 #include <algorithm>
+#include <numeric> // std::accumulate and std::inner_product
 
 #include "TVirtualFFT.h"
 
diff --git a/icaruscode/TPC/SignalProcessing/RawDigitFilter/CMakeLists.txt b/icaruscode/TPC/SignalProcessing/RawDigitFilter/CMakeLists.txt
old mode 100755
new mode 100644
index 1c0c316..a778bd9
--- a/icaruscode/TPC/SignalProcessing/RawDigitFilter/CMakeLists.txt
+++ b/icaruscode/TPC/SignalProcessing/RawDigitFilter/CMakeLists.txt
@@ -2,46 +2,49 @@ add_subdirectory(Algorithms)
 
 add_definitions(-DEIGEN_FFTW_DEFAULT)
 
+include_directories(${FFTW3_INCLUDE_DIRS})
+
 art_make(
-          LIB_LIBRARIES 
-                        lardataobj_RawData
-                        lardataobj_RecoBase
-                        lardata_Utilities
-                        ${FHICLCPP}
-                        cetlib cetlib_except
-                        ${ROOT_BASIC_LIB_LIST}
-          MODULE_LIBRARIES
-                        larcorealg_Geometry
-                        icaruscode_TPC_SignalProcessing_RawDigitFilter_Algorithms
-                        larcore_Geometry_Geometry_service
-                        lardata_Utilities
-                        larevt_Filters
-                        lardataobj_RawData
-                        lardataalg_DetectorInfo
-                        larevt_CalibrationDBI_IOVData
-                        larevt_CalibrationDBI_Providers
-                        lardataobj_RecoBase
-                        lardata_ArtDataHelper
-                        icaruscode_TPC_Utilities_SignalShapingICARUSService_service
-                        ${ART_FRAMEWORK_CORE}
-                        ${ART_FRAMEWORK_PRINCIPAL}
-                        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                        ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                        ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                        art_Persistency_Common canvas
-                        art_Persistency_Provenance canvas
-                        art_Utilities canvas
-                        ${MF_MESSAGELOGGER}
-                        ${MF_UTILITIES}
-                        ${FHICLCPP}
-                        cetlib cetlib_except
-                        ${ROOT_GEOM}
-                        ${ROOT_XMLIO}
-                        ${ROOT_GDML}
-			${ROOT_FFTW}
-			${ROOT_BASIC_LIB_LIST}
+		LIB_LIBRARIES
+			lardataobj::RawData
+			lardataobj::RecoBase
+			lardata::Utilities
+			fhiclcpp::fhiclcpp
+			cetlib::cetlib cetlib_except::cetlib_except
+		MODULE_LIBRARIES
+			larcorealg::Geometry
+			icaruscode::TPC_SignalProcessing_RawDigitFilter_Algorithms
+			larcore::Geometry_Geometry_service
+			lardata::Utilities
+			larevt::Filters
+			lardataobj::RawData
+			lardataalg::DetectorInfo
+			larevt::CalibrationDBI_IOVData
+			larevt::CalibrationDBI_Providers
+			lardataobj::RecoBase
+			lardata::ArtDataHelper
+			icaruscode::TPC_Utilities_SignalShapingICARUSService_service
+			art::Framework_Core
+			art::Framework_Principal
+			art::Framework_Services_Registry
+			art_root_io::tfile_support ROOT::Core
+			art_root_io::TFileService_service
+			art::Persistency_Common
+			canvas::canvas
+			art::Persistency_Provenance
+			art::Utilities
+			messagefacility::MF_MessageLogger
+			messagefacility::headers
+			fhiclcpp::fhiclcpp
+			cetlib::cetlib cetlib_except::cetlib_except
+			ROOT::Geom
+			ROOT::XMLIO
+			ROOT::Gdml
+			ROOT::FFTW
+			ROOT::Core
+                        ROOT::Tree
 			${TBB}
-        )
+	)
 
 install_headers()
 install_fhicl()
diff --git a/icaruscode/TPC/SignalProcessing/RawDigitFilter/TPCNoiseMC_module.cc b/icaruscode/TPC/SignalProcessing/RawDigitFilter/TPCNoiseMC_module.cc
index a04a05e..c5d9e21 100644
--- a/icaruscode/TPC/SignalProcessing/RawDigitFilter/TPCNoiseMC_module.cc
+++ b/icaruscode/TPC/SignalProcessing/RawDigitFilter/TPCNoiseMC_module.cc
@@ -55,6 +55,7 @@
 #include <iostream>
 #include <fstream>
 #include <memory>
+#include <numeric> // std::accumulate
 
 namespace TPCNoiseMC {
   class TPCNoiseMC;
diff --git a/icaruscode/TPC/SignalProcessing/RawDigitFilter/TPCNoise_module.cc b/icaruscode/TPC/SignalProcessing/RawDigitFilter/TPCNoise_module.cc
index 7d976ab..1f12da0 100644
--- a/icaruscode/TPC/SignalProcessing/RawDigitFilter/TPCNoise_module.cc
+++ b/icaruscode/TPC/SignalProcessing/RawDigitFilter/TPCNoise_module.cc
@@ -55,6 +55,7 @@
 #include <iostream>
 #include <fstream>
 #include <memory>
+#include <numeric> // std::accumulate
 
 namespace tpcnoise {
   class TPCNoise;
diff --git a/icaruscode/TPC/SignalProcessing/RawDigitFilter/mtRawDigitFilterICARUS_module.cc b/icaruscode/TPC/SignalProcessing/RawDigitFilter/mtRawDigitFilterICARUS_module.cc
index 48f9fb5..a582f40 100755
--- a/icaruscode/TPC/SignalProcessing/RawDigitFilter/mtRawDigitFilterICARUS_module.cc
+++ b/icaruscode/TPC/SignalProcessing/RawDigitFilter/mtRawDigitFilterICARUS_module.cc
@@ -1,6 +1,7 @@
 #include <cmath>
 #include <algorithm>
 #include <vector>
+#include <numeric> // std::accumulate
 
 #include "tbb/parallel_for.h"
 #include "tbb/blocked_range.h"
diff --git a/icaruscode/TPC/SignalProcessing/RecoWire/CMakeLists.txt b/icaruscode/TPC/SignalProcessing/RecoWire/CMakeLists.txt
index 8d0f154..f339f1d 100644
--- a/icaruscode/TPC/SignalProcessing/RecoWire/CMakeLists.txt
+++ b/icaruscode/TPC/SignalProcessing/RecoWire/CMakeLists.txt
@@ -1,54 +1,54 @@
 if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
-cet_add_compiler_flags(CXX -Wno-maybe-uninitialized)
+	cet_add_compiler_flags(CXX -Wno-maybe-uninitialized)
 endif()
 
-# Add the subfolder containing the deconvolution tools
+#Add the subfolder containing the deconvolution tools
 add_subdirectory(DeconTools)
 add_subdirectory(ROITools)
 add_subdirectory(SimTestPulse)
 
 add_definitions(-DEIGEN_FFTW_DEFAULT)
+include_directories(${FFTW3_INCLUDE_DIRS})
 
-art_make( 
-          LIB_LIBRARIES 
-            lardataobj_RawData
-            lardataobj_RecoBase
-            lardata_Utilities
-            ${FHICLCPP}
-            ${CETLIB}
-            ${ROOT_BASIC_LIB_LIST}
-          MODULE_LIBRARIES 
-            icarus_signal_processing
-            icarus_signal_processing_Detection
-            icarus_signal_processing_Filters
-            larcorealg_Geometry
-            larcore_Geometry_Geometry_service
-            lardata_Utilities
-            lardataalg_DetectorInfo
-            larevt_Filters
-            lardataobj_RawData
-            larevt_CalibrationDBI_IOVData
-            larevt_CalibrationDBI_Providers
-            lardataobj_RecoBase
-            lardata_ArtDataHelper
-            icaruscode_TPC_Utilities_SignalShapingICARUSService_service
-            ${ART_FRAMEWORK_CORE}
-            ${ART_FRAMEWORK_PRINCIPAL}
-            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-            ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-            ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-            art_Persistency_Common
-            art_Persistency_Provenance
-            art_Utilities
-            canvas
-            ${MF_MESSAGELOGGER}
-            ${MF_UTILITIES}
-            ${FHICLCPP}
-            ${CETLIB}
-            ${ROOT_FFTW}
-            ${ROOT_BASIC_LIB_LIST}
-            ${TBB}
-        )
+art_make(
+		LIB_LIBRARIES
+			lardataobj::RawData
+			lardataobj::RecoBase
+			lardata::Utilities
+			fhiclcpp::fhiclcpp
+			cetlib::cetlib
+
+		MODULE_LIBRARIES
+			icarus_signal_processing::icarus_signal_processing
+			icarus_signal_processing::Detection
+			icarus_signal_processing::Filters
+			larcorealg::Geometry
+			larcore::Geometry_Geometry_service
+			lardata::Utilities
+			lardataalg::DetectorInfo
+			larevt::Filters
+			lardataobj::RawData
+			larevt::CalibrationDBI_IOVData
+			larevt::CalibrationDBI_Providers
+			lardataobj::RecoBase
+			lardata::ArtDataHelper
+			icaruscode::TPC_Utilities_SignalShapingICARUSService_service
+			art::Framework_Core
+			art::Framework_Principal
+			art::Framework_Services_Registry
+			art_root_io::tfile_support ROOT::Core
+			art_root_io::TFileService_service
+			art::Persistency_Common
+			art::Persistency_Provenance
+			art::Utilities
+			canvas::canvas
+			messagefacility::MF_MessageLogger
+			messagefacility::headers
+			fhiclcpp::fhiclcpp
+			cetlib::cetlib
+			ROOT::FFTW
+			${TBB}
+		)
 
 install_headers()
 install_fhicl()
diff --git a/icaruscode/TPC/SignalProcessing/RecoWire/DeconTools/BaselineStandard_tool.cc b/icaruscode/TPC/SignalProcessing/RecoWire/DeconTools/BaselineStandard_tool.cc
index 3e2dcbc..d940f55 100644
--- a/icaruscode/TPC/SignalProcessing/RecoWire/DeconTools/BaselineStandard_tool.cc
+++ b/icaruscode/TPC/SignalProcessing/RecoWire/DeconTools/BaselineStandard_tool.cc
@@ -15,6 +15,7 @@
 #include "TH1D.h"
 
 #include <fstream>
+#include <numeric> // std::accumulate
 
 namespace icarus_tool
 {
diff --git a/icaruscode/TPC/SignalProcessing/RecoWire/DeconTools/CMakeLists.txt b/icaruscode/TPC/SignalProcessing/RecoWire/DeconTools/CMakeLists.txt
index 6b7d4c3..50ff762 100644
--- a/icaruscode/TPC/SignalProcessing/RecoWire/DeconTools/CMakeLists.txt
+++ b/icaruscode/TPC/SignalProcessing/RecoWire/DeconTools/CMakeLists.txt
@@ -1,38 +1,39 @@
 cet_enable_asserts()
 
 add_definitions(-DEIGEN_FFTW_DEFAULT)
+include_directories(${FFTW3_INCLUDE_DIRS})
 
-art_make( 
-          TOOL_LIBRARIES  larcorealg_Geometry
-                          larevt_CalibrationDBI_IOVData
-                          larevt_CalibrationDBI_Providers
-                          lardataobj_RecoBase
-                          larcore_Geometry_Geometry_service
-                          lardata_Utilities
-                          lardataalg_DetectorInfo
-                          icaruscode_TPC_Utilities_SignalShapingICARUSService_service
-                          nurandom_RandomUtils_NuRandomService_service
-                          ${ART_FRAMEWORK_CORE}
-                          ${ART_FRAMEWORK_PRINCIPAL}
-                          ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                          art_Persistency_Common
-                          art_Persistency_Provenance
-                          ${ART_FRAMEWORK_SERVICES_BASIC}
-                          ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                          ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-                          ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                          ${ART_FRAMEWORK_SERVICES_SYSTEM_FILECATALOGMETADATA_SERVICE}
-                          art_Utilities
-                          canvas
-                          ${MF_MESSAGELOGGER}
-                          ${MF_UTILITIES}
-                          ${FHICLCPP}
-                          ${CETLIB}
-                          ${Boost_FILESYSTEM_LIBRARY}
-                          ${Boost_SYSTEM_LIBRARY}
-                          ${CLHEP}
-                          ${ROOT_BASIC_LIB_LIST}
-    )
+art_make(
+	TOOL_LIBRARIES
+			larcorealg::Geometry
+			larevt::CalibrationDBI_IOVData
+			larevt::CalibrationDBI_Providers
+			lardataobj::RecoBase
+			larcore::Geometry_Geometry_service
+			lardata::Utilities
+			lardataalg::DetectorInfo
+			icaruscode::TPC_Utilities_SignalShapingICARUSService_service
+			nurandom::RandomUtils_NuRandomService_service
+			art::Framework_Core
+			art::Framework_Principal
+			art::Framework_Services_Registry
+			art::Persistency_Common
+			art::Persistency_Provenance
+			icarus_signal_processing::icarus_signal_processing		
+			art_root_io::tfile_support ROOT::Core
+			art::Framework_Services_Optional_RandomNumberGenerator_service
+			art_root_io::TFileService_service
+			art::Framework_Services_System_FileCatalogMetadata_service
+			art::Utilities
+			canvas::canvas
+			messagefacility::MF_MessageLogger
+			messagefacility::headers
+			fhiclcpp::fhiclcpp
+			cetlib::cetlib
+			Boost::filesystem
+			Boost::system
+			CLHEP::Random
+)
 
 install_headers()
 install_source()
diff --git a/icaruscode/TPC/SignalProcessing/RecoWire/DeconTools/ROIFinderStandard_tool.cc b/icaruscode/TPC/SignalProcessing/RecoWire/DeconTools/ROIFinderStandard_tool.cc
index a828537..8b6f148 100644
--- a/icaruscode/TPC/SignalProcessing/RecoWire/DeconTools/ROIFinderStandard_tool.cc
+++ b/icaruscode/TPC/SignalProcessing/RecoWire/DeconTools/ROIFinderStandard_tool.cc
@@ -16,6 +16,7 @@
 #include "TH1D.h"
 
 #include <fstream>
+#include <numeric> // std::accumulate
 
 namespace icarus_tool
 {
diff --git a/icaruscode/TPC/SignalProcessing/RecoWire/ROITools/CMakeLists.txt b/icaruscode/TPC/SignalProcessing/RecoWire/ROITools/CMakeLists.txt
index 753cfd5..1ac9b4a 100644
--- a/icaruscode/TPC/SignalProcessing/RecoWire/ROITools/CMakeLists.txt
+++ b/icaruscode/TPC/SignalProcessing/RecoWire/ROITools/CMakeLists.txt
@@ -2,40 +2,40 @@ cet_enable_asserts()
 
 add_definitions(-DEIGEN_FFTW_DEFAULT)
 
-art_make( 
-          TOOL_LIBRARIES  larcorealg_Geometry
-                          icarus_signal_processing
-                          icarus_signal_processing_Detection
-                          icarus_signal_processing_Filters
-                          larevt_CalibrationDBI_IOVData
-                          larevt_CalibrationDBI_Providers
-                          lardataobj_RecoBase
-                          larcore_Geometry_Geometry_service
-                          lardata_Utilities
-                          lardataalg_DetectorInfo
-                          icaruscode_TPC_Utilities_SignalShapingICARUSService_service
-                          nurandom_RandomUtils_NuRandomService_service
-                          ${ART_FRAMEWORK_CORE}
-                          ${ART_FRAMEWORK_PRINCIPAL}
-                          ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                          art_Persistency_Common
-                          art_Persistency_Provenance
-                          ${ART_FRAMEWORK_SERVICES_BASIC}
-                          ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                          ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-                          ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                          ${ART_FRAMEWORK_SERVICES_SYSTEM_FILECATALOGMETADATA_SERVICE}
-                          art_Utilities
-                          canvas
-                          ${MF_MESSAGELOGGER}
-                          ${MF_UTILITIES}
-                          ${FHICLCPP}
-                          ${CETLIB}
-                          ${Boost_FILESYSTEM_LIBRARY}
-                          ${Boost_SYSTEM_LIBRARY}
-                          ${CLHEP}
-                          ${ROOT_BASIC_LIB_LIST}
-    )
+art_make(
+	TOOL_LIBRARIES
+		larcorealg::Geometry
+		icarus_signal_processing::icarus_signal_processing
+		icarus_signal_processing::Detection
+		icarus_signal_processing::Filters
+		larevt::CalibrationDBI_IOVData
+		larevt::CalibrationDBI_Providers
+		lardataobj::RecoBase
+		larcore::Geometry_Geometry_service
+		lardata::Utilities
+		lardataalg::DetectorInfo
+		icaruscode::TPC_Utilities_SignalShapingICARUSService_service
+		nurandom::RandomUtils_NuRandomService_service
+		art::Framework_Core
+		art::Framework_Principal
+		art::Framework_Services_Registry
+		art::Persistency_Common
+		art::Persistency_Provenance
+		
+		art_root_io::tfile_support ROOT::Core
+		art::Framework_Services_Optional_RandomNumberGenerator_service
+		art_root_io::TFileService_service
+		art::Framework_Services_System_FileCatalogMetadata_service
+		art::Utilities
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib
+		Boost::filesystem
+		Boost::system
+		CLHEP::Random
+)
 
 install_headers()
 install_source()
diff --git a/icaruscode/TPC/SignalProcessing/RecoWire/RecoWireROI_module.cc b/icaruscode/TPC/SignalProcessing/RecoWire/RecoWireROI_module.cc
index 440f2dc..f47c523 100644
--- a/icaruscode/TPC/SignalProcessing/RecoWire/RecoWireROI_module.cc
+++ b/icaruscode/TPC/SignalProcessing/RecoWire/RecoWireROI_module.cc
@@ -30,11 +30,10 @@
 #include "canvas/Persistency/Common/Ptr.h" 
 #include "canvas/Persistency/Common/PtrVector.h" 
 #include "art/Framework/Services/Registry/ServiceHandle.h" 
+#include "art/Framework/Services/Registry/ServiceDefinitionMacros.h"
 #include "art_root_io/TFileService.h" 
 #include "canvas/Utilities/Exception.h"
 
-#include "art/Framework/Services/Registry/ServiceMacros.h"
-
 // LArSoft libraries
 #include "larcoreobj/SimpleTypesAndConstants/RawTypes.h" // raw::ChannelID_t
 #include "larcore/Geometry/Geometry.h"
diff --git a/icaruscode/TPC/SignalProcessing/RecoWire/SimTestPulse/CMakeLists.txt b/icaruscode/TPC/SignalProcessing/RecoWire/SimTestPulse/CMakeLists.txt
index 7de0b72..38733c7 100644
--- a/icaruscode/TPC/SignalProcessing/RecoWire/SimTestPulse/CMakeLists.txt
+++ b/icaruscode/TPC/SignalProcessing/RecoWire/SimTestPulse/CMakeLists.txt
@@ -1,49 +1,48 @@
 
 
-art_make(   LIB_LIBRARIES
-                lardataobj_RawData
-                lardataobj_RecoBase
-                lardata_Utilities
-                ${FHICLCPP}
-                ${CETLIB}
-                ${ROOT_BASIC_LIB_LIST}
-            MODULE_LIBRARIES
-                icaruscode_TPC_SignalProcessing_RecoWire_SimTestPulse
-                icaruscode_TPC_Utilities_SignalShapingICARUSService_service
-                lardata_Utilities
-                lardata_DetectorInfoServices_DetectorClocksServiceStandard_service
-                lardataobj_Simulation
-                larcoreobj_SummaryData
-                larcorealg_Geometry
-                larevt_CalibrationDBI_IOVData
-                larevt_CalibrationDBI_Providers
-                larreco_HitFinder
-                lardataobj_RecoBase
-                larcorealg_Geometry
-                larcore_Geometry_Geometry_service
-                lardata_Utilities
-                nurandom_RandomUtils_NuRandomService_service
-                lardata_Utilities
-                lardataobj_RawData
-                larevt_CalibrationDBI_IOVData
-                larevt_CalibrationDBI_Providers
-                lardataobj_RecoBase
-                lardata_ArtDataHelper
-                ${ART_FRAMEWORK_CORE}
-                ${ART_FRAMEWORK_PRINCIPAL}
-                ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                art_Persistency_Common
-                art_Persistency_Provenance
-                art_Utilities
-                canvas
-                ${MF_MESSAGELOGGER}
-                ${MF_UTILITIES}
-                ${FHICLCPP}
-                ${CETLIB}
-                ${ROOT_FFTW}
-                ${ROOT_BASIC_LIB_LIST}
+art_make(	LIB_LIBRARIES
+			lardataobj::RawData
+			lardataobj::RecoBase
+			lardata::Utilities
+			fhiclcpp::fhiclcpp
+			cetlib::cetlib
+
+		MODULE_LIBRARIES
+			icaruscode::TPC_SignalProcessing_RecoWire_SimTestPulse
+			icaruscode::TPC_Utilities_SignalShapingICARUSService_service
+			lardata::Utilities
+			lardata::DetectorInfoServices_DetectorClocksServiceStandard_service
+			lardataobj::Simulation
+			larcoreobj::SummaryData
+			larcorealg::Geometry
+			larevt::CalibrationDBI_IOVData
+			larevt::CalibrationDBI_Providers
+			larreco::HitFinder
+			lardataobj::RecoBase
+			larcorealg::Geometry
+			larcore::Geometry_Geometry_service
+			lardata::Utilities
+			nurandom::RandomUtils_NuRandomService_service
+			lardata::Utilities
+			lardataobj::RawData
+			larevt::CalibrationDBI_IOVData
+			larevt::CalibrationDBI_Providers
+			lardataobj::RecoBase
+			lardata::ArtDataHelper
+			art::Framework_Core
+			art::Framework_Principal
+			art::Framework_Services_Registry
+			art_root_io::tfile_support ROOT::Core
+			art_root_io::TFileService_service
+			art::Persistency_Common
+			art::Persistency_Provenance
+			art::Utilities
+			canvas::canvas
+			messagefacility::MF_MessageLogger
+			messagefacility::headers
+			fhiclcpp::fhiclcpp
+			cetlib::cetlib
+			ROOT::FFTW
 )
 
 install_fhicl()
diff --git a/icaruscode/TPC/Simulation/CMakeLists.txt b/icaruscode/TPC/Simulation/CMakeLists.txt
index 8d9dc79..082951a 100644
--- a/icaruscode/TPC/Simulation/CMakeLists.txt
+++ b/icaruscode/TPC/Simulation/CMakeLists.txt
@@ -1,5 +1,5 @@
 
-set( IFDH_ART_DIR $ENV{IFDH_ART_DIR} )
+set(IFDH_ART_DIR$ENV{IFDH_ART_DIR})
 
 add_subdirectory(DetSim)
 add_subdirectory(Overlay)
diff --git a/icaruscode/TPC/Simulation/DetSim/CMakeLists.txt b/icaruscode/TPC/Simulation/DetSim/CMakeLists.txt
index ef74511..a2a37d4 100644
--- a/icaruscode/TPC/Simulation/DetSim/CMakeLists.txt
+++ b/icaruscode/TPC/Simulation/DetSim/CMakeLists.txt
@@ -1,72 +1,76 @@
 add_subdirectory(tools)
 
 add_definitions(-DEIGEN_FFTW_DEFAULT)
-
-art_make( 
-          EXCLUDE SimWireICARUS_module.cc 
-          MODULE_LIBRARIES larcorealg_Geometry
-                           larcore_Geometry_Geometry_service
-                           larsim_Simulation 
-                           nug4_ParticleNavigation lardataobj_Simulation
-                           lardata_Utilities
-                           larevt_Filters
-                           lardataobj_RawData
-                           icaruscode_TPC_Utilities_SignalShapingICARUSService_service
-		           larevt_CalibrationDBI_Providers
-                           nurandom_RandomUtils_NuRandomService_service
-                           ${ART_FRAMEWORK_CORE}
-                           ${ART_FRAMEWORK_PRINCIPAL}
-                           ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                           ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                           ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-                           ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                           art_Persistency_Common
-                           art_Persistency_Provenance
-                           art_Utilities
-			   canvas
-                           ${MF_MESSAGELOGGER}
-                           ${MF_UTILITIES}
-                           ${FHICLCPP}
-                           ${CETLIB}
-                           ${CLHEP}
-                           ${ROOT_GEOM}
-                           ${ROOT_XMLIO}
-                           ${ROOT_GDML}
-                           ${ROOT_BASIC_LIB_LIST}
-        )
+include_directories(${FFTW3_INCLUDE_DIRS})
+art_make(
+	EXCLUDE
+		SimWireICARUS_module.cc
+	MODULE_LIBRARIES 
+		larcorealg::Geometry
+		larcore::Geometry_Geometry_service
+		larsim::Simulation
+		nug4::ParticleNavigation
+		lardataobj::Simulation
+		lardata::Utilities
+		larevt::Filters
+		lardataobj::RawData
+		icarus_signal_processing::icarus_signal_processing
+		icaruscode::TPC_Utilities_SignalShapingICARUSService_service
+		larevt::CalibrationDBI_Providers
+		nurandom::RandomUtils_NuRandomService_service
+		art::Framework_Core
+		art::Framework_Principal
+		art::Framework_Services_Registry
+		art_root_io::tfile_support ROOT::Core
+		art::Framework_Services_Optional_RandomNumberGenerator_service
+		art_root_io::TFileService_service
+		art::Persistency_Common
+		art::Persistency_Provenance
+		art::Utilities
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib
+		CLHEP::Random
+		ROOT::Geom
+		ROOT::XMLIO
+		ROOT::Gdml
+		)
 
 simple_plugin(SimWireICARUS "module"
-                           larcorealg_Geometry
-                           larcore_Geometry_Geometry_service
-                           larsim_Simulation 
-                           nug4_ParticleNavigation lardataobj_Simulation
-                           lardata_Utilities
-                           lardataalg_DetectorInfo
-                           larevt_Filters
-                           lardataobj_RawData
-                           icaruscode_TPC_Utilities_SignalShapingICARUSService_service
-                           larevt_CalibrationDBI_Providers
-                           nurandom_RandomUtils_NuRandomService_service
-                           ${ART_FRAMEWORK_CORE}
-                           ${ART_FRAMEWORK_PRINCIPAL}
-                           ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                           ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                           ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-                           ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                           art_Persistency_Common
-                           art_Persistency_Provenance
-                           art_Utilities
-	                   canvas
-                           ${MF_MESSAGELOGGER}
-                           ${MF_UTILITIES}
-                           ${FHICLCPP}
-                           ${CETLIB}
-                           ${CLHEP}
-                           ${ROOT_GEOM}
-                           ${ROOT_XMLIO}
-                           ${ROOT_GDML}
-                           ${ROOT_BASIC_LIB_LIST}
-        )
+		larcorealg::Geometry
+		larcore::Geometry_Geometry_service
+		larsim::Simulation
+		nug4::ParticleNavigation
+                lardataobj::Simulation
+		lardata::Utilities
+		lardataalg::DetectorInfo
+		larevt::Filters
+		lardataobj::RawData
+		icaruscode::TPC_Utilities_SignalShapingICARUSService_service
+		icarus_signal_processing::icarus_signal_processing
+		larevt::CalibrationDBI_Providers
+		nurandom::RandomUtils_NuRandomService_service
+		art::Framework_Core
+		art::Framework_Principal
+		art::Framework_Services_Registry
+		art_root_io::tfile_support ROOT::Core
+		art::Framework_Services_Optional_RandomNumberGenerator_service
+		art_root_io::TFileService_service
+		art::Persistency_Common
+		art::Persistency_Provenance
+		art::Utilities
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib
+		CLHEP::Random
+		ROOT::Geom
+		ROOT::XMLIO
+		ROOT::Gdml
+		)
 
 #install_headers()
 install_fhicl()
diff --git a/icaruscode/TPC/Simulation/DetSim/tools/CMakeLists.txt b/icaruscode/TPC/Simulation/DetSim/tools/CMakeLists.txt
index 3180b9e..d277f70 100644
--- a/icaruscode/TPC/Simulation/DetSim/tools/CMakeLists.txt
+++ b/icaruscode/TPC/Simulation/DetSim/tools/CMakeLists.txt
@@ -1,39 +1,41 @@
 cet_enable_asserts()
+include_directories(${FFTW3_INCLUDE_DIRS})
 
 add_definitions(-DEIGEN_FFTW_DEFAULT)
 
-art_make( 
-          TOOL_LIBRARIES  larcorealg_Geometry
-			              larevt_CalibrationDBI_IOVData
-			              larevt_CalibrationDBI_Providers
-			              larreco_HitFinder
-			              lardataobj_RecoBase
-			              larcore_Geometry_Geometry_service
-			              lardata_Utilities
-                                      lardataalg_DetectorInfo
-			              nurandom_RandomUtils_NuRandomService_service
-                          ${ICARUS_FFTW_LIBRARIES}
-  			              ${ART_FRAMEWORK_CORE}
-			              ${ART_FRAMEWORK_PRINCIPAL}
-			              ${ART_FRAMEWORK_SERVICES_REGISTRY}
-			              art_Persistency_Common
-			              art_Persistency_Provenance
-			              ${ART_FRAMEWORK_SERVICES_BASIC}
-			              ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                          ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-			              ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-			              ${ART_FRAMEWORK_SERVICES_SYSTEM_FILECATALOGMETADATA_SERVICE}
-			              art_Utilities
-			              canvas
-			              ${MF_MESSAGELOGGER}
-			              ${MF_UTILITIES}
-			              ${FHICLCPP}
-			              ${CETLIB}
-			              ${Boost_FILESYSTEM_LIBRARY}
-			              ${Boost_SYSTEM_LIBRARY}
-                          ${CLHEP}
-			              ${ROOT_BASIC_LIB_LIST}
-    )
+art_make(
+		TOOL_LIBRARIES
+			larcorealg::Geometry
+			larevt::CalibrationDBI_IOVData
+			larevt::CalibrationDBI_Providers
+			larreco::HitFinder
+			lardataobj::RecoBase
+			larcore::Geometry_Geometry_service
+			lardata::Utilities
+			lardataalg::DetectorInfo
+			nurandom::RandomUtils_NuRandomService_service
+			${ICARUS_FFTW_LIBRARIES}
+			art::Framework_Core
+			art::Framework_Principal
+			art::Framework_Services_Registry
+			art::Persistency_Common
+			art::Persistency_Provenance
+			icarus_signal_processing::icarus_signal_processing	
+			art_root_io::tfile_support ROOT::Core
+			art::Framework_Services_Optional_RandomNumberGenerator_service
+			art_root_io::TFileService_service
+			art::Framework_Services_System_FileCatalogMetadata_service
+			art::Utilities
+			canvas::canvas
+			messagefacility::MF_MessageLogger
+			messagefacility::headers
+			fhiclcpp::fhiclcpp
+			cetlib::cetlib
+			Boost::filesystem
+			Boost::system
+			CLHEP::Random
+                        Eigen3::Eigen
+)
 
 install_headers()
 install_source()
diff --git a/icaruscode/TPC/Simulation/Overlay/CMakeLists.txt b/icaruscode/TPC/Simulation/Overlay/CMakeLists.txt
index ebb83c1..c8beca7 100644
--- a/icaruscode/TPC/Simulation/Overlay/CMakeLists.txt
+++ b/icaruscode/TPC/Simulation/Overlay/CMakeLists.txt
@@ -1,37 +1,41 @@
 add_subdirectory(tools)
 
-art_make( 
-          MODULE_LIBRARIES larcorealg_Geometry
-                           larcore_Geometry_Geometry_service
-                           larsim_Simulation 
-                           nug4_ParticleNavigation lardataobj_Simulation
-                           lardata_Utilities
-                           larevt_Filters
-                           lardataobj_RawData
-                           lardataalg_DetectorInfo
-                           icaruscode_TPC_Utilities_SignalShapingICARUSService_service
-		           larevt_CalibrationDBI_Providers
-                           nurandom_RandomUtils_NuRandomService_service
-                           ${ART_FRAMEWORK_CORE}
-                           ${ART_FRAMEWORK_PRINCIPAL}
-                           ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                           ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                           ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-                           ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                           art_Persistency_Common
-                           art_Persistency_Provenance
-                           art_Utilities
-			   canvas
-                           ${MF_MESSAGELOGGER}
-                           ${MF_UTILITIES}
-                           ${FHICLCPP}
-                           ${CETLIB}
-                           ${CLHEP}
-                           ${ROOT_GEOM}
-                           ${ROOT_XMLIO}
-                           ${ROOT_GDML}
-                           ${ROOT_BASIC_LIB_LIST}
-        )
+include_directories(${FFTW3_INCLUDE_DIRS})
+
+art_make(
+	MODULE_LIBRARIES
+		larcorealg::Geometry
+		larcore::Geometry_Geometry_service
+		larsim::Simulation
+		nug4::ParticleNavigation
+		lardataobj::Simulation
+		lardata::Utilities
+		larevt::Filters
+		lardataobj::RawData
+		lardataalg::DetectorInfo
+                icarus_signal_processing::icarus_signal_processing
+		icaruscode_TPC_Utilities_SignalShapingICARUSService_service
+		larevt::CalibrationDBI_Providers
+		nurandom::RandomUtils_NuRandomService_service
+		art::Framework_Core
+		art::Framework_Principal
+		art::Framework_Services_Registry
+		art_root_io::tfile_support ROOT::Core
+		art::Framework_Services_Optional_RandomNumberGenerator_service
+		art_root_io::TFileService_service
+		art::Persistency_Common
+		art::Persistency_Provenance
+		art::Utilities
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib
+		CLHEP::Random
+		ROOT::Geom
+		ROOT::XMLIO
+		ROOT::Gdml
+	)
 
 #install_headers()
 install_fhicl()
diff --git a/icaruscode/TPC/Simulation/Overlay/tools/CMakeLists.txt b/icaruscode/TPC/Simulation/Overlay/tools/CMakeLists.txt
index 9ac8513..99d9320 100644
--- a/icaruscode/TPC/Simulation/Overlay/tools/CMakeLists.txt
+++ b/icaruscode/TPC/Simulation/Overlay/tools/CMakeLists.txt
@@ -1,37 +1,39 @@
 cet_enable_asserts()
+include_directories(${FFTW3_INCLUDE_DIRS})
 
-art_make( 
-          TOOL_LIBRARIES  larcorealg_Geometry
-			              larevt_CalibrationDBI_IOVData
-			              larevt_CalibrationDBI_Providers
-			              larreco_HitFinder
-			              lardataobj_RecoBase
-			              larcore_Geometry_Geometry_service
-			              lardata_Utilities
-                                      lardataalg_DetectorInfo
-			              nurandom_RandomUtils_NuRandomService_service
-                          ${ICARUS_FFTW_LIBRARIES}
-  			              ${ART_FRAMEWORK_CORE}
-			              ${ART_FRAMEWORK_PRINCIPAL}
-			              ${ART_FRAMEWORK_SERVICES_REGISTRY}
-			              art_Persistency_Common
-			              art_Persistency_Provenance
-			              ${ART_FRAMEWORK_SERVICES_BASIC}
-			              ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                          ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-			              ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-			              ${ART_FRAMEWORK_SERVICES_SYSTEM_FILECATALOGMETADATA_SERVICE}
-			              art_Utilities
-			              canvas
-			              ${MF_MESSAGELOGGER}
-			              ${MF_UTILITIES}
-			              ${FHICLCPP}
-			              ${CETLIB}
-			              ${Boost_FILESYSTEM_LIBRARY}
-			              ${Boost_SYSTEM_LIBRARY}
-                          ${CLHEP}
-			              ${ROOT_BASIC_LIB_LIST}
-    )
+art_make(
+	TOOL_LIBRARIES
+			larcorealg::Geometry
+			larevt::CalibrationDBI_IOVData
+			larevt::CalibrationDBI_Providers
+			larreco::HitFinder
+			lardataobj::RecoBase
+			larcore::Geometry_Geometry_service
+			lardata::Utilities
+			lardataalg::DetectorInfo
+			nurandom::RandomUtils_NuRandomService_service
+			${ICARUS_FFTW_LIBRARIES}
+			art::Framework_Core
+			art::Framework_Principal
+			art::Framework_Services_Registry
+			art::Persistency_Common
+			art::Persistency_Provenance
+			icarus_signal_processing::icarus_signal_processing		
+			art_root_io::tfile_support ROOT::Core
+			art::Framework_Services_Optional_RandomNumberGenerator_service
+			art_root_io::TFileService_service
+			art::Framework_Services_System_FileCatalogMetadata_service
+			art::Utilities
+			canvas::canvas
+			messagefacility::MF_MessageLogger
+			messagefacility::headers
+			fhiclcpp::fhiclcpp
+			cetlib::cetlib
+			Boost::filesystem
+			Boost::system
+			CLHEP::Random
+			Eigen3::Eigen
+	)
 
 install_headers()
 install_source()
diff --git a/icaruscode/TPC/Simulation/SpaceCharge/CMakeLists.txt b/icaruscode/TPC/Simulation/SpaceCharge/CMakeLists.txt
index 1ea5184..899e2c0 100644
--- a/icaruscode/TPC/Simulation/SpaceCharge/CMakeLists.txt
+++ b/icaruscode/TPC/Simulation/SpaceCharge/CMakeLists.txt
@@ -1,26 +1,26 @@
-art_make( NO_PLUGINS
-          LIB_LIBRARIES
-	      lardataobj_RecoBase
-          lardata_Utilities
-	      lardataalg_DetectorInfo
-	      larevt_SpaceCharge	
-	      larcorealg_Geometry
-          ${MF_MESSAGELOGGER}
-          cetlib cetlib_except
-	      ${ART_FRAMEWORK_CORE}
-	      ${ART_FRAMEWORK_PRINCIPAL}
-	      ${ART_FRAMEWORK_SERVICES_REGISTRY}
-	      ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-          ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-          ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-          art_Persistency_Common canvas
-          art_Persistency_Provenance canvas
-          art_Utilities canvas
-	 
-	 ${FHICLCPP}
-         ${ROOT_BASIC_LIB_LIST}
-	 ${Boost_SYSTEM_LIBRARY}
-        )
+art_make(NO_PLUGINS
+	LIB_LIBRARIES
+		lardataobj::RecoBase
+		lardata::Utilities
+		lardataalg::DetectorInfo
+		larevt::SpaceCharge	
+		larcorealg::Geometry
+                larsim::MCCheater_BackTracker
+                larcore::Geometry_Geometry_service
+		messagefacility::MF_MessageLogger
+		cetlib::cetlib cetlib_except::cetlib_except
+		art::Framework_Core
+		art::Framework_Principal
+		art::Framework_Services_Registry
+		art_root_io::tfile_support ROOT::Core
+		art::Framework_Services_Optional_RandomNumberGenerator_service
+		art_root_io::TFileService_service
+		art::Persistency_Common canvas::canvas
+		art::Persistency_Provenance
+		art::Utilities
+		fhiclcpp::fhiclcpp
+		Boost::system
+	)
 install_headers()
 install_fhicl()
 install_source()
diff --git a/icaruscode/TPC/Simulation/SpaceChargeServices/CMakeLists.txt b/icaruscode/TPC/Simulation/SpaceChargeServices/CMakeLists.txt
index 1271e0a..40b1f93 100644
--- a/icaruscode/TPC/Simulation/SpaceChargeServices/CMakeLists.txt
+++ b/icaruscode/TPC/Simulation/SpaceChargeServices/CMakeLists.txt
@@ -1,20 +1,17 @@
 simple_plugin(SpaceChargeServiceICARUS "service"
-	icaruscode_TPC_Simulation_SpaceCharge
-	lardataalg_DetectorInfo
-	${ART_FRAMEWORK_CORE}
-	${ART_FRAMEWORK_PRINCIPAL}
-	${ART_FRAMEWORK_SERVICES_REGISTRY}
-	art_Persistency_Common canvas
-	art_Persistency_Provenance canvas
-	${ART_FRAMEWORK_SERVICES_BASIC}
-	${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-	${ART_ROOT_IO_TFILESERVICE_SERVICE}
-	${ART_FRAMEWORK_SERVICES_SYSTEM_FILECATALOGMETADATA_SERVICE}
-	art_Utilities canvas
-	${MF_MESSAGELOGGER}
-										      
-  	cetlib cetlib_except
-   	${ROOT_BASIC_LIB_LIST}
+	icaruscode::TPC_Simulation_SpaceCharge
+	lardataalg::DetectorInfo
+	art::Framework_Core
+	art::Framework_Principal
+	art::Framework_Services_Registry
+	art::Persistency_Common
+	art::Persistency_Provenance
+	art_root_io::tfile_support ROOT::Core
+	art_root_io::TFileService_service
+	art::Framework_Services_System_FileCatalogMetadata_service
+	art::Utilities canvas::canvas
+	messagefacility::MF_MessageLogger								
+	cetlib::cetlib cetlib_except::cetlib_except
 )
 install_headers()
 install_fhicl()
diff --git a/icaruscode/TPC/Simulation/SpaceChargeServices/SpaceChargeServiceICARUS.h b/icaruscode/TPC/Simulation/SpaceChargeServices/SpaceChargeServiceICARUS.h
index 9ad8f65..c5191cb 100644
--- a/icaruscode/TPC/Simulation/SpaceChargeServices/SpaceChargeServiceICARUS.h
+++ b/icaruscode/TPC/Simulation/SpaceChargeServices/SpaceChargeServiceICARUS.h
@@ -4,7 +4,7 @@
 #include "fhiclcpp/ParameterSet.h"
 #include "art/Framework/Services/Registry/ActivityRegistry.h"
 #include "art/Framework/Services/Registry/ServiceHandle.h"
-#include "art/Framework/Services/Registry/ServiceMacros.h"
+#include "art/Framework/Services/Registry/ServiceDeclarationMacros.h"
 #include "art/Framework/Principal/Run.h"
 #include "icaruscode/TPC/Simulation/SpaceCharge/SpaceChargeICARUS.h"
 #include "larevt/SpaceChargeServices/SpaceChargeService.h"
diff --git a/icaruscode/TPC/Simulation/SpaceChargeServices/SpaceChargeServiceICARUS_service.cc b/icaruscode/TPC/Simulation/SpaceChargeServices/SpaceChargeServiceICARUS_service.cc
index 671a21c..fc1fb8b 100644
--- a/icaruscode/TPC/Simulation/SpaceChargeServices/SpaceChargeServiceICARUS_service.cc
+++ b/icaruscode/TPC/Simulation/SpaceChargeServices/SpaceChargeServiceICARUS_service.cc
@@ -14,6 +14,7 @@
 #include "TMath.h"
 
 // Framework includes                                                                     
+#include "art/Framework/Services/Registry/ServiceDefinitionMacros.h"
 #include "messagefacility/MessageLogger/MessageLogger.h"
 #include "cetlib_except/exception.h"
 
diff --git a/icaruscode/TPC/Tracking/CMakeLists.txt b/icaruscode/TPC/Tracking/CMakeLists.txt
index 1a15d9c..2ff137d 100644
--- a/icaruscode/TPC/Tracking/CMakeLists.txt
+++ b/icaruscode/TPC/Tracking/CMakeLists.txt
@@ -1,5 +1,5 @@
 
-set( IFDH_ART_DIR $ENV{IFDH_ART_DIR} )
+set(IFDH_ART_DIR$ENV{IFDH_ART_DIR})
 
 add_subdirectory(ICARUSPandora)
 add_subdirectory(MCS)
diff --git a/icaruscode/TPC/Tracking/ICARUSPandora/CMakeLists.txt b/icaruscode/TPC/Tracking/ICARUSPandora/CMakeLists.txt
index 687f653..13e99bb 100644
--- a/icaruscode/TPC/Tracking/ICARUSPandora/CMakeLists.txt
+++ b/icaruscode/TPC/Tracking/ICARUSPandora/CMakeLists.txt
@@ -1,5 +1,5 @@
 
-# where should the scripts/..xml file be installed?  Perhaps in bin?
+#whereshouldthescripts/..xmlfilebeinstalled?Perhapsinbin?
 
 install_fhicl()
 
diff --git a/icaruscode/TPC/Tracking/ICARUSPandora/scripts/CMakeLists.txt b/icaruscode/TPC/Tracking/ICARUSPandora/scripts/CMakeLists.txt
index 2cfc412..7e15f7a 100644
--- a/icaruscode/TPC/Tracking/ICARUSPandora/scripts/CMakeLists.txt
+++ b/icaruscode/TPC/Tracking/ICARUSPandora/scripts/CMakeLists.txt
@@ -1,7 +1,7 @@
 
-# The xml files here are used to initialize pandora
-# They need to be found via FW_SEARCH_PATH
+#Thexmlfileshereareusedtoinitializepandora
+#TheyneedtobefoundviaFW_SEARCH_PATH
 
-# install xml files
-file(GLOB xml_file *.xml)
-install_fw(LIST ${xml_file})
+#installxmlfiles
+file(GLOB xml_file*.xml)
+install_fw(LIST${xml_file})
diff --git a/icaruscode/TPC/Tracking/MCS/CMakeLists.txt b/icaruscode/TPC/Tracking/MCS/CMakeLists.txt
index 3a93ab4..1128ecf 100644
--- a/icaruscode/TPC/Tracking/MCS/CMakeLists.txt
+++ b/icaruscode/TPC/Tracking/MCS/CMakeLists.txt
@@ -1,97 +1,98 @@
 
-art_make( 
-             LIB_LIBRARIES    larsim_MCCheater_BackTrackerService_service
-                              larsim_MCCheater_ParticleInventoryService_service
-                              lardataobj_RecoBase
-                              lardata_ArtDataHelper
-                              larsim_Simulation 
-                              nug4_ParticleNavigation lardataobj_Simulation
-                              larevt_Filters
-                              larcorealg_Geometry
-                              larcore_Geometry_Geometry_service
-                              lardata_RecoObjects
-                              lardataobj_AnalysisBase
-                              larreco_Calorimetry
-                              lardata_Utilities
-                              larreco_RecoAlg_ClusterRecoUtil
-                              larreco_RecoAlg_CMTool_CMToolBase
-                              larreco_RecoAlg_CMTool_CMTAlgMerge
-                              larreco_RecoAlg_CMTool_CMTAlgPriority
-                              larreco_RecoAlg_CMTool_CMTAlgMatch
-                              larreco_RecoAlg_CMTool_CMToolApp
-                              ${ROOT_MATHCORE}
-                              ${ROOT_GENVECTOR}
-                              ${ROOT_GEOM}
-                              ${ROOT_BASIC_LIB_LIST}
-                              larreco_RecoAlg_TCAlg
-                              larreco_RecoAlg_ImagePatternAlgs_DataProvider
-                              larreco_RecoAlg_PMAlg
-                              nusimdata_SimulationBase
-                              ${ART_FRAMEWORK_CORE}
-                              ${ART_FRAMEWORK_PRINCIPAL}
-                              ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                              ${ART_FRAMEWORK_SERVICES_BASIC}
-                              ${ART_FRAMEWORK_SERVICES_OPTIONAL}
-                              ${ART_FRAMEWORK_SERVICES_OPTIONAL_TFILESERVICE_SERVICE}
-                              ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-                              art_Persistency_Common
-                              art_Persistency_Provenance
-                              art_Utilities
-                              canvas
-                              ${MF_MESSAGELOGGER}
-                              ${FHICLCPP}
-                              cetlib cetlib_except
-                              ${CLHEP}
-                              ${ROOT_BASIC_LIB_LIST}
-                              ${ROOT_MINUIT}
-                              ${ROOT_MINUIT2}
-             MODULE_LIBRARIES icaruscode_TPC_Tracking_MCS
-                              larsim_MCCheater_BackTrackerService_service
-                              larsim_MCCheater_ParticleInventoryService_service
-                              lardataobj_RecoBase
-                              lardata_ArtDataHelper
-                              larsim_Simulation 
-                              nug4_ParticleNavigation lardataobj_Simulation
-                              larevt_Filters
-                              larcorealg_Geometry
-                              larcore_Geometry_Geometry_service
-                              lardata_RecoObjects
-                              lardataobj_AnalysisBase
-                              larreco_Calorimetry
-                              lardata_Utilities
-                              larreco_RecoAlg_ClusterRecoUtil
-                              larreco_RecoAlg_CMTool_CMToolBase
-                              larreco_RecoAlg_CMTool_CMTAlgMerge
-                              larreco_RecoAlg_CMTool_CMTAlgPriority
-                              larreco_RecoAlg_CMTool_CMTAlgMatch
-                              larreco_RecoAlg_CMTool_CMToolApp
-                              ${ROOT_MATHCORE}
-                              ${ROOT_GENVECTOR}
-                              ${ROOT_GEOM}
-                              ${ROOT_BASIC_LIB_LIST}
-                              larreco_RecoAlg_TCAlg
-                              larreco_RecoAlg_ImagePatternAlgs_DataProvider
-                              larreco_RecoAlg_PMAlg
-                              nusimdata_SimulationBase
-                              ${ART_FRAMEWORK_CORE}
-                              ${ART_FRAMEWORK_PRINCIPAL}
-                              ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                              ${ART_FRAMEWORK_SERVICES_BASIC}
-                              ${ART_FRAMEWORK_SERVICES_OPTIONAL}
-                              ${ART_FRAMEWORK_SERVICES_OPTIONAL_TFILESERVICE_SERVICE}
-                              ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-                              art_Persistency_Common
-                              art_Persistency_Provenance
-                              art_Utilities
-                              canvas
-                              ${MF_MESSAGELOGGER}
-                              ${FHICLCPP}
-                              cetlib cetlib_except
-                              ${CLHEP}
-                              ${ROOT_BASIC_LIB_LIST}
-                              ${ROOT_MINUIT}
-                              ${ROOT_MINUIT2}
-        )
+art_make(
+	LIB_LIBRARIES
+		larsim::MCCheater_BackTrackerService_service
+		larsim::MCCheater_ParticleInventoryService_service
+		lardataobj::RecoBase
+		lardata::ArtDataHelper
+		larsim::Simulation
+		nug4::ParticleNavigation
+		lardataobj::Simulation
+		larevt::Filters
+		larcorealg::Geometry
+		larcore::Geometry_Geometry_service
+		lardata::RecoObjects
+		lardataobj::AnalysisBase
+		larreco::Calorimetry
+		lardata::Utilities
+		larreco::RecoAlg_ClusterRecoUtil
+		larreco::RecoAlg_CMTool_CMToolBase
+		larreco::RecoAlg_CMTool_CMTAlgMerge
+		larreco::RecoAlg_CMTool_CMTAlgPriority
+		larreco::RecoAlg_CMTool_CMTAlgMatch
+		larreco::RecoAlg_CMTool_CMToolApp
+		${ROOT_MATHCORE}
+		ROOT::GenVector
+		ROOT::Geom
+		larreco::RecoAlg_TCAlg
+		larreco::RecoAlg_ImagePatternAlgs_DataProvider
+		larreco::RecoAlg_PMAlg
+		nusimdata::SimulationBase
+		art::Framework_Core
+		art::Framework_Principal
+		art::Framework_Services_Registry
+		
+		${ART_FRAMEWORK_SERVICES_OPTIONAL}
+		${ART_FRAMEWORK_SERVICES_OPTIONAL_TFILESERVICE_SERVICE}
+		art::Framework_Services_Optional_RandomNumberGenerator_service
+		art::Persistency_Common
+		art::Persistency_Provenance
+		art::Utilities
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib cetlib_except::cetlib_except
+		CLHEP::Random
+		${ROOT_MINUIT}
+		${ROOT_MINUIT2}
+	MODULE_LIBRARIES
+		icaruscode::TPC_Tracking_MCS
+		larsim::MCCheater_BackTrackerService_service
+		larsim::MCCheater_ParticleInventoryService_service
+		lardataobj::RecoBase
+		lardata::ArtDataHelper
+		larsim::Simulation
+		nug4::ParticleNavigation
+		lardataobj::Simulation
+		larevt::Filters
+		larcorealg::Geometry
+		larcore::Geometry_Geometry_service
+		lardata::RecoObjects
+		lardataobj::AnalysisBase
+		larreco::Calorimetry
+		lardata::Utilities
+		larreco::RecoAlg_ClusterRecoUtil
+		larreco::RecoAlg_CMTool_CMToolBase
+		larreco::RecoAlg_CMTool_CMTAlgMerge
+		larreco::RecoAlg_CMTool_CMTAlgPriority
+		larreco::RecoAlg_CMTool_CMTAlgMatch
+		larreco::RecoAlg_CMTool_CMToolApp
+		${ROOT_MATHCORE}
+		ROOT::GenVector
+		ROOT::Geom
+		larreco::RecoAlg_TCAlg
+		larreco::RecoAlg_ImagePatternAlgs_DataProvider
+		larreco::RecoAlg_PMAlg
+		nusimdata::SimulationBase
+		art::Framework_Core
+		art::Framework_Principal
+		art::Framework_Services_Registry
+		
+		${ART_FRAMEWORK_SERVICES_OPTIONAL}
+		${ART_FRAMEWORK_SERVICES_OPTIONAL_TFILESERVICE_SERVICE}
+		art::Framework_Services_Optional_RandomNumberGenerator_service
+		art::Persistency_Common
+		art::Persistency_Provenance
+		art::Utilities
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib
+		cetlib_except::cetlib_except
+		CLHEP::Random
+		${ROOT_MINUIT}
+		${ROOT_MINUIT2}
+	)
 
 
 install_headers()
diff --git a/icaruscode/TPC/Utilities/CMakeLists.txt b/icaruscode/TPC/Utilities/CMakeLists.txt
index 038dc90..f053b11 100644
--- a/icaruscode/TPC/Utilities/CMakeLists.txt
+++ b/icaruscode/TPC/Utilities/CMakeLists.txt
@@ -1,62 +1,64 @@
 add_subdirectory(tools)
+include_directories(${FFTW3_INCLUDE_DIRS})
+link_directories(${FFTW3_LIBRARY_DIRS})
+
 
 add_definitions(-DEIGEN_FFTW_DEFAULT)
 
-set( icarus_util_lib_list
-                        larcorealg_Geometry
-                        larevt_CalibrationDBI_IOVData
-                        larevt_CalibrationDBI_Providers
-                        larreco_HitFinder
-                        lardataobj_RecoBase
-                        larcore_Geometry_Geometry_service
-                        lardata_Utilities
-                        nurandom_RandomUtils_NuRandomService_service
-                        ${ICARUS_FFTW_LIBRARIES}
-                        ${ART_FRAMEWORK_CORE}
-                        ${ART_FRAMEWORK_PRINCIPAL}
-                        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                        art_Persistency_Common
-                        art_Framework_IO
-                        art_Framework_IO_detail
-                        art_Persistency_Provenance
-                        ${ART_FRAMEWORK_SERVICES_BASIC}
-                        ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                        ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-                        ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                        ${ART_FRAMEWORK_SERVICES_SYSTEM_FILECATALOGMETADATA_SERVICE}
-                        art_Framework_Services_System_TriggerNamesService_service
-                        art_Utilities
-                        canvas
-                        ${MF_MESSAGELOGGER}
-                        ${MF_UTILITIES}
-                        ${FHICLCPP}
-                        ${CETLIB}
-                        ${Boost_FILESYSTEM_LIBRARY}
-                        ${Boost_SYSTEM_LIBRARY}
-                        ${CLHEP}
-                        ${ROOT_BASIC_LIB_LIST}
-    )
+set(icarus_util_lib_list
+	larcorealg::Geometry
+	larevt::CalibrationDBI_IOVData
+	larevt::CalibrationDBI_Providers
+	larreco::HitFinder
+	lardataobj::RecoBase
+	larcore::Geometry_Geometry_service
+	lardata::Utilities
+	nurandom::RandomUtils_NuRandomService_service
+	${ICARUS_FFTW_LIBRARIES}
+	art::Framework_Core
+	art::Framework_Principal
+	art::Framework_Services_Registry
+	art::Persistency_Common
+	art::Framework_IO
+	art::Framework_IO_detail
+	art::Persistency_Provenance
+	
+	art_root_io::tfile_support ROOT::Core
+	art::Framework_Services_Optional_RandomNumberGenerator_service
+	art_root_io::TFileService_service
+	art::Framework_Services_System_FileCatalogMetadata_service
+	art::Framework_Services_System_TriggerNamesService_service
+	art::Utilities
+	canvas::canvas
+	messagefacility::MF_MessageLogger
+	messagefacility::headers
+	fhiclcpp::fhiclcpp
+	cetlib::cetlib
+	Boost::filesystem
+	Boost::system
+	CLHEP::Random
+)
 
-art_make( 
-#          LIBRARY_NAME  icaruscode_TPC_Utilities
-#          LIB_LIBRARIES ${icarus_util_lib_list}
+art_make(
+# LIBRARY_NAME icaruscode_TPC_Utilities
+# LIB_LIBRARIES$ {icarus_util_lib_list}
 #
-          SERVICE_LIBRARIES 
-                        ${icarus_util_lib_list}
+	SERVICE_LIBRARIES
+		${icarus_util_lib_list}
 
-          MODULE_LIBRARIES
-                        ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                        ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-                        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                        ${ART_FRAMEWORK_PRINCIPAL}
-                        ${ART_FRAMEWORK_CORE}
-                        canvas
-                        ${MF_MESSAGELOGGER}
-                        hep_concurrency
-                        ${FHICLCPP}
-                        ${CETLIB}
-                        ${ROOT_CORE}
-       )
+	MODULE_LIBRARIES
+		art_root_io::TFileService_service
+		art_root_io::tfile_support ROOT::Core
+		art::Framework_Services_Registry
+		art::Framework_Principal
+		art::Framework_Core
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		hep_concurrency::hep_concurrency
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib
+		ROOT::Core
+	)
 
 
 install_headers()
diff --git a/icaruscode/TPC/Utilities/FileCatalogMetadataICARUS.h b/icaruscode/TPC/Utilities/FileCatalogMetadataICARUS.h
index 4b4f1ae..179558b 100644
--- a/icaruscode/TPC/Utilities/FileCatalogMetadataICARUS.h
+++ b/icaruscode/TPC/Utilities/FileCatalogMetadataICARUS.h
@@ -29,7 +29,7 @@
 
 #include "fhiclcpp/ParameterSet.h"
 #include "art/Framework/Services/Registry/ActivityRegistry.h"
-#include "art/Framework/Services/Registry/ServiceMacros.h"
+#include "art/Framework/Services/Registry/ServiceDeclarationMacros.h"
 
 namespace icarusutil {
 
diff --git a/icaruscode/TPC/Utilities/FileCatalogMetadataICARUS_service.cc b/icaruscode/TPC/Utilities/FileCatalogMetadataICARUS_service.cc
index 8a66f3d..e1b2855 100644
--- a/icaruscode/TPC/Utilities/FileCatalogMetadataICARUS_service.cc
+++ b/icaruscode/TPC/Utilities/FileCatalogMetadataICARUS_service.cc
@@ -10,6 +10,7 @@
 
 #include "icaruscode/TPC/Utilities/FileCatalogMetadataICARUS.h"
 #include "art/Framework/Services/Registry/ServiceHandle.h"
+#include "art/Framework/Services/Registry/ServiceDefinitionMacros.h"
 #include "art/Framework/Services/System/FileCatalogMetadata.h"
 
 //--------------------------------------------------------------------
diff --git a/icaruscode/TPC/Utilities/SignalShapingICARUSService_service.cc b/icaruscode/TPC/Utilities/SignalShapingICARUSService_service.cc
index 9af8ce3..fad2ce2 100644
--- a/icaruscode/TPC/Utilities/SignalShapingICARUSService_service.cc
+++ b/icaruscode/TPC/Utilities/SignalShapingICARUSService_service.cc
@@ -9,6 +9,7 @@
 #include <cmath>
 #include "SignalShapingICARUSService_service.h"
 #include "art/Framework/Services/Registry/ServiceHandle.h"
+#include "art/Framework/Services/Registry/ServiceDefinitionMacros.h"
 #include "messagefacility/MessageLogger/MessageLogger.h"
 #include "cetlib_except/exception.h"
 #include "larcore/CoreUtils/ServiceUtil.h" // lar::providerFrom<>()
diff --git a/icaruscode/TPC/Utilities/SignalShapingICARUSService_service.h b/icaruscode/TPC/Utilities/SignalShapingICARUSService_service.h
index 201aa76..979edd5 100644
--- a/icaruscode/TPC/Utilities/SignalShapingICARUSService_service.h
+++ b/icaruscode/TPC/Utilities/SignalShapingICARUSService_service.h
@@ -82,7 +82,7 @@
 #include <map>
 #include "fhiclcpp/ParameterSet.h"
 #include "art/Framework/Services/Registry/ActivityRegistry.h"
-#include "art/Framework/Services/Registry/ServiceMacros.h"
+#include "art/Framework/Services/Registry/ServiceDeclarationMacros.h"
 #include "art/Framework/Services/Registry/ServiceHandle.h"
 
 #include "icaruscode/TPC/Utilities/tools/IResponse.h"
diff --git a/icaruscode/TPC/Utilities/TFileMetadataICARUS.h b/icaruscode/TPC/Utilities/TFileMetadataICARUS.h
index c57fea8..e036ea2 100644
--- a/icaruscode/TPC/Utilities/TFileMetadataICARUS.h
+++ b/icaruscode/TPC/Utilities/TFileMetadataICARUS.h
@@ -14,7 +14,7 @@
 #define TFILEMETADATAICARUS_H
 
 #include "art/Framework/Services/Registry/ActivityRegistry.h"
-#include "art/Framework/Services/Registry/ServiceMacros.h"
+#include "art/Framework/Services/Registry/ServiceDeclarationMacros.h"
 #include "art/Framework/Principal/fwd.h"
 #include "art/Framework/IO/PostCloseFileRenamer.h"
 #include "art/Framework/IO/FileStatsCollector.h"
diff --git a/icaruscode/TPC/Utilities/TFileMetadataICARUS_service.cc b/icaruscode/TPC/Utilities/TFileMetadataICARUS_service.cc
index 325f62a..6b6b894 100644
--- a/icaruscode/TPC/Utilities/TFileMetadataICARUS_service.cc
+++ b/icaruscode/TPC/Utilities/TFileMetadataICARUS_service.cc
@@ -49,6 +49,7 @@
 #include <stdio.h>
 #include <string>
 #include <vector>
+#include <numeric> // std::accumulate
 
 #include "icaruscode/TPC/Utilities/TFileMetadataICARUS.h"
 #include "icaruscode/TPC/Utilities/FileCatalogMetadataICARUS.h"
@@ -58,6 +59,7 @@
 #include "art/Framework/Principal/Event.h"
 #include "art/Framework/Principal/SubRun.h"
 #include "art/Framework/Services/Registry/ServiceHandle.h"
+#include "art/Framework/Services/Registry/ServiceDefinitionMacros.h"
 #include "art/Framework/Services/System/FileCatalogMetadata.h"
 #include "art/Framework/Services/System/TriggerNamesService.h"
 #include "art/Utilities/OutputFileInfo.h"
diff --git a/icaruscode/TPC/Utilities/tools/CMakeLists.txt b/icaruscode/TPC/Utilities/tools/CMakeLists.txt
index 0bcfeaf..2a413f2 100644
--- a/icaruscode/TPC/Utilities/tools/CMakeLists.txt
+++ b/icaruscode/TPC/Utilities/tools/CMakeLists.txt
@@ -1,38 +1,40 @@
 cet_enable_asserts()
+include_directories(${FFTW3_INCLUDE_DIRS})
+link_directories(${FFTW3_LIBRARY_DIRS})
+
 
 add_definitions(-DEIGEN_FFTW_DEFAULT)
 
-art_make(   
-            TOOL_LIBRARIES  
-            larcorealg_Geometry
-            larevt_CalibrationDBI_IOVData
-            larevt_CalibrationDBI_Providers
-            lardataobj_RecoBase
-            larcore_Geometry_Geometry_service
-            lardata_Utilities
-            lardataalg_DetectorInfo
-            ${ICARUS_FFTW_LIBRARIES}
-            ${ART_FRAMEWORK_CORE}
-            ${ART_FRAMEWORK_PRINCIPAL}
-            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-            art_Persistency_Common
-            art_Persistency_Provenance
-            ${ART_FRAMEWORK_SERVICES_BASIC}
-            ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-            ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
-            ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-            ${ART_FRAMEWORK_SERVICES_SYSTEM_FILECATALOGMETADATA_SERVICE}
-            art_Utilities
-            canvas
-            ${MF_MESSAGELOGGER}
-            ${MF_UTILITIES}
-            ${FHICLCPP}
-            ${CETLIB}
-            ${Boost_FILESYSTEM_LIBRARY}
-            ${Boost_SYSTEM_LIBRARY}
-            ${CLHEP}
-            ${ROOT_BASIC_LIB_LIST}
-       )
+art_make(
+	TOOL_LIBRARIES
+		larcorealg::Geometry
+		larevt::CalibrationDBI_IOVData
+		larevt::CalibrationDBI_Providers
+		lardataobj::RecoBase
+		larcore::Geometry_Geometry_service
+		lardata::Utilities
+		lardataalg::DetectorInfo
+		${ICARUS_FFTW_LIBRARIES}
+		art::Framework_Core
+		art::Framework_Principal
+		art::Framework_Services_Registry
+		art::Persistency_Common
+		art::Persistency_Provenance
+		icarus_signal_processing::icarus_signal_processing	
+		art_root_io::tfile_support ROOT::Core
+		art::Framework_Services_Optional_RandomNumberGenerator_service
+		art_root_io::TFileService_service
+		art::Framework_Services_System_FileCatalogMetadata_service
+		art::Utilities
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		messagefacility::headers
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib
+		Boost::filesystem
+		Boost::system
+		CLHEP::Random
+	)
 
 install_headers()
 install_source()
diff --git a/icaruscode/TPC/Utilities/tools/ElectronicsResponseBesselApprox_tool.cc b/icaruscode/TPC/Utilities/tools/ElectronicsResponseBesselApprox_tool.cc
index 6f85803..1687073 100644
--- a/icaruscode/TPC/Utilities/tools/ElectronicsResponseBesselApprox_tool.cc
+++ b/icaruscode/TPC/Utilities/tools/ElectronicsResponseBesselApprox_tool.cc
@@ -16,6 +16,7 @@
 #include "TProfile.h"
 
 #include <fstream>
+#include <numeric>
 
 namespace icarus_tool
 {
diff --git a/icaruscode/TPC/Utilities/tools/ElectronicsResponse_tool.cc b/icaruscode/TPC/Utilities/tools/ElectronicsResponse_tool.cc
index e528f0b..fe06e2c 100644
--- a/icaruscode/TPC/Utilities/tools/ElectronicsResponse_tool.cc
+++ b/icaruscode/TPC/Utilities/tools/ElectronicsResponse_tool.cc
@@ -16,6 +16,7 @@
 #include "TProfile.h"
 
 #include <fstream>
+#include <numeric> // std::accumulate
 
 namespace icarus_tool
 {
diff --git a/icaruscode/Utilities/CMakeLists.txt b/icaruscode/Utilities/CMakeLists.txt
index 9f4ac0d..d195dc9 100644
--- a/icaruscode/Utilities/CMakeLists.txt
+++ b/icaruscode/Utilities/CMakeLists.txt
@@ -1,42 +1,44 @@
 
 art_make(
-  EXCLUDE
-    "SaveConfigurationIntoTFile_module.cc"
-    "DummyFilter_module.cc"
-    "DummyProducer_module.cc"
-    "DuplicateEventTracker_service.cc"
-  LIB_LIBRARIES
-    ${ART_ROOT_IO_ROOTDB}
-    ${SQLITE3}
-    cetlib_except
-    cetlib
-    fhiclcpp
-    hep_concurrency # required by fhicl::ParameterSetRegistry
-    ROOT::Tree
-    ROOT::Core
-    ROOT::RIO
-)
+	EXCLUDE
+		"SaveConfigurationIntoTFile_module.cc"
+		"DummyFilter_module.cc"
+		"DummyProducer_module.cc"
+		"DuplicateEventTracker_service.cc"
+	LIB_LIBRARIES
+		art_root_io::RootDB
+		SQLite::SQLite3
+                lardata::Utilities
+		canvas::canvas
+		cetlib_except::cetlib_except
+		cetlib::cetlib
+		fhiclcpp::fhiclcpp
+		hep_concurrency::hep_concurrency # required by fhicl::ParameterSetRegistry
+		ROOT::Tree
+		ROOT::Core
+		ROOT::RIO
+	)
 
 simple_plugin(SaveConfigurationIntoTFile "module"
-              ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-              ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-              ${ART_FRAMEWORK_SERVICES_REGISTRY}
-              ${ART_FRAMEWORK_PRINCIPAL}
-              ${ART_FRAMEWORK_CORE}
-              canvas
-              ${MF_MESSAGELOGGER}
-              hep_concurrency
-              ${FHICLCPP}
-              ${CETLIB}
-              ${ROOT_CORE}
-)
+		art_root_io::TFileService_service
+		art_root_io::tfile_support
+		art::Framework_Services_Registry
+		art::Framework_Principal
+		art::Framework_Core
+		canvas::canvas
+		messagefacility::MF_MessageLogger
+		hep_concurrency::hep_concurrency
+		fhiclcpp::fhiclcpp
+		cetlib::cetlib
+		ROOT::Core
+	)
 
 
 simple_plugin(DuplicateEventTracker "service"
-              icaruscode_Utilities
-              ${ART_FRAMEWORK_PRINCIPAL}
-              ${MF_MESSAGELOGGER}
-)
+		icaruscode::Utilities
+		art::Framework_Principal
+		messagefacility::MF_MessageLogger
+	)
 
 simple_plugin(DummyFilter "module")
 simple_plugin(DummyProducer "module")
diff --git a/icaruscode/Utilities/DuplicateEventTracker.h b/icaruscode/Utilities/DuplicateEventTracker.h
index af0a92c..7e33879 100644
--- a/icaruscode/Utilities/DuplicateEventTracker.h
+++ b/icaruscode/Utilities/DuplicateEventTracker.h
@@ -18,7 +18,7 @@
 #include "icaruscode/Utilities/EventRegistry.h"
 
 // framework libraries
-#include "art/Framework/Services/Registry/ServiceMacros.h"
+#include "art/Framework/Services/Registry/ServiceDeclarationMacros.h"
 #include "art/Framework/Services/Registry/ServiceTable.h"
 #include "fhiclcpp/types/Atom.h"
 #include "cetlib_except/exception.h" // courtesy
diff --git a/icaruscode/Utilities/DuplicateEventTracker_service.cc b/icaruscode/Utilities/DuplicateEventTracker_service.cc
index 00218af..574783a 100644
--- a/icaruscode/Utilities/DuplicateEventTracker_service.cc
+++ b/icaruscode/Utilities/DuplicateEventTracker_service.cc
@@ -13,6 +13,7 @@
 // framework libraries
 #include "art/Framework/Services/Registry/ActivityRegistry.h"
 #include "art/Framework/Principal/Event.h" 
+#include "art/Framework/Services/Registry/ServiceDefinitionMacros.h"
 #include "canvas/Persistency/Provenance/EventID.h"
 #include "messagefacility/MessageLogger/MessageLogger.h" 
 
diff --git a/icaruscode/Utilities/ReadArtConfiguration.cxx b/icaruscode/Utilities/ReadArtConfiguration.cxx
index 8d307a4..13596f6 100644
--- a/icaruscode/Utilities/ReadArtConfiguration.cxx
+++ b/icaruscode/Utilities/ReadArtConfiguration.cxx
@@ -13,7 +13,7 @@
 
 // framework libraries
 #include "art_root_io/RootDB/SQLite3Wrapper.h"
-#include "fhiclcpp/make_ParameterSet.h"
+#include "fhiclcpp/ParameterSet.h"
 
 
 // -----------------------------------------------------------------------------
@@ -61,9 +61,8 @@ util::readConfigurationFromArtFile(TFile& file)
     // reinterpretation: `unsigned char*` -> `char*`
     std::string const psetIDstr
       = reinterpret_cast<const char*>(sqlite3_column_text(stmt, 0));
-    fhicl::ParameterSet pset;
-    fhicl::make_ParameterSet
-      (reinterpret_cast<const char*>(sqlite3_column_text(stmt, 1)), pset);
+    auto pset = fhicl::ParameterSet::make
+      (reinterpret_cast<const char*>(sqlite3_column_text(stmt, 1)));
     config.emplace(fhicl::ParameterSetID{ psetIDstr }, std::move(pset));
     
   } // while
diff --git a/test/PMT/Data/CMakeLists.txt b/test/PMT/Data/CMakeLists.txt
index 7cf465c..a4ecd69 100644
--- a/test/PMT/Data/CMakeLists.txt
+++ b/test/PMT/Data/CMakeLists.txt
@@ -1,5 +1,7 @@
 cet_test(WaveformBaseline_test
   LIBRARIES
-    sbnobj_ICARUS_PMT_Data
+    sbnobj::ICARUS_PMT_Data
+    icarusalg::Utilities
+    lardataalg::DetectorInfo
   USE_BOOST_UNIT
   )
diff --git a/test/PMT/Data/WaveformBaseline_test.cc b/test/PMT/Data/WaveformBaseline_test.cc
index 9f08f98..2bb6126 100644
--- a/test/PMT/Data/WaveformBaseline_test.cc
+++ b/test/PMT/Data/WaveformBaseline_test.cc
@@ -18,8 +18,7 @@
 
 // Boost libraries
 #define BOOST_TEST_MODULE ( WaveformBaseline_test )
-#include <cetlib/quiet_unit_test.hpp> // BOOST_AUTO_TEST_CASE()
-#include <boost/test/test_tools.hpp> // BOOST_CHECK_EQUAL()
+#include <boost/test/unit_test.hpp>
 
 // C/C++ standard library
 #include <sstream>
@@ -37,9 +36,9 @@ void WaveformBaseline_value_test() {
   
   icarus::WaveformBaseline const baseline { baselineValue };
   
-  BOOST_CHECK_EQUAL(baseline.fBaseline, baselineValue);
-  BOOST_CHECK_EQUAL(baseline.baseline(), baselineValue);
-  BOOST_CHECK_EQUAL(baseline(), baselineValue);
+  BOOST_TEST((baseline.fBaseline ==  baselineValue));
+  BOOST_TEST((baseline.baseline() ==  baselineValue));
+  BOOST_TEST((baseline() ==  baselineValue));
   
   std::ostringstream sstr;
   sstr << baseline;
@@ -48,7 +47,7 @@ void WaveformBaseline_value_test() {
   sstr << baselineValue;
   std::string const baselineValueStr { sstr.str() };
   
-  BOOST_CHECK_EQUAL(baselineStr, baselineValueStr);
+  BOOST_TEST((baselineStr ==  baselineValueStr));
   
 } // WaveformBaseline_value_test()
 
@@ -68,7 +67,7 @@ void WaveformBaseline_documentation1_test() {
   sstr << "Baseline: " << baseline << " ADC";
   
   
-  BOOST_CHECK_EQUAL(sstr.str(), "Baseline: 1.2 ADC");
+  BOOST_TEST((sstr.str() ==  "Baseline: 1.2 ADC"));
   
 } // WaveformBaseline_documentation1_test()
 
@@ -103,11 +102,11 @@ void WaveformBaseline_documentation2_test() {
   //
   // checks
   //
-  BOOST_CHECK_EQUAL(subtracted.size(), data.size());
+  BOOST_TEST((subtracted.size() ==  data.size()));
   
-  BOOST_CHECK_EQUAL(subtracted[0U], ADCCount_t{ 4 });
-  BOOST_CHECK_EQUAL(subtracted[1U], ADCCount_t{ 6 });
-  BOOST_CHECK_EQUAL(subtracted[2U], ADCCount_t{ 0 });
+  BOOST_TEST((subtracted[0U] ==  ADCCount_t{ 4 }));
+  BOOST_TEST((subtracted[1U] ==  ADCCount_t{ 6 }));
+  BOOST_TEST((subtracted[2U] ==  ADCCount_t{ 0 }));
   
 } // WaveformBaseline_documentation2_test()
 
diff --git a/test/PMT/Trigger/Algorithms/CMakeLists.txt b/test/PMT/Trigger/Algorithms/CMakeLists.txt
index 77195e0..38265e6 100644
--- a/test/PMT/Trigger/Algorithms/CMakeLists.txt
+++ b/test/PMT/Trigger/Algorithms/CMakeLists.txt
@@ -1,5 +1,5 @@
 cet_test(TriggerInfo_t_test
   LIBRARIES
-    sbnobj_ICARUS_PMT_Trigger_Data
+    sbnobj::ICARUS_PMT_Trigger_Data
   USE_BOOST_UNIT
   )
diff --git a/test/PMT/Trigger/Algorithms/TriggerInfo_t_test.cc b/test/PMT/Trigger/Algorithms/TriggerInfo_t_test.cc
index d5c872a..395e52a 100644
--- a/test/PMT/Trigger/Algorithms/TriggerInfo_t_test.cc
+++ b/test/PMT/Trigger/Algorithms/TriggerInfo_t_test.cc
@@ -17,8 +17,7 @@
 
 // Boost libraries
 #define BOOST_TEST_MODULE ( TriggerGateData_test )
-#include <cetlib/quiet_unit_test.hpp> // BOOST_AUTO_TEST_CASE()
-#include <boost/test/test_tools.hpp> // BOOST_CHECK(), BOOST_CHECK_EQUAL()
+#include <boost/test/unit_test.hpp>
 
 
 // -----------------------------------------------------------------------------
@@ -30,7 +29,7 @@ icarus::trigger::TriggerGateData<int, int> TestedInputGate() {
   // prepare the input:
   icarus::trigger::TriggerGateData<int, int> gate;
   
-  BOOST_CHECK(gate.alwaysClosed());
+  BOOST_CHECK((gate.alwaysClosed()));
   
   /*
    *   ^                     12                    34
@@ -60,76 +59,76 @@ icarus::trigger::TriggerGateData<int, int> TestedInputGate() {
   gate.openAt (40);    // -> 1
   gate.closeAt(43);    // -> 0
   
-  BOOST_CHECK(!gate.alwaysClosed());
-  BOOST_CHECK_EQUAL(gate.openingCount(-9), 0);
-  BOOST_CHECK_EQUAL(gate.openingCount(-8), 0);
-  BOOST_CHECK_EQUAL(gate.openingCount(-7), 0);
-  BOOST_CHECK_EQUAL(gate.openingCount(-6), 0);
-  BOOST_CHECK_EQUAL(gate.openingCount(-5), 0);
-  BOOST_CHECK_EQUAL(gate.openingCount(-4), 2);
-  BOOST_CHECK_EQUAL(gate.openingCount(-3), 2);
-  BOOST_CHECK_EQUAL(gate.openingCount(-2), 2);
-  BOOST_CHECK_EQUAL(gate.openingCount(-1), 0);
-  BOOST_CHECK_EQUAL(gate.openingCount( 0), 0);
-  BOOST_CHECK_EQUAL(gate.openingCount( 1), 0);
-  BOOST_CHECK_EQUAL(gate.openingCount( 2), 1);
-  BOOST_CHECK_EQUAL(gate.openingCount( 3), 1);
-  BOOST_CHECK_EQUAL(gate.openingCount( 4), 2);
-  BOOST_CHECK_EQUAL(gate.openingCount( 5), 2);
-  BOOST_CHECK_EQUAL(gate.openingCount( 6), 2);
-  BOOST_CHECK_EQUAL(gate.openingCount( 7), 1);
-  BOOST_CHECK_EQUAL(gate.openingCount( 8), 1);
-  BOOST_CHECK_EQUAL(gate.openingCount( 9), 1);
-  BOOST_CHECK_EQUAL(gate.openingCount(10), 2);
-  BOOST_CHECK_EQUAL(gate.openingCount(11), 2);
-  BOOST_CHECK_EQUAL(gate.openingCount(12), 4);
-  BOOST_CHECK_EQUAL(gate.openingCount(13), 4);
-  BOOST_CHECK_EQUAL(gate.openingCount(14), 4);
-  BOOST_CHECK_EQUAL(gate.openingCount(15), 3);
-  BOOST_CHECK_EQUAL(gate.openingCount(16), 3);
-  BOOST_CHECK_EQUAL(gate.openingCount(17), 2);
-  BOOST_CHECK_EQUAL(gate.openingCount(18), 2);
-  BOOST_CHECK_EQUAL(gate.openingCount(19), 2);
-  BOOST_CHECK_EQUAL(gate.openingCount(20), 3);
-  BOOST_CHECK_EQUAL(gate.openingCount(21), 3);
-  BOOST_CHECK_EQUAL(gate.openingCount(22), 3);
-  BOOST_CHECK_EQUAL(gate.openingCount(23), 1);
-  BOOST_CHECK_EQUAL(gate.openingCount(24), 1);
-  BOOST_CHECK_EQUAL(gate.openingCount(25), 1);
-  BOOST_CHECK_EQUAL(gate.openingCount(26), 2);
-  BOOST_CHECK_EQUAL(gate.openingCount(27), 2);
-  BOOST_CHECK_EQUAL(gate.openingCount(28), 2);
-  BOOST_CHECK_EQUAL(gate.openingCount(29), 1);
-  BOOST_CHECK_EQUAL(gate.openingCount(30), 1);
-  BOOST_CHECK_EQUAL(gate.openingCount(31), 0);
-  BOOST_CHECK_EQUAL(gate.openingCount(32), 0);
-  BOOST_CHECK_EQUAL(gate.openingCount(33), 0);
-  BOOST_CHECK_EQUAL(gate.openingCount(34), 4);
-  BOOST_CHECK_EQUAL(gate.openingCount(35), 4);
-  BOOST_CHECK_EQUAL(gate.openingCount(36), 4);
-  BOOST_CHECK_EQUAL(gate.openingCount(37), 0);
-  BOOST_CHECK_EQUAL(gate.openingCount(38), 0);
-  BOOST_CHECK_EQUAL(gate.openingCount(39), 0);
-  BOOST_CHECK_EQUAL(gate.openingCount(40), 1);
-  BOOST_CHECK_EQUAL(gate.openingCount(41), 1);
-  BOOST_CHECK_EQUAL(gate.openingCount(42), 1);
-  BOOST_CHECK_EQUAL(gate.openingCount(43), 0);
-  BOOST_CHECK_EQUAL(gate.openingCount(44), 0);
-  BOOST_CHECK_EQUAL(gate.openingCount(45), 0);
-  BOOST_CHECK_EQUAL(gate.openingCount(46), 0);
-  BOOST_CHECK_EQUAL(gate.openingCount(47), 0);
-  BOOST_CHECK_EQUAL(gate.openingCount(48), 0);
-  BOOST_CHECK_EQUAL(gate.openingCount(49), 0);
+  BOOST_CHECK((!gate.alwaysClosed()));
+  BOOST_TEST((gate.openingCount(-9) ==  0));
+  BOOST_TEST((gate.openingCount(-8) ==  0));
+  BOOST_TEST((gate.openingCount(-7) ==  0));
+  BOOST_TEST((gate.openingCount(-6) ==  0));
+  BOOST_TEST((gate.openingCount(-5) ==  0));
+  BOOST_TEST((gate.openingCount(-4) ==  2));
+  BOOST_TEST((gate.openingCount(-3) ==  2));
+  BOOST_TEST((gate.openingCount(-2) ==  2));
+  BOOST_TEST((gate.openingCount(-1) ==  0));
+  BOOST_TEST((gate.openingCount( 0) ==  0));
+  BOOST_TEST((gate.openingCount( 1) ==  0));
+  BOOST_TEST((gate.openingCount( 2) ==  1));
+  BOOST_TEST((gate.openingCount( 3) ==  1));
+  BOOST_TEST((gate.openingCount( 4) ==  2));
+  BOOST_TEST((gate.openingCount( 5) ==  2));
+  BOOST_TEST((gate.openingCount( 6) ==  2));
+  BOOST_TEST((gate.openingCount( 7) ==  1));
+  BOOST_TEST((gate.openingCount( 8) ==  1));
+  BOOST_TEST((gate.openingCount( 9) ==  1));
+  BOOST_TEST((gate.openingCount(10) ==  2));
+  BOOST_TEST((gate.openingCount(11) ==  2));
+  BOOST_TEST((gate.openingCount(12) ==  4));
+  BOOST_TEST((gate.openingCount(13) ==  4));
+  BOOST_TEST((gate.openingCount(14) ==  4));
+  BOOST_TEST((gate.openingCount(15) ==  3));
+  BOOST_TEST((gate.openingCount(16) ==  3));
+  BOOST_TEST((gate.openingCount(17) ==  2));
+  BOOST_TEST((gate.openingCount(18) ==  2));
+  BOOST_TEST((gate.openingCount(19) ==  2));
+  BOOST_TEST((gate.openingCount(20) ==  3));
+  BOOST_TEST((gate.openingCount(21) ==  3));
+  BOOST_TEST((gate.openingCount(22) ==  3));
+  BOOST_TEST((gate.openingCount(23) ==  1));
+  BOOST_TEST((gate.openingCount(24) ==  1));
+  BOOST_TEST((gate.openingCount(25) ==  1));
+  BOOST_TEST((gate.openingCount(26) ==  2));
+  BOOST_TEST((gate.openingCount(27) ==  2));
+  BOOST_TEST((gate.openingCount(28) ==  2));
+  BOOST_TEST((gate.openingCount(29) ==  1));
+  BOOST_TEST((gate.openingCount(30) ==  1));
+  BOOST_TEST((gate.openingCount(31) ==  0));
+  BOOST_TEST((gate.openingCount(32) ==  0));
+  BOOST_TEST((gate.openingCount(33) ==  0));
+  BOOST_TEST((gate.openingCount(34) ==  4));
+  BOOST_TEST((gate.openingCount(35) ==  4));
+  BOOST_TEST((gate.openingCount(36) ==  4));
+  BOOST_TEST((gate.openingCount(37) ==  0));
+  BOOST_TEST((gate.openingCount(38) ==  0));
+  BOOST_TEST((gate.openingCount(39) ==  0));
+  BOOST_TEST((gate.openingCount(40) ==  1));
+  BOOST_TEST((gate.openingCount(41) ==  1));
+  BOOST_TEST((gate.openingCount(42) ==  1));
+  BOOST_TEST((gate.openingCount(43) ==  0));
+  BOOST_TEST((gate.openingCount(44) ==  0));
+  BOOST_TEST((gate.openingCount(45) ==  0));
+  BOOST_TEST((gate.openingCount(46) ==  0));
+  BOOST_TEST((gate.openingCount(47) ==  0));
+  BOOST_TEST((gate.openingCount(48) ==  0));
+  BOOST_TEST((gate.openingCount(49) ==  0));
  
-  BOOST_CHECK_EQUAL(gate.findMaxOpen(  ), 12);
-  BOOST_CHECK_EQUAL(gate.findMaxOpen(12), 12);
-  BOOST_CHECK_EQUAL(gate.findMaxOpen(13), 13);
-  BOOST_CHECK_EQUAL(gate.findMaxOpen(14), 14);
-  BOOST_CHECK_EQUAL(gate.findMaxOpen(15), 34);
+  BOOST_TEST((gate.findMaxOpen(  ) ==  12));
+  BOOST_TEST((gate.findMaxOpen(12) ==  12));
+  BOOST_TEST((gate.findMaxOpen(13) ==  13));
+  BOOST_TEST((gate.findMaxOpen(14) ==  14));
+  BOOST_TEST((gate.findMaxOpen(15) ==  34));
   
   auto [ lower2031, upper2031 ] = gate.openingRange(20, 30);
-  BOOST_CHECK_EQUAL(lower2031, 1);
-  BOOST_CHECK_EQUAL(upper2031, 4);
+  BOOST_TEST((lower2031 ==  1));
+  BOOST_TEST((upper2031 ==  4));
   
   return gate;
 } // TestedInputGate()
@@ -152,46 +151,46 @@ void GateOpeningInfoExtractor_test() {
   
   icarus::trigger::details::GateOpeningInfoExtractor extract { gate, 2U };
   
-  BOOST_CHECK_EQUAL(extract.openThreshold(),  2U);
-  BOOST_CHECK_EQUAL(extract.closeThreshold(), 1U);
-  BOOST_CHECK_EQUAL(extract.minGap(),         0U);
-  BOOST_CHECK_EQUAL(extract.minWidth(),       1U);
+  BOOST_TEST((extract.openThreshold() ==   2U));
+  BOOST_TEST((extract.closeThreshold() ==  1U));
+  BOOST_TEST((extract.minGap() ==          0U));
+  BOOST_TEST((extract.minWidth() ==        1U));
   
-  BOOST_CHECK(!extract.atEnd());
+  BOOST_CHECK((!extract.atEnd()));
   
   auto opening = extract.findNextOpening();
-  BOOST_CHECK(opening);
-  BOOST_CHECK_EQUAL(opening.value().tick.value(), -4);
-  BOOST_CHECK_EQUAL(opening.value().level,         2);
-  BOOST_CHECK(!extract.atEnd());
+  BOOST_CHECK((!!opening));
+  BOOST_TEST((opening.value().tick.value() ==  -4));
+  BOOST_TEST((opening.value().level ==          2));
+  BOOST_CHECK((!extract.atEnd()));
   
   opening = extract.findNextOpening();
-  BOOST_CHECK(opening);
-  BOOST_CHECK_EQUAL(opening.value().tick.value(),  4);
-  BOOST_CHECK_EQUAL(opening.value().level,         2);
-  BOOST_CHECK(!extract.atEnd());
+  BOOST_CHECK((!!opening));
+  BOOST_TEST((opening.value().tick.value() ==   4));
+  BOOST_TEST((opening.value().level ==          2));
+  BOOST_CHECK((!extract.atEnd()));
   
   opening = extract.findNextOpening();
-  BOOST_CHECK(opening);
-  BOOST_CHECK_EQUAL(opening.value().tick.value(), 10);
-  BOOST_CHECK_EQUAL(opening.value().level,         4);
-  BOOST_CHECK(!extract.atEnd());
+  BOOST_CHECK((!!opening));
+  BOOST_TEST((opening.value().tick.value() ==  10));
+  BOOST_TEST((opening.value().level ==          4));
+  BOOST_CHECK((!extract.atEnd()));
   
   opening = extract.findNextOpening();
-  BOOST_CHECK(opening);
-  BOOST_CHECK_EQUAL(opening.value().tick.value(), 26);
-  BOOST_CHECK_EQUAL(opening.value().level,         2);
-  BOOST_CHECK(!extract.atEnd());
+  BOOST_CHECK((!!opening));
+  BOOST_TEST((opening.value().tick.value() ==  26));
+  BOOST_TEST((opening.value().level ==          2));
+  BOOST_CHECK((!extract.atEnd()));
   
   opening = extract.findNextOpening();
-  BOOST_CHECK(opening);
-  BOOST_CHECK_EQUAL(opening.value().tick.value(), 34);
-  BOOST_CHECK_EQUAL(opening.value().level,         4);
-  BOOST_CHECK(extract.atEnd());
+  BOOST_CHECK((!!opening));
+  BOOST_TEST((opening.value().tick.value() ==  34));
+  BOOST_TEST((opening.value().level ==          4));
+  BOOST_CHECK((extract.atEnd()));
   
   opening = extract.findNextOpening();
-  BOOST_CHECK(!opening);
-  BOOST_CHECK(extract.atEnd());
+  BOOST_CHECK((!opening));
+  BOOST_CHECK((extract.atEnd()));
   
 } // GateOpeningInfoExtractor_test()
 
diff --git a/test/PMT/Trigger/Data/CMakeLists.txt b/test/PMT/Trigger/Data/CMakeLists.txt
index 0535746..aa0aa10 100644
--- a/test/PMT/Trigger/Data/CMakeLists.txt
+++ b/test/PMT/Trigger/Data/CMakeLists.txt
@@ -1,6 +1,7 @@
 cet_test(TriggerGateData_test
   LIBRARIES
-    lardataalg_DetectorInfo
-    larcorealg_CoreUtils
+    lardataalg::DetectorInfo
+    larcorealg::CoreUtils
+    sbnobj::ICARUS_PMT_Trigger_Data
   USE_BOOST_UNIT
   )
diff --git a/test/PMT/Trigger/Data/TriggerGateData_test.cc b/test/PMT/Trigger/Data/TriggerGateData_test.cc
index 494f234..cfc3672 100644
--- a/test/PMT/Trigger/Data/TriggerGateData_test.cc
+++ b/test/PMT/Trigger/Data/TriggerGateData_test.cc
@@ -17,8 +17,7 @@
 
 // Boost libraries
 #define BOOST_TEST_MODULE ( TriggerGateData_test )
-#include <cetlib/quiet_unit_test.hpp> // BOOST_AUTO_TEST_CASE()
-#include <boost/test/test_tools.hpp> // BOOST_CHECK(), BOOST_CHECK_EQUAL()
+#include <boost/test/unit_test.hpp>
 
 
 // -----------------------------------------------------------------------------
diff --git a/test/ci/CMakeLists.txt b/test/ci/CMakeLists.txt
index c63cd6d..2e54729 100644
--- a/test/ci/CMakeLists.txt
+++ b/test/ci/CMakeLists.txt
@@ -6,7 +6,7 @@
 # 
 # In order to achieve that:
 # 
-# 1. there is no way (I know of) with cetbuildtools of installing the scripts
+# 1. there is no way (I know of) with cetbuildtools of installing the scripts ### MIGRATE-ACTION-REQUIRED: remove
 #    into `${ICARUSCODE_DIR}/test/ci` directory: `install_scripts(AS_TEST)`
 #    installs all directly into `${ICARUSCODE_DIR}/test`
 # 2. the integration test configuration (`ci_tests.cfg`) stores the command for
diff --git a/ups/CMakeLists.txt b/ups/CMakeLists.txt
deleted file mode 100644
index fe33cc7..0000000
--- a/ups/CMakeLists.txt
+++ /dev/null
@@ -1,6 +0,0 @@
-
-# create package configuration and version files
-
-process_ups_files()
-
-cet_cmake_config()
diff --git a/ups/product-config.cmake.in b/ups/product-config.cmake.in
deleted file mode 100644
index 4e22a3b..0000000
--- a/ups/product-config.cmake.in
+++ /dev/null
@@ -1,12 +0,0 @@
-
-set( @product@_VERSION @cet_dot_version@ )
-set( @product@_UPS_VERSION @version@ )
-
-@PACKAGE_INIT@
-
-@CONFIG_FIND_UPS_COMMANDS@
-
-@CONFIG_FIND_LIBRARY_COMMANDS@
-
-check_required_components(@product@)
-
diff --git a/ups/product_deps b/ups/product_deps
index 096bfc2..a747484 100644
--- a/ups/product_deps
+++ b/ups/product_deps
@@ -1,68 +1,361 @@
-# This @product_deps@ file defines dependencies for this package.
+########################################################################
+# product_deps
+#
+#   Define attributes of a package to be built and distributed as a UPS
+#   product.
+#
+# This file is parsed as a consequence of sourcing the
+# setup_for_development or setup_deps shell-agnostic scripts.
+#
+# Generated by cetmodules 2.25.04 at Tue Sep 07 13:06:58 CDT
+########################################################################
 
-# The *parent* line must the first non-commented line and defines this product and version
-# The version must be of the form vxx_yy_zz (e.g. v01_02_03)
-parent icaruscode v09_28_02
+####################################
+# Basic information.
 
-defaultqual e20
+##################
+# parent
+##################
+#
+# The parent line - if present - must be the first non-comment line in
+# the file, defining the product's name and version. Any information not
+# specified will be taken from the CMake project(<project-name> VERSION
+# <dot-version>) call in the CMakeLists.txt in the parent directory to
+# the one containing this file.
+#
+# Recommended:
+#
+#>  parent <product-name>
+#
+# Deprecated (will produce a warning):
+#
+#>  parent <product-name> <product-ups-version> [<chain>]...
 
-# These optional lines define where headers, libraries, and executables go and should
-# be used only if your product does not conform to the defaults.
-# Format: directory_type directory_path directory_name
-#   where directory_type is one of incdir, libdir, or bindir
-#   where directory_path is one of product_dir, fq_dir and -
-# Defaults:
-# incdir  product_dir  include
-# fcldir  product_dir  fcl
-# libdir  fq_dir       lib
-# bindir  fq_dir       bin
+##################
+# chain[s]
+##################
+#
+# List the UPS chains ("-c", -t, "new," "current," "old...") to be defined
+# for the package. The trailing `s' is optional and without meaning.
+# Multiple chains may be specified with one or more declarations.
 #
+#>  chains <chain>...
 
-fcldir  product_dir job
-gdmldir product_dir gdml
-fwdir   product_dir scripts
-wpdir   product_dir wire-cell-cfg
+##################
+# defaultqual
+##################
+#
+# The default colon-delimited qualifier set used if one is not provided
+# to setup_for_development. Build type (debug, opt or prof) is optional.
+#
+# Deprecated - a qualifier should generally be provided to the
+# invocation of setup_for_development or setup_deps.
+#
+#>  defaultqual <qualifiers>
 
-# table fragment to set FW_SEARCH_PATH needed
-# to find gdml files:
-table_fragment_begin
-    pathPrepend(FW_SEARCH_PATH, ${ICARUSCODE_DIR}/gdml)
-    pathPrepend(FHICL_FILE_PATH, .:./job)
-    pathPrepend(PYTHONPATH, ${UPS_PROD_DIR}/python)
-    pathPrepend(WIRECELL_PATH, ${UPS_PROD_DIR}/wire-cell-cfg)
-table_fragment_end
+##################
+# noarch
+##################
+#
+# Specify this keyword if the package is architecture-independent. This
+# does not necessarily imply a lack of qualifiers or of a
+# fully-qualified (fq) subdirectory in the installed package.
+#
+#>  noarch
 
-# With "product  version" table below, we now define depdendencies
+##################
+# no_fq_dir
+##################
+#
+# Specify this keyword if the UPS package should not have a
+# fully-qualified (fq) subdirectory in the installed package. This does
+# not necessarily imply noarch or a lack of qualifiers, but caution
+# should be observed if using this keyword for architecture-dependent
+# packages or those with qualifiers to avoid overwritten files when
+# multiple different variants of the package are installed in the same
+# UPS area.
+#
+#>  no_fq_dir
 
-# Add the dependent product and version
+##################
+# define_pythonpath
+##################
+#
+# If define_pythonpath is enabled, the appropriate path will be appended
+# to PYTHONPATH.
+#
+#>  define_pythonpath
+####################################
+parent		icaruscode
+defaultqual	e20
+####################################
 
-product                   version
-sbncode                   v09_28_02
-icarusalg                 v09_28_02
-icarusutil                v09_26_00
-icarus_signal_processing  v09_26_01
-icarus_data               v09_28_01
-fftw                      v3_3_8a
-libwda                    v2_29_1
+<<<<<<< HEAD
+####################################
+# Directory specifications.
+#
+# These optional definitions specify the installed directories where
+# various files headers, libraries, and executables will be found. Some
+# have defaults; others must be specified if files of that type are to
+# be installed. Minimize configuration complexity by using only those
+# definitions necessary for the package.
+#
+##################
+# Notes:
+#
+# * Use directory specifications only if the defaults are inappropriate
+#   for your product.
+#
+# * A specification with defaults may be obviated by specifying a base
+#   of `-' as the only argument.
+#
+# * A directory will be created and appropriate UPS table file entries
+#   made *if and only if* files of that type are installed using the
+#   appropriate directive.
+#
+##################
+# Format:
+#
+#>  <spec>		<base>		[<subdir-name>]
+#
+# <base> may be `-' (negate defaults), "product_dir", or "fq_dir" as
+# desired.
+#
+# Available <spec>s and defaults:
+#
+#>  bindir		fq_dir		bin
+#
+#     Built binaries for public use.
+#
+#>  cmakemoduledir	product_dir	Modules
+#
+#     CMake modules.
+#
+#>  fcldir		product_dir	fcl
+#
+#     FHiCL framework configuration files.
+#
+#>  fwdir
+#
+#     Framework data.
+#
+#>  gdmldir		product_dir	gdml
+#
+#     GDML geometry description files.
+#
+#>  incdir		product_dir	include
+#
+#     Headers.
+#
+#>  libdir		fq_dir		lib
+#
+#     Compiled and other libraries.
+#
+#>  perllib		product_dir	perl5lib
+#
+#     Perl modules, etc.
+#
+#>  set_fwdir
+#
+#     An additional location for framework data to be added to
+#     FW_SEARCH_PATH; may be specified multiple times.
+#
+#>  set_wpdir
+#
+#     An additional location for wirecell data to be added to
+#     WIRECELL_PATH; may be specified multiple times.
+#
+#>  testdir		product_dir	test
+#
+#     Tests.
+#
+#>  wpdir
+#
+#     Wirecell data.
+#
+####################################
+fcldir	product_dir	job
+fwdir	product_dir	scripts
+gdmldir	product_dir	gdml
+wpdir	product_dir	wire-cell-cfg
+####################################
 
-cetbuildtools	          v7_17_01	-	only_for_build
+####################################
+# Product table.
+#
+# Table defining *all* direct UPS package dependencies.
+#
+##################
+# Format:
+#
+#>  product		version		qual	["<table_format=#>"]
+#>  <ups-product_name>	<ups-version>	[<qual-trigger>]	[<flag>]
+#>...
+#>  end_product_list
+#
+# <ups-version> may be a UPS version, a chain option (-c, -t, etc.) or a
+# chain name with a preceding `-'.
+#
+# Valid <qual-trigger> values:
+#
+# * [!]<single-qual>
+#
+#   A single qualifier whose presence in the parent's qualifier will
+#   trigger the setup of the specified version of the product. A prefix
+#   of `!' will negate the match.
+#
+# * <empty>|-
+#
+#   The specified version of the product will always be set up
+#   regardless of the parent's qualifiers. Use `-' as a placeholder if
+#   <flag> is to be specified.
+#
+# * -nq-
+#
+#   Specify explicitly that this product should be set up when the
+#   parent is unqualified.
+#
+# * -default-
+#
+#   The specified version of the product will be set up if no other
+#   product table entry for this product is applicable to the parent's
+#   qualifiers.
+#
+# Valid <flag> values:
+#
+# * only_for_build
+#
+#   The specified product will be set up for building only, and will not
+#   be added to the table file.
+#
+# * optional
+#
+#   It will not be an error if the specified product is not available to
+#   be set up.
+#
+##################
+# Notes.
+#
+# * Under older versions of the product table format ("<table_format=1>"
+#   or unspecified), -nq- had the same meaning as `-' above. When
+#   updating a product_deps file these entries should be reviewed when
+#   <table_format=2> is selected.
+#
+# * "<format>" is a valid alias for "<table_format>".
+#
+# * Under most circumstances (the parent is anything other than
+#   cetmodules), an entry for cetmodules is required.
+#
+# * It is an error for more than one non-(<qual-trigger> == "-default-")
+#   entry to match for a given product.
+#
+####################################
+product				version		qual	flags		<table_format=2>
+fftw				v3_3_9		-
+icarus_data			v09_28_01	-
+icarus_signal_processing	v09_26_01	-
+icarusalg			v09_28_02	-
+icarusutil			v09_26_00	-
+libwda				v2_29_1		-
+sbncode				v09_28_02	-
+cetmodules			v2_25_04	-	only_for_build
 end_product_list
-
+####################################
+# Qualifier table.
+#
+# For each valid qualifer set of the parent, specify how dependencies
+# should be set up.
+#
+# Format:
+#
+#>  qualifier		<prod-spec>...	[<notes>]
+#>  <parent-qual>	<spec>...   [<text...>]
+#>...
+#>  end_qualifier_list
+#
+# <prod-spec> may be a product name or "compiler."
+#
+# <parent-qual> may be a colon-delimited qualifier set, or "-nq-" as a
+# column placeholder in the case of no parent qualifiers.
+#
+# Unless <prod-spec> is "compiler", <spec> may be a colon-delimited
+# qualifier set, or:
+#
+# * -
+#
+#   The dependency is not required for this <parent-qual> and will not
+#   be set up.
+#
+# * -nq-
+#
+#   The dependency will be set up without qualifiers.
+#
+# * -b- (deprecated)
+#
+#   A build-only dependency for this <parent-qual>. If the dependency is
+#   set up in this way, it will be set up without qualifiers. For more
+#   flexibility, use the product table to specify the only_for_build
+#   nature of the dependency and the qualifier table to specifiy how it
+#   should be set up.
+#
+# If <prod-spec> is "compiler", <spec> must be `-' (no compiler
+# required) or the name of the UPS product for the desired compiler. Any
+# qualifiers required to set up the compiler should be specified in the
+# appropriate column for that product.
+#
+##################
+# Notes.
+#
+# * A column for every product in the product table (see above) is
+#   *required* unless the only_for_build flag is specified, in which
+#   case it is optional.
+#
+####################################
+qualifier	sbncode		icarusalg	icarusutil	icarus_signal_processing	icarus_data	fftw	libwda	notes
+c7:debug	c7:debug	c7:debug	c7:debug	c7:debug			-nq-		debug	-nq-
+c7:prof		c7:prof		c7:prof		c7:prof		c7:prof				-nq-		prof	-nq-
+e19:debug	e19:debug	e19:debug	e19:debug	e19:debug			-nq-		debug	-nq-
+e19:prof	e19:prof	e19:prof	e19:prof	e19:prof			-nq-		prof	-nq-
+e20:debug	e20:debug	e20:debug	e20:debug	e20:debug			-nq-		debug	-nq-
+e20:prof	e20:prof	e20:prof	e20:prof	e20:prof			-nq-		prof	-nq-
+=======
 # Restore this temporarily...
 # We now define allowed qualifiers and the corresponding qualifiers for the dependencies.
 # Make a table by adding columns before "notes".
 # e15  - with gcc 6.4.0 and -std=c++1y
 qualifier  sbncode    icarusalg    icarusutil   icarus_signal_processing   icarus_data  fftw        libwda notes
-e20:debug  e20:debug  e20:debug    e20:debug    e20:debug                  -nq-         debug       -nq-
-e20:prof   e20:prof   e20:prof     e20:prof     e20:prof                   -nq-         prof        -nq-
-e19:debug  e19:debug  e19:debug    e19:debug    e19:debug                  -nq-         debug       -nq-
-e19:prof   e19:prof   e19:prof     e19:prof     e19:prof                   -nq-         prof        -nq-
-c7:debug   c7:debug   c7:debug     c7:debug     c7:debug                   -nq-         debug       -nq-
-c7:prof    c7:prof    c7:prof      c7:prof      c7:prof                    -nq-         prof        -nq-
+e20:debug  e20:debug  e20:debug    e20:debug    e20:debug                  -nq-         -nq-        -nq-
+e20:prof   e20:prof   e20:prof     e20:prof     e20:prof                   -nq-         -nq-        -nq-
+e19:debug  e19:debug  e19:debug    e19:debug    e19:debug                  -nq-         -nq-        -nq-
+e19:prof   e19:prof   e19:prof     e19:prof     e19:prof                   -nq-         -nq-        -nq-
+c7:debug   c7:debug   c7:debug     c7:debug     c7:debug                   -nq-         -nq-        -nq-
+c7:prof    c7:prof    c7:prof      c7:prof      c7:prof                    -nq-         -nq-        -nq-
+>>>>>>> origin/feature/team_for_art_v3_09
 end_qualifier_list
+####################################
+
+####################################
+# Table fragment.
+#
+####################################
+table_fragment_begin
+    pathPrepend(FW_SEARCH_PATH, ${ICARUSCODE_DIR}/gdml)
+    pathPrepend(FHICL_FILE_PATH, .:./job)
+    pathPrepend(PYTHONPATH, ${UPS_PROD_DIR}/python)
+    pathPrepend(WIRECELL_PATH, ${UPS_PROD_DIR}/wire-cell-cfg)
+table_fragment_end
+####################################
+
+####################################
+# Backmatter.
+#
+# Comments and editor-specific metadata.
 
 # Preserve tabs and formatting in emacs and vi / vim:
 
 ### Local Variables:
+### mode: sh
 ### tab-width: 8
 ### End:
+
+# vi:set ts=8 noexpandtab:
diff --git a/ups/setup_deps b/ups/setup_deps
deleted file mode 100644
index 72c2e32..0000000
--- a/ups/setup_deps
+++ /dev/null
@@ -1,89 +0,0 @@
-# NO USER-SERVICEABLE PARTS BELOW.
-#
-# There should be as little as possible here,
-# with most of the heavy lifting done by other small scripts
-#
-# When sourcing this file from a script, you may have to tell this
-# source file where it is via the fw_db shell (or env) variable.
-# I.e.:
-#    set fw_db=/some/path; source /some/path/this_file
-# or  fw_db=/some/path; . /some/path/this_file
-
-test $?shell = 1 && set ss=csh || ss=sh
-#echo Shell type is $ss.
-
-# make some things similar. need to use set_ because sh builtin set would hide function set
-# Note: perhaps the trickiest thing in this file is the sh set_ function tries to return the same status
-#       as at the start of the function (which most likely is the result of a back-tick expression
-test "$ss" = csh && alias set_ set && alias vecho_ 'if ($?vv == 1) echo \!*' || eval 'vecho_() { test -n "${vv-}" && echo "$@"; return 0; }'
-test "$ss" =  sh && eval 'set_() { sts=$?;for xx in "$@";do var=`expr "$xx" : "\([^=]*\)"`;val=`expr "$xx" : "[^=]*=\(.*\)"`;eval "$var=\"$val\"";done;return $sts; }'
-test "$ss" =  sh && eval 'setenv() { export $1;eval "$1=\"\${2-}\""; }; source() { file=$1; shift; . $file "$@"; }; unsetenv_() { unset "$@"; }'
-test "$ss" =  sh && eval 'tnotnull() { eval "test -n \"\${$1-}\""; }'                             && eval 'nullout() { "$@" >/dev/null 2>&1; }'
-test "$ss" = csh && alias tnotnull "eval '"'test $?'"\!* -eq 1' && eval '"'test -n "$'"\!*"'"'"'" && alias nullout "\!* >& /dev/null" && alias unsetenv_ unsetenv
-test "$ss" = csh && alias return exit
-
-set_ msg1='ERROR: You MUST setup ups'
-test -z $UPS_DIR && ( echo ""; echo "$msg1"; echo "" ) && return
-
-set_ msg3='ERROR: You MUST specify either -o, -p, or -d'
-set_ msg4='Usage: setup_deps <-d|-o|-p> <qualifier list>'
-test -z "$1" && ( echo ""; echo "$msg4"; echo "$msg3"; echo "" ) && return
-
-# make sure we know where this script lives
-# now if we were passed a path or if not, we can figure it out (maybe if we are interactive)
-#   bash, zsh, ksh and tcsh pass params to a source file, csh does not. but someone will be writing csh scripts
-set_ msg2='Please set shell or env. variable fw_db (to be the path to the framework source code). Fix this and other errors may go away.'
-tnotnull fw_db && set_ db=`sh -c "cd $fw_db >/dev/null 2>&1 && pwd"` && vecho_ 'setting db from fw_db variable' || set_ db=
-
-test -z "$db" && tnotnull BASH_SOURCE && set_ me=`dirname $BASH_SOURCE` && set_ db=`sh -c "cd $me >/dev/null 2>&1 && pwd"` && vecho_ 'setting db via BASH_SOURCE'
-
-# history is applicable only for interactive t/csh
-test -z "$db" -a "$ss" = csh && test $?history = 0 && set history=5  # make sure history 1 works
-test -z "$db" -a "$ss" = csh && set me=`history 1|sed 's/^[ 	0-9:]*//'` && test -n "$me" && set me=`dirname $me[2]` \
-    && set db=`sh -c "cd $me >/dev/null 2>&1 && pwd"` && vecho_ 'setting db via interactive history'
-#echo This script lives in $db
-
-test -z "$db" && echo "$msg2" || vecho_ "db=$db"
-test -n "$db" && setenv CETPKG_SOURCE `dirname $db`
-
-# make sure we know the current directory
-set_ myname=`whoami`
-setenv CETPKG_BUILD /tmp/$myname/setup_deps
-rm -rf $CETPKG_BUILD
-mkdir -p $CETPKG_BUILD
-#echo Build directory is $CETPKG_BUILD
-
-echo The source code directory is $CETPKG_SOURCE
-
-set_ msg5='ERROR: setup of required products has failed'
-
-echo ----------- check this block for errors -----------------------
-set_ setup_fail="false"
-set_ exit_now="false"
-set_ cetb=` grep -e '^[ \t]*cetbuildtools' $CETPKG_SOURCE/ups/product_deps | grep  only_for_build| awk '{ print $1 }' `
-set_ cetv=` grep -e '^[ \t]*cetbuildtools' $CETPKG_SOURCE/ups/product_deps | grep  only_for_build| awk '{ print $2 }' `
-#echo Found $cetb $cetv
-setup -B $cetb $cetv
-test "$?" = 0 || set_ setup_fail="true"
-# now get the rest of the products
-set_ cmd="$CETBUILDTOOLS_DIR/bin/set_dev_products $CETPKG_SOURCE $CETPKG_BUILD $*"
-#echo Ready to run $cmd
-source `$cmd`
-test "$?" = 0 || set_ setup_fail="true"
-#echo "$cmd returned $setup_fail"
-test "$setup_fail" = "true" && echo "$msg5"
-test "$setup_fail" = "true" && set_ exit_now="true"
-test -e "$CETPKG_BUILD/diag_report" && cat $CETPKG_BUILD/diag_report
-echo ----------------------------------------------------------------
-
-test "${exit_now}" = "true" && test "$ss" = csh && unalias tnotnull nullout set_ vecho_ return
-test "${exit_now}" = "true" && unset ss db me thisdir msg1 msg2 msg3 msg4 msg5 setup_fail set_ setenv unsetenv_ tnotnull nullout vecho_
-test "${exit_now}" = "true" && return 1
-
-# final sanity check and report
-source $CETBUILDTOOLS_DIR/bin/set_dep_check_report
-
-# cleanup before exiting
-test "$ss" = csh && unalias tnotnull nullout set_ vecho_ return
-unset ss db me thisdir msg1 msg2 msg3 msg4 msg5 setup_fail
-unset set_ setenv unsetenv_ tnotnull nullout vecho_
diff --git a/ups/setup_for_development b/ups/setup_for_development
index 92c3135..5ee3128 100644
--- a/ups/setup_for_development
+++ b/ups/setup_for_development
@@ -1,94 +1,239 @@
-# NO USER-SERVICEABLE PARTS BELOW.
+########################################################################
+# This script is shell-agnostic, which involves much acrobatics to avoid
+# causing errors in one interpreter or another (*stares in csh*).
 #
-# There should be as little as possible here,
-# with most of the heavy lifting done by other small scripts
+# There should be as little as possible here, with most of the heavy
+# lifting done by other small scripts.
 #
 # When sourcing this file from a script, you may have to tell this
-# source file where it is via the fw_db shell (or env) variable.
-# I.e.:
+# source file where it is via the fw_db shell (or env) variable, i.e.
 #    set fw_db=/some/path; source /some/path/this_file
 # or  fw_db=/some/path; . /some/path/this_file
+#
+# Generated by cetmodules 2.25.04 at Tue Sep 07 13:06:58 CDT
+########################################################################
+
+########################################################################
+# NO USER-SERVICEABLE PARTS BELOW.
+########################################################################
 
-test $?shell = 1 && set ss=csh || ss=sh
-#echo Shell type is $ss.
-
-# make some things similar. need to use set_ because sh builtin set would hide function set
-# Note: perhaps the trickiest thing in this file is the sh set_ function tries to return the same status
-#       as at the start of the function (which most likely is the result of a back-tick expression
-test "$ss" = csh && alias set_ set && alias vecho_ 'if ($?vv == 1) echo \!*' || eval 'vecho_() { test -n "${vv-}" && echo "$@"; return 0; }'
-test "$ss" =  sh && eval 'set_() { sts=$?;for xx in "$@";do var=`expr "$xx" : "\([^=]*\)"`;val=`expr "$xx" : "[^=]*=\(.*\)"`;eval "$var=\"$val\"";done;return $sts; }'
-test "$ss" =  sh && eval 'setenv() { export $1;eval "$1=\"\${2-}\""; }; source() { file=$1; shift; . $file "$@"; }; unsetenv_() { unset "$@"; }'
-test "$ss" =  sh && eval 'tnotnull() { eval "test -n \"\${$1-}\""; }'                             && eval 'nullout() { "$@" >/dev/null 2>&1; }'
-test "$ss" = csh && alias tnotnull "eval '"'test $?'"\!* -eq 1' && eval '"'test -n "$'"\!*"'"'"'" && alias nullout "\!* >& /dev/null" && alias unsetenv_ unsetenv
-test "$ss" = csh && alias return exit
-
-set_ msg1='ERROR: You MUST setup ups'
-test -z $UPS_DIR && ( echo ""; echo "$msg1"; echo "" ) && return
-
-set_ msg3='ERROR: You MUST specify either -o, -p, or -d'
-set_ msg4='Usage: setup_for_development <-d|-o|-p> <qualifier list>'
-test -z "$1" && ( echo ""; echo "$msg4"; echo "$msg3"; echo "" ) && return
-
-# make sure we know where this script lives
-# now if we were passed a path or if not, we can figure it out (maybe if we are interactive)
-#   bash, zsh, ksh and tcsh pass params to a source file, csh does not. but someone will be writing csh scripts
-set_ msg2='Please set shell or env. variable fw_db (to be the path to the framework source code). Fix this and other errors may go away.'
-tnotnull fw_db && set_ db=`sh -c "cd $fw_db >/dev/null 2>&1 && pwd"` && vecho_ 'setting db from fw_db variable' || set_ db=
-
-test -z "$db" && tnotnull BASH_SOURCE && set_ me=`dirname $BASH_SOURCE` && set_ db=`sh -c "cd $me >/dev/null 2>&1 && pwd"` && vecho_ 'setting db via BASH_SOURCE'
-
-# history is applicable only for interactive t/csh
-test -z "$db" -a "$ss" = csh && test $?history = 0 && set history=5  # make sure history 1 works
-test -z "$db" -a "$ss" = csh && set me=`history 1|sed 's/^[ 	0-9:]*//'` && test -n "$me" && set me=`dirname $me[2]` \
-    && set db=`sh -c "cd $me >/dev/null 2>&1 && pwd"` && vecho_ 'setting db via interactive history'
-#echo This script lives in $db
-
-test -z "$db" && echo "$msg2" || vecho_ "db=$db"
-test -n "$db" && setenv CETPKG_SOURCE `dirname $db`
-
-# make sure we know the current directory
-setenv CETPKG_BUILD `pwd`
-#echo Build directory is $CETPKG_BUILD
-
-echo The working build directory is $CETPKG_BUILD
-echo The source code directory is $CETPKG_SOURCE
-
-set_ msg5='ERROR: setup of required products has failed'
-
-echo ----------- check this block for errors -----------------------
-set_ setup_fail="false"
-set_ exit_now="false"
-set_ cetb=` grep -e '^[ \t]*cetbuildtools' $CETPKG_SOURCE/ups/product_deps | grep  only_for_build| awk '{ print $1 }' `
-set_ cetv=` grep -e '^[ \t]*cetbuildtools' $CETPKG_SOURCE/ups/product_deps | grep  only_for_build| awk '{ print $2 }' `
-#echo Found $cetb $cetv
-setup -B $cetb $cetv
-test "$?" = 0 || set_ setup_fail="true"
-# now get the rest of the products
-set_ cmd="$CETBUILDTOOLS_DIR/bin/set_dev_products $CETPKG_SOURCE $CETPKG_BUILD $*"
-#echo Ready to run $cmd
-source `$cmd`
-test "$?" = 0 || set_ setup_fail="true"
-#echo "$cmd returned $setup_fail"
-test "$setup_fail" = "true" && echo "$msg5"
-test "$setup_fail" = "true" && set_ exit_now="true"
-test -e "$CETPKG_BUILD/diag_report" && cat $CETPKG_BUILD/diag_report
-echo ----------------------------------------------------------------
-
-test "${exit_now}" = "true" && test "$ss" = csh && unalias tnotnull nullout set_ vecho_ return
-test "${exit_now}" = "true" && unset ss db me thisdir msg1 msg2 msg3 msg4 msg5 setup_fail set_ setenv unsetenv_ tnotnull nullout vecho_
-test "${exit_now}" = "true" && return 1
-
-# add lib to LD_LIBRARY_PATH
-source $CETBUILDTOOLS_DIR/bin/set_dev_lib
-# add bin to path
-source $CETBUILDTOOLS_DIR/bin/set_dev_bin
-# set FHICL_FILE_PATH
-source $CETBUILDTOOLS_DIR/bin/set_dev_fhicl
-
-# final sanity check and report
-source $CETBUILDTOOLS_DIR/bin/set_dev_check_report
-
-# cleanup before exiting
-test "$ss" = csh && unalias tnotnull nullout set_ vecho_ return
-unset ss db me thisdir msg1 msg2 msg3 msg4 msg5 setup_fail
-unset set_ setenv unsetenv_ tnotnull nullout vecho_
+# Determine shell flavor.
+true && test $?shell = 1 && set _cetpkg_shell_flavor=csh || _cetpkg_shell_flavor=sh
+
+####################################
+# A common set of commands to use to hide as many shell flavor
+# differences as possible.
+
+##################
+# IMPORTANT NOTE:
+#
+# Following extensive tests in multiple shells, I have reached the
+# conclusion that it is not actually possible for a function to mirror
+# the semantics of an assignment with respect to the status code of ``
+# and compound statements joined with "||" or "&&". To handle this, we
+# write a large chunk of shell code to a temporary file in the current
+# directory a.k.a. CETPKG_BUILD with shell variable assignments correct
+# according to the shell flavor, and then source it. This also allows us
+# to deal with the fact that some shells don't pass arguments to sourced
+# scripts *stares harder in csh*.
+#
+# 2020-06-24 CHG.
+##################
+
+# If we're C-flavored, set up the commands using alias.
+test "$_cetpkg_shell_flavor" = csh && \
+  set _cetpkg_nobuild="" && \
+  set _cetpkg_shell_var_set=set\\1 && \
+  alias vecho_ 'if ($?vv == 1) echo \>\> \!*' && \
+  alias unsetenv_ unsetenv && \
+  alias tnotnull "eval '"'test $?'"\!* -eq 1' && eval '"'test -n "$'"\!*"'"'"'" && \
+  alias nullout "\!* >& /dev/null" && \
+  alias __TOP_EOF__ '' && \
+  alias return exit
+
+# For Bourne-flavored shells, use functions.
+test "$_cetpkg_shell_flavor" = sh && \
+  _cetpkg_nobuild="" && \
+  _cetpkg_shell_var_set= && \
+  eval 'vecho_() { test -n "${vv-}" && echo ">> $*"; return 0; }' && \
+  eval 'setenv() { eval "$1=\"\${2-}\"; export $1"; }' && \
+  eval 'unsetenv_() { unset "$@"; }' && \
+  eval 'source() { . "$@"; }' && \
+  eval 'tnotnull() { eval "test -n \"\${$1-}\""; }' && \
+  eval 'nullout() { "$@" >/dev/null 2>&1; }'
+####################################
+
+##################
+# Check for UPS (uses alias for return in C-flavored shells).
+test -z "$UPS_DIR" && \
+  ( echo ""; echo "ERROR: you MUST set up UPS"; echo "" ) && \
+  return 1 || true
+##################
+
+####################################
+# Need to find ourselves to set CETPKG_SOURCE.
+
+# Define empty variables for C-flavor shells to make things easier.
+test "$_cetpkg_shell_flavor" = csh && \
+  set _cetpkg_fw_db= _cetpkg_myself= _cetpkg_mydir=
+
+# If user has set fw_db, identify our top-level source directory now.
+test "$_cetpkg_shell_flavor" = csh && tnotnull fw_db && \
+  set _cetpkg_fw_db=`sh -c "cd $fw_db:q >/dev/null 2>&1 && /bin/pwd -P"` && \
+  vecho_ "found ourselves through fw_db" || true
+test "$_cetpkg_shell_flavor" = sh && tnotnull fw_db && \
+  _cetpkg_fw_db=`sh -c "cd \"$fw_db\" >/dev/null 2>&1 && /bin/pwd -P"` && \
+  vecho_ "found ourselves through fw_db" || true
+
+##################
+# For Bash and zsh, identify ourselves now so we don't have to go
+# through acrobatics later in the sourced script.
+test "$_cetpkg_shell_flavor" = sh && tnotnull BASH_SOURCE && \
+  _cetpkg_myself="$BASH_SOURCE" && test -n "$BASH_SOURCE" && \
+  vecho_ "found ourselves through BASH_SOURCE" || true
+test "$_cetpkg_shell_flavor" = sh -a -z "$_cetpkg_myself" && \
+  tnotnull ZSH_VERSION && eval '_cetpkg_myself="${(%):-%x}"' && \
+  test -n "$_cetpkg_myself" && \
+  vecho_ "found ourselves through ZSH prompt logic" || true
+test "$_cetpkg_shell_flavor" = sh && tnotnull _cetpkg_myself && \
+  _cetpkg_mydir=`dirname "$_cetpkg_myself"` && \
+  _cetpkg_fw_db=`sh -c "cd $_cetpkg_mydir >/dev/null 2>&1 && /bin/pwd -P"` || true
+##################
+
+##################
+# History is applicable only for interactive t/csh.
+test -z "$_cetpkg_fw_db" -a "$_cetpkg_shell_flavor" = csh -a $?history = 0 && \
+  set history=5  || true
+test -z "$_cetpkg_fw_db" -a "$_cetpkg_shell_flavor" = csh && \
+  set _cetpkg_mydir=`history 1|sed -Ee 's/^[[:space:][:digit:]:]*.*\bsource[[:space:]]+//'` && \
+  test -n "$_cetpkg_mydir" && set _cetpkg_mydir=`dirname $_cetpkg_mydir[1]:q` && \
+  set _cetpkg_fw_db=`sh -c "cd $_cetpkg_mydir:q >/dev/null 2>&1 && /bin/pwd -P"` && \
+  vecho_ 'setting db via interactive history' || true
+##################
+
+# Set CETPKG_SOURCE.
+test -n "$_cetpkg_fw_db" && \
+  vecho_ "_cetpkg_fw_db=$_cetpkg_fw_db" && \
+  setenv CETPKG_SOURCE `dirname $_cetpkg_fw_db` || \
+  printf "WARNING: please set shell or env. variable fw_db (to be the path to the\n\
+         framework source code). Fix this and other errors may go away.\n"
+####################################
+
+##################
+# Set CETPKG_BUILD.
+setenv CETPKG_BUILD `/bin/pwd -P`
+##################
+
+########################################################################
+# Write the rest of ourselves to a file and source it to handle status
+# code semantics for variable assignments.
+#
+# Note that even here we have to play a trick or two due to the fact
+# that we have to deal with the difference in the way sh- and csh-flavor
+# shells handle a quoted delimiter word for a HERE document: the latter
+# expect the delimiter to include the quoting; the former do not. This
+# is the reason for the C-flavored __TOP_EOF__ alias, and the explicit
+# return at the end of the sourced script.
+#
+########################################################################
+
+sed -Ee 's&\b__SET__([[:space:]]+)&'$_cetpkg_shell_var_set'&g' \
+  -e 's&__SETUP_ARGS__&'"$*"'&g' \
+  > ./setup_common.$_cetpkg_shell_flavor <<\__TOP_EOF__
+########################################################################
+
+####################################
+# Personality check: are we setup_deps or setup_for_development?
+#
+# If we're sourcing setup.in directly (e.g. for cetmodules itself) then
+# we select "setup_for_development" behavior, otherwise _cetpkg_nobuild
+# will be set appropriately by CMake's CONFIGURE() command for
+# setup_for_development or setup_deps.
+
+test -z "$_cetpkg_nobuild" -o "$_cetpkg_nobuild" = "--nobuild" || \
+  __SET__ _cetpkg_nobuild="" || true
+####################################
+
+####################################
+# Initial info.
+
+printf "\n";
+test -z "$_cetpkg_nobuild" && \
+  echo "The working build directory is $CETPKG_BUILD" || true
+cat <<EOF
+The source code directory is $CETPKG_SOURCE
+
+---------------------- check this block for errors ---------------------
+EOF
+
+__SET__ _cetpkg_status=""
+####################################
+
+####################################
+# Attempt to find a suitable cetmodules to set up.
+
+__SET__ _cetpkg_cetmsetup=`sed -nE 's&^[[:space:]]*(cetmodules)[[:space:]]+([^[:space:]]+).*\bonly_for_build\b.*$&\1 \2&p' "$CETPKG_SOURCE/ups/product_deps"`
+test -z "_cetpkg_cetmsetup" -a ! -x "$CETPKG_SOURCE/libexec/set_dev_products" && \
+  __SET__ _cetpkg_status=1 && \
+  echo "ERROR: unable to find suitable cetmodules >= 2.00.00" || true
+test -n "$_cetpkg_status" -o -z "$_cetpkg_cetmsetup" || setup -B $_cetpkg_cetmsetup
+test $? != 0 && __SET__ _cetpkg_status=1 && \
+  echo "ERROR: setup of $_cetpkg_cetmsetup has failed" || true
+test -z "$_cetpkg_status$_cetpkg_cetmsetup" && setenv PATH `dropit -sfe "$CETPKG_SOURCE/bin"` && __SET__ _cetpkg_cettop="$CETPKG_SOURCE" || true
+test -z "$_cetpkg_status$_cetpkg_cettop" -a -n "$CETMODULES_DIR" && __SET__ _cetpkg_cettop="$CETMODULES_DIR"
+####################################
+
+####################################
+# Generate the setup script to set up dependencies.
+
+test -n "$_cetpkg_status" || \
+  __SET__ _cetpkg_setup="`${_cetpkg_cettop}/libexec/set_dev_products $_cetpkg_nobuild __SETUP_ARGS__`"
+test $? != 0 -o -z "$_cetpkg_setup" && __SET__ _cetpkg_status=1 && \
+  echo "ERROR: generation of setup script has failed" || true
+####################################
+
+####################################
+# Source the setup script to set up dependencies.
+
+test -n "$_cetpkg_status" || source "$_cetpkg_setup"
+test $? != 0 && __SET__ _cetpkg_status=1 && \
+  echo "ERROR: setup of required products has failed" || true
+__SET__ _cetpkg_setup_errlog="$CETPKG_BUILD/cetpkg_setup.err"
+test -s "$_cetpkg_setup_errlog" && cat "$_cetpkg_setup_errlog" || \
+  rm -f "$_cetpkg_setup_errlog"
+####################################
+
+cat <<EOF
+------------------------------------------------------------------------
+
+EOF
+
+# Final sanity check and report.
+test -n "$_cetpkg_status" -o -n "$_cetpkg_nobuild" || \
+  "$_cetpkg_cettop/libexec/verify_build_environment" "$CETPKG_BUILD"
+test $? != 0 && __SET__ _cetpkg_status=1 && \
+  echo "ERROR: unable to verify build environment" || true
+
+####################################
+# Clean up before exiting.
+
+# Clean up C-flavor aliases and prepare to return^H^H^H^H^H^Hexit.
+test "$_cetpkg_shell_flavor" = csh && \
+  unalias vecho_ unsetenv_ tnotnull nullout __TOP_EOF__ return && \
+  set return=exit || return=return
+
+# Finish cleanup and exit. Note the use of eval so we can unset
+# everything including $return and $_cetpkg_status.
+eval "unset vecho_ setenv unsetenv_ source tnotnull nullout "\
+"_cetpkg_nobuild _cetpkg_shell_var_set "\
+"_cetpkg_fw_db _cetpkg_myself _cetpkg_mydir _cetpkg_cetmsetup "\
+"_cetpkg_cettop _cetpkg_setup _cetpkg_setup_errlog "\
+"_cetpkg_shell_flavor return _cetpkg_status; \
+$return $_cetpkg_status"
+####################################
+
+########################################################################
+\__TOP_EOF__
+__TOP_EOF__
+
+source ./setup_common.$_cetpkg_shell_flavor
