diff --git a/CMakeLists.txt b/CMakeLists.txt
index 886465d..49c599a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,4 +1,4 @@
-# ======================================================================
+#======================================================================
 #  larsoft main build file
 #
 #  cd .../path/to/build/directory
@@ -11,18 +11,15 @@
 #  make install
 #  make package (builds distribution tarfile)
 # ======================================================================
+cmake_minimum_required(VERSION 3.19 FATAL_ERROR)
 
 
-cmake_minimum_required(VERSION 3.19 FATAL_ERROR)
 
-project(sbncode VERSION 09.37.01.02 LANGUAGES CXX)
+find_package(cetmodules 2.29.07 REQUIRED)
+project(sbncode VERSION 09.37.02.03 LANGUAGES CXX)
 
 message(STATUS "\n\n  ==========================   ${PROJECT_NAME}   ==========================")
 
-# cetbuildtools contains our cmake modules
-find_package(cetbuildtools REQUIRED)
-
-list(APPEND CMAKE_MODULE_PATH $ENV{CANVAS_ROOT_IO_DIR}/Modules $ENV{ART_DIR}/Modules )
 
 include(CetCMakeEnv)
 cet_cmake_env()
@@ -38,98 +35,102 @@ cet_set_compiler_flags(DIAGS CAUTIOUS
   ALLOW_DEPRECATIONS
   EXTRA_FLAGS -pedantic -Wno-unused-local-typedefs -Wno-undefined-var-template
 )
-
-cet_report_compiler_flags()
+set(fcl_dir caf)
+cet_report_compiler_flags(REPORT_THRESHOLD VERBOSE)
 
 # these are minimum required versions, not the actual product versions
-find_ups_product(art)
-find_ups_product(messagefacility)
-find_ups_product(art_root_io)
-find_ups_product(gsl)
-find_ups_product(nusimdata)
-find_ups_product(nug4)
-find_ups_product(nugen)
-find_ups_product(nurandom)
-find_ups_product(nutools)
-find_ups_product(genie)
-find_ups_product(lardataobj)
-find_ups_product(larcoreobj)
-find_ups_product(larcorealg)
-find_ups_product(lardataalg)
-find_ups_product(larcore)
-find_ups_product(lardata)
-find_ups_product(larevt)
-find_ups_product(larsim)
-find_ups_product(larreco)
-find_ups_product(larpandora)
-find_ups_product(larsoft v09_00_00)
-find_ups_product(artdaq_core v3_06_01)
-find_ups_product(ifbeam)
-find_ups_product(ifbeam_art)
-find_ups_product(libwda) 
-find_ups_product(sbnobj v09_10_00)
-find_ups_product(sbndata v01_03)
-find_ups_product(ifdhc)
-find_ups_product(ifdh_art)
-find_ups_product(log4cpp)
-find_ups_boost()
-find_ups_root()
-#find_ups_product(sbndcode v06_67_00)
-#find_ups_product(uboonecode v06_67_00)
-find_ups_product( sbndaq_artdaq_core )
+find_package(art) 
+find_package(messagefacility) 
+find_package(art_root_io) 
+find_package(nusimdata) 
+find_package(nug4) 
+find_package(nugen) 
+find_package(nurandom) 
+find_package(nutools) 
+find_package(GENIE) 
+find_package(lardataobj) 
+find_package(larcoreobj) 
+find_package(larcorealg) 
+find_package(lardataalg) 
+find_package(larcore) 
+find_package(lardata) 
+find_package(larevt) 
+find_package(larsim) 
+find_package(larreco) 
+find_package(larpandora) 
+find_package(larpandoracontent) 
+find_package(artdaq_core ) 
+find_package(sbnobj ) 
+find_package(sbnanaobj )
+find_package(sbndaq_artdaq_core )
+find_package(sbndata) 
+find_package(ifdhc) 
+find_package(ifdh_art) 
+find_package(ifbeam)
+find_package(ifbeam_art)
+find_package( trace )
+find_package( libwda )
+
+find_package(CLHEP COMPONENTS ALL)
+find_package(ROOT REQUIRED)
+find_package(Geant4 REQUIRED)
+find_package(Boost COMPONENTS system)
+find_library( GSL NAMES gsl )
+find_library( LOG4CPP NAMES log4cpp )
+find_library( XML2 NAMES xml2 )
 
 
 # GENIE libraries are needed, added Aug2021 by Keng 
 # genie (copied from nugen)
   cet_find_library( LOG4CPP      NAMES log4cpp      PATHS ENV LOG4CPP_LIB NO_DEFAULT_PATH )
-  cet_find_library( GFWMSG       NAMES GFwMsg       PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GFWREG       NAMES GFwReg       PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GFWALG       NAMES GFwAlg       PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GFWINT       NAMES GFwInt       PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GFWGHEP      NAMES GFwGHEP      PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GFWNUM       NAMES GFwNum       PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GFWUTL       NAMES GFwUtl       PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GFWPARDAT    NAMES GFwParDat    PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GFWEG        NAMES GFwEG        PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GFWNTP       NAMES GFwNtp       PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHXSIG      NAMES GPhXSIg      PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHPDF       NAMES GPhPDF       PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHNUCLST    NAMES GPhNuclSt    PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHCMN       NAMES GPhCmn       PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHDCY       NAMES GPhDcy       PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHHADTRANSP NAMES GPhHadTransp PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHHADNZ     NAMES GPhHadnz     PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHDEEX      NAMES GPhDeEx      PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHAMNGXS    NAMES GPhAMNGXS    PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHAMNGEG    NAMES GPhAMNGEG    PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHCHMXS     NAMES GPhChmXS     PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHCOHXS     NAMES GPhCohXS     PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHCOHEG     NAMES GPhCohEG     PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHDISXS     NAMES GPhDISXS     PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHDISEG     NAMES GPhDISEG     PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHDFRCXS    NAMES GPhDfrcXS    PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHDFRCEG    NAMES GPhDfrcEG    PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHGLWRESXS  NAMES GPhGlwResXS  PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHGLWRESEG  NAMES GPhGlwResEG  PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHIBDXS     NAMES GPhIBDXS     PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHIBDEG     NAMES GPhIBDEG     PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHMNUCXS    NAMES GPhMNucXS    PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHMNUCEG    NAMES GPhMNucEG    PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHMEL       NAMES GPhMEL       PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHNUELXS    NAMES GPhNuElXS    PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHNUELEG    NAMES GPhNuElEG    PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHQELXS     NAMES GPhQELXS     PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHQELEG     NAMES GPhQELEG     PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHRESXS     NAMES GPhResXS     PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHRESEG     NAMES GPhResEG     PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHSTRXS     NAMES GPhStrXS     PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHSTREG     NAMES GPhStrEG     PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GPHNDCY      NAMES GPhNDcy      PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GTLGEO       NAMES GTlGeo       PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GTLFLX       NAMES GTlFlx       PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GRWFWK       NAMES GRwFwk       PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GRWIO        NAMES GRwIO        PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
-  cet_find_library( GRWCLC       NAMES GRwClc       PATHS ENV GENIE_LIB NO_DEFAULT_PATH )
+  set( GFWMSG       ${GFwMsg_LIBRARY}        )
+  set( GFWREG       ${GFwReg_LIBRARY}       )
+  set( GFWALG       ${GFwAlg_LIBRARY}       )
+  set( GFWINT       ${GFwInt_LIBRARY}        )
+  set( GFWGHEP      ${GFwGHEP_LIBRARY}       )
+  set( GFWNUM       ${GFwNum_LIBRARY}        )
+  set( GFWUTL       ${GFwUtl_LIBRARY}        )
+  set( GFWPARDAT    ${GFwParDat_LIBRARY}     )
+  set( GFWEG        ${GFwEG_LIBRARY}         )
+  set( GFWNTP       ${GFwNtp_LIBRARY}        )
+  set( GPHXSIG      ${GPhXSIg_LIBRARY}       )
+  set( GPHPDF       ${GPhPDF_LIBRARY}        )
+  set( GPHNUCLST    ${GPhNuclSt_LIBRARY}     )
+  set( GPHCMN       ${GPhCmn_LIBRARY}        )
+  set( GPHDCY       ${GPhDcy_LIBRARY}        )
+  set( GPHHADTRANSP ${GPhHadTransp_LIBRARY}  )
+  set( GPHHADNZ     ${GPhHadnz_LIBRARY}      )
+  set( GPHDEEX      ${GPhDeEx_LIBRARY}       )
+  set( GPHAMNGXS    ${GPhAMNGXS_LIBRARY}     )
+  set( GPHAMNGEG    ${GPhAMNGEG_LIBRARY}     )
+  set( GPHCHMXS     ${GPhChmXS_LIBRARY}      )
+  set( GPHCOHXS     ${GPhCohXS_LIBRARY}      )
+  set( GPHCOHEG     ${GPhCohEG_LIBRARY}      )
+  set( GPHDISXS     ${GPhDISXS_LIBRARY}      )
+  set( GPHDISEG     ${GPhDISEG_LIBRARY}      )
+  set( GPHDFRCXS    ${GPhDfrcXS_LIBRARY}     )
+  set( GPHDFRCEG    ${GPhDfrcEG_LIBRARY}     )
+  set( GPHGLWRESXS  ${GPhGlwResXS_LIBRARY}   )
+  set( GPHGLWRESEG  ${GPhGlwResEG_LIBRARY}   )
+  set( GPHIBDXS     ${GPhIBDXS_LIBRARY}      )
+  set( GPHIBDEG     ${GPhIBDEG_LIBRARY}      )
+  set( GPHMNUCXS    ${GPhMNucXS_LIBRARY}     )
+  set( GPHMNUCEG    ${GPhMNucEG_LIBRARY}     )
+  set( GPHMEL       ${GPhMEL_LIBRARY}        )
+  set( GPHNUELXS    ${GPhNuElXS_LIBRARY}     )
+  set( GPHNUELEG    ${GPhNuElEG_LIBRARY}     )
+  set( GPHQELXS     ${GPhQELXS_LIBRARY}      )
+  set( GPHQELEG     ${GPhQELEG_LIBRARY}      )
+  set( GPHRESXS     ${GPhResXS_LIBRARY}      )
+  set( GPHRESEG     ${GPhResEG_LIBRARY}      )
+  set( GPHSTRXS     ${GPhStrXS_LIBRARY}      )
+  set( GPHSTREG     ${GPhStrEG_LIBRARY}      )
+  set( GPHNDCY      ${GPhNDcy_LIBRARY}       )
+  set( GTLGEO       ${GTlGeo_LIBRARY}        )
+  set( GTLFLX       ${GTlFlx_LIBRARY}        )
+  set( GRWFWK       ${GRwFwk_LIBRARY}        )
+  set( GRWIO        ${GRwIO_LIBRARY}         )
+  set( GRWCLC       ${GRwClc_LIBRARY}        )
 
 ## (continued) GENIE pre-R-3 used GSL via ROOT's Math libs, now makes direct call not available via that route
 cet_find_library( GSL NAMES gsl PATHS ENV GSL_LIB NO_DEFAULT_PATH )
@@ -192,8 +193,7 @@ include(ArtMake)
 include(BuildPlugins)
 
 add_subdirectory(sbncode)
-add_subdirectory(ups)
 add_subdirectory(fcl)
 
 # packaging utility
-include(UseCPack)
+cet_cmake_config()
diff --git a/sbncode/BeamSpillInfoRetriever/BNBRetriever/BNBRetriever_module.cc b/sbncode/BeamSpillInfoRetriever/BNBRetriever/BNBRetriever_module.cc
index d439a5f..1b724a4 100644
--- a/sbncode/BeamSpillInfoRetriever/BNBRetriever/BNBRetriever_module.cc
+++ b/sbncode/BeamSpillInfoRetriever/BNBRetriever/BNBRetriever_module.cc
@@ -24,7 +24,7 @@
 
 #include "sbnobj/Common/POTAccounting/BNBSpillInfo.h"
 
-#include "IFBeam_service.h"
+#include "ifdh_art/IFBeamService/IFBeam_service.h"
 #include "ifbeam_c.h"
 #include "MWRData.h"
 
@@ -206,6 +206,14 @@ sbn::BNBRetriever::BNBRetriever(Parameters const& params)
 
 void sbn::BNBRetriever::produce(art::Event& e)
 {
+
+  // If this is the first event in the run, then ignore it
+  // We do not currently have the ability to figure out the first
+  // spill that the DAQ was sensitive to, so don't try to save any
+  // spill information
+  //
+  // TODO: long-term goal -- can we fix this?
+  if (e.event() == 1) return;
   
   TriggerInfo_t const triggerInfo = extractTriggerInfo(e);
   
@@ -403,6 +411,11 @@ int sbn::BNBRetriever::matchMultiWireData(
   matched_MWR.resize(3);
   
   
+  // NOTE: for now, this is dead code because we don't
+  // do anything for the first event in a run. We may want to revisit 
+  // this later to understand if there is a way we can do the POT
+  // accounting in the first event.
+  //
   // Need to handle the first event in a run differently
   if(isFirstEventInRun){
     
@@ -428,12 +441,10 @@ int sbn::BNBRetriever::matchMultiWireData(
   for (size_t i = 0; i < times_temps.size(); i++) {
     
     // Only continue if these times are matched to our DAQ time
-    // plus or minus some time padding, currently using 3.3 ms 
-    // which is half the Booster Rep Rate
     
     if(!isFirstEventInRun){//We already addressed the "first event" above
-      if(times_temps[i] > (triggerInfo.t_current_event+fTimePad)){continue;}
-      if(times_temps[i] <= (triggerInfo.t_previous_event-fTimePad)){continue;}
+      if(times_temps[i] > (triggerInfo.t_current_event)){continue;}
+      if(times_temps[i] <= (triggerInfo.t_previous_event)){continue;}
     }
 
     
@@ -543,8 +554,8 @@ sbn::BNBSpillInfo sbn::BNBRetriever::makeBNBSpillInfo
   
   //Store everything in our data-product
   sbn::BNBSpillInfo beamInfo;
-  beamInfo.TOR860 = TOR860;
-  beamInfo.TOR875 = TOR875;
+  beamInfo.TOR860 = TOR860*1e12; //add in factor of 1e12 protons to get correct POT units
+  beamInfo.TOR875 = TOR875*1e12; //add in factor of 1e12 protons to get correct POT units
   beamInfo.LM875A = LM875A;
   beamInfo.LM875B = LM875B;
   beamInfo.LM875C = LM875C;
diff --git a/sbncode/BeamSpillInfoRetriever/BNBRetriever/CMakeLists.txt b/sbncode/BeamSpillInfoRetriever/BNBRetriever/CMakeLists.txt
index 99ec10d..5e392b0 100644
--- a/sbncode/BeamSpillInfoRetriever/BNBRetriever/CMakeLists.txt
+++ b/sbncode/BeamSpillInfoRetriever/BNBRetriever/CMakeLists.txt
@@ -1,16 +1,18 @@
-find_ups_product(ifbeam)
-find_ups_product(ifbeam_art)
+find_package(ifbeam)
+find_package(ifbeam_art)
 
-include_directories( $ENV{IFBEAM_FQ_DIR}/include )
-include_directories( $ENV{LIBWDA_FQ_DIR}/include )
-include_directories( $ENV{IFDHC_FQ_DIR}/inc )
-include_directories( $ENV{IFDH_ART_INC} )
-cet_find_library( IFBEAMSERVICE        NAMES IFBeam_service    PATHS ENV IFDH_ART_LIB NO_DEFAULT_PATH )
-cet_find_library( IFBEAM               NAMES ifbeam            PATHS ENV IFBEAM_LIB   NO_DEFAULT_PATH )
+include_directories( $ENV{IFBEAM_DIR}/include )
+include_directories( $ENV{LIBWDA_DIR}/include )
+link_directories( $ENV{LIBWDA_DIR}/lib )
+include_directories( $ENV{IFDHC_DIR}/inc )
+link_directories( $ENV{IFDHC_DIR}/lib )
+include_directories( $ENV{IFDH_ART_DIR}/include )
+include_directories( $ENV{TRACE_INC} )
+find_library( IFBEAM               NAMES ifbeam            PATHS $ENV{IFBEAM_DIR} )
 
 link_libraries( ${LIB_NAME} -L$ENV{BOOST_LIB} -lboost_system ${ROOTLIB} )
 
-art_make_library(
+cet_make_library(LIBRARIES Boost::system
 	LIBRARY_NAME sbn_BNBSpillInfoRetriever_MWRData
 	SOURCE MWRData.cpp
 )
@@ -21,28 +23,27 @@ simple_plugin(BNBRetriever module
 	${ART_FRAMEWORK_SERVICES_REGISTRY}
 	${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
 	${ART_FRAMEWORK_PRINCIPAL}
-	art_Persistency_Common
-	art_Utilities canvas
+	art::Persistency_Common
+	art::Utilities canvas::canvas
 	${MF_MESSAGELOGGER}
 	${MF_UTILITIES}
 	${FHICLCPP}
-	cetlib cetlib_except
+	cetlib::cetlib cetlib_except::cetlib_except
 	${ROOT_EVE_LIB_LIST}
-	${ROOT_X3d}
+	ROOT::X3d
 	${ROOT_BASIC_LIB_LIST}
         ${Boost_PROGRAM_OPTIONS_LIBRARY} ${Boost_FILESYSTEM_LIBRARY} ${Boost_DATE_TIME_LIBRARY} ${Boost_SERIALIZATION_LIBRARY}
-        ${Boost_SYSTEM_LIBRARY}
-	MF_MessageLogger
-       	sbnobj_Common_POTAccounting
-	#${IFBEAMSERVICE}
-	#${IFBEAM}
-	ifbeam
-	ifdh_art::IFBeam_service
+        Boost::system
+	messagefacility::MF_MessageLogger
+	ifbeam::ifbeam
+        ifdh_art::IFBeam_service
 	sbndaq_artdaq_core::sbndaq-artdaq-core_Overlays_Common
   	sbndaq_artdaq_core::sbndaq-artdaq-core_Overlays
 	sbndaq_artdaq_core::sbndaq-artdaq-core_Overlays_ICARUS	
         artdaq_core::artdaq-core_Utilities
-	sbn_BNBSpillInfoRetriever_MWRData	
+	sbn_BNBSpillInfoRetriever_MWRData
+        sbnobj::Common_POTAccounting
+        larcorealg::CoreUtils	
 )
 
 install_headers()
diff --git a/sbncode/BeamSpillInfoRetriever/CMakeLists.txt b/sbncode/BeamSpillInfoRetriever/CMakeLists.txt
index fba5bc1..1a6fecf 100644
--- a/sbncode/BeamSpillInfoRetriever/CMakeLists.txt
+++ b/sbncode/BeamSpillInfoRetriever/CMakeLists.txt
@@ -1,4 +1,5 @@
 add_subdirectory(BNBRetriever)
+add_subdirectory(NuMIRetriever)
 add_subdirectory(EXTRetriever)
 add_subdirectory(job)
 
diff --git a/sbncode/BeamSpillInfoRetriever/EXTRetriever/CMakeLists.txt b/sbncode/BeamSpillInfoRetriever/EXTRetriever/CMakeLists.txt
index 4a3ceaf..12a9289 100644
--- a/sbncode/BeamSpillInfoRetriever/EXTRetriever/CMakeLists.txt
+++ b/sbncode/BeamSpillInfoRetriever/EXTRetriever/CMakeLists.txt
@@ -1,24 +1,27 @@
 
-include_directories( $ENV{IFBEAM_FQ_DIR}/include )
-include_directories( $ENV{LIBWDA_FQ_DIR}/include )
-include_directories( $ENV{IFDHC_FQ_DIR}/inc )
-include_directories( $ENV{IFDH_ART_INC} )
+include_directories( $ENV{IFBEAM_DIR}/include )
+include_directories( $ENV{LIBWDA_DIR}/include )
+include_directories( $ENV{IFDHC_DIR}/inc )
+include_directories( $ENV{IFDH_ART_DIR}/include )
+include_directories( $ENV{TRACE_INC} )
 
 simple_plugin(EXTRetriever module
 	${ART_FRAMEWORK_CORE}
 	${ART_FRAMEWORK_SERVICES_REGISTRY}
 	${ART_FRAMEWORK_SERVICES}
 	${ART_FRAMEWORK_PRINCIPAL}
-	art_Persistency_Common
-	art_Utilities canvas
+	art::Persistency_Common
+	art::Utilities canvas::canvas
 	${FHICLCPP}
-	cetlib cetlib_except
-	MF_MessageLogger
-       	sbnobj_Common_POTAccounting
+	cetlib::cetlib cetlib_except::cetlib_except
+	messagefacility::MF_MessageLogger
+       	sbnobj::Common_POTAccounting
 	sbndaq_artdaq_core::sbndaq-artdaq-core_Overlays_Common
   	sbndaq_artdaq_core::sbndaq-artdaq-core_Overlays
 	sbndaq_artdaq_core::sbndaq-artdaq-core_Overlays_ICARUS	
         artdaq_core::artdaq-core_Utilities
+        lardata::Utilities
+        larcore::Geometry_AuxDetGeometry_service
 )
 
 install_headers()
diff --git a/sbncode/BeamSpillInfoRetriever/NuMIRetriever/CMakeLists.txt b/sbncode/BeamSpillInfoRetriever/NuMIRetriever/CMakeLists.txt
new file mode 100644
index 0000000..f065235
--- /dev/null
+++ b/sbncode/BeamSpillInfoRetriever/NuMIRetriever/CMakeLists.txt
@@ -0,0 +1,42 @@
+find_package(ifbeam)
+find_package(ifbeam_art)
+
+include_directories( $ENV{IFBEAM_DIR}/include )
+include_directories( $ENV{LIBWDA_DIR}/include )
+include_directories( $ENV{IFDHC_DIR}/inc )
+include_directories( $ENV{IFDH_ART_INC} )
+cet_find_library( IFBEAMSERVICE        NAMES IFBeam_service    PATHS ENV IFDH_ART_LIB NO_DEFAULT_PATH )
+cet_find_library( IFBEAM               NAMES ifbeam            PATHS ENV IFBEAM_LIB   NO_DEFAULT_PATH )
+
+
+simple_plugin(NuMIRetriever module
+        ${ART_FRAMEWORK_CORE}
+        ${ART_FRAMEWORK_SERVICES_REGISTRY}
+        ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
+        ${ART_FRAMEWORK_PRINCIPAL}
+        art_Persistency_Common
+        art_Utilities canvas
+        ${MF_MESSAGELOGGER}
+        ${MF_UTILITIES}
+        ${FHICLCPP}
+        cetlib cetlib_except
+        ${ROOT_EVE_LIB_LIST}
+        ${ROOT_X3d}
+        ${ROOT_BASIC_LIB_LIST}
+        ${Boost_PROGRAM_OPTIONS_LIBRARY} ${Boost_FILESYSTEM_LIBRARY} ${Boost_DATE_TIME_LIBRARY} ${Boost_SERIALIZATION_LIBRARY}
+        ${Boost_SYSTEM_LIBRARY}
+        MF_MessageLogger
+        sbnobj_Common_POTAccounting
+        #${IFBEAMSERVICE}
+        #${IFBEAM}
+	ifbeam::ifbeam
+	ifdh_art::IFBeam_service
+        sbndaq_artdaq_core::sbndaq-artdaq-core_Overlays_Common
+        sbndaq_artdaq_core::sbndaq-artdaq-core_Overlays
+        sbndaq_artdaq_core::sbndaq-artdaq-core_Overlays_ICARUS
+        artdaq_core::artdaq-core_Utilities
+)
+
+install_headers()
+install_fhicl()
+install_source()
diff --git a/sbncode/BeamSpillInfoRetriever/NuMIRetriever/NuMIRetriever_module.cc b/sbncode/BeamSpillInfoRetriever/NuMIRetriever/NuMIRetriever_module.cc
new file mode 100644
index 0000000..fcf71fa
--- /dev/null
+++ b/sbncode/BeamSpillInfoRetriever/NuMIRetriever/NuMIRetriever_module.cc
@@ -0,0 +1,262 @@
+/*
+ * NuMI Beam Spill Info Retriever module for ICARUS
+ * Based heavily on code by Z. Pavlovic written for MicroBooNE
+ * Based heavily on code by NOvA collaboration (Thanks NOvA!)
+*/
+
+#include "art/Framework/Core/EDProducer.h"
+#include "art/Framework/Core/ModuleMacros.h"
+#include "art/Framework/Principal/Event.h"
+#include "art/Framework/Principal/Handle.h"
+#include "art/Framework/Principal/Run.h"
+#include "art/Framework/Principal/SubRun.h"
+#include "canvas/Utilities/InputTag.h"
+#include "fhiclcpp/ParameterSet.h"
+#include "messagefacility/MessageLogger/MessageLogger.h"
+#include "lardata/Utilities/AssociationUtil.h"
+#include "lardataobj/Utilities/sparse_vector.h"
+#include "larcoreobj/SimpleTypesAndConstants/RawTypes.h"
+#include "larcorealg/Geometry/Exceptions.h"
+
+#include "artdaq-core/Data/Fragment.hh"
+#include "sbndaq-artdaq-core/Overlays/ICARUS/ICARUSTriggerUDPFragment.hh"
+
+#include "lardataalg/DetectorInfo/DetectorPropertiesStandard.h"
+#include "lardata/DetectorInfoServices/DetectorPropertiesService.h"
+#include "sbnobj/Common/POTAccounting/NuMISpillInfo.h"
+
+#include "IFBeam_service.h"
+#include "ifbeam_c.h"
+//#include "MWRData.h"
+
+#include <memory>
+#include <optional>
+#include <vector>
+
+namespace sbn {
+  class NuMIRetriever;
+}
+
+class sbn::NuMIRetriever : public art::EDProducer {
+public:
+  explicit NuMIRetriever(fhicl::ParameterSet const &p);
+  NuMIRetriever(NuMIRetriever const&) = delete;
+  NuMIRetriever(NuMIRetriever &&) = delete;
+  NuMIRetriever& operator=(NuMIRetriever const&) = delete;
+  NuMIRetriever& operator=(NuMIRetriever&&) = delete;
+  
+  // Required functions.
+  void produce(art::Event& e) override;
+  void beginSubRun(art::SubRun& sr) override;
+  void endSubRun(art::SubRun& sr) override;
+  
+private:
+  // input labels
+  std::vector< sbn::NuMISpillInfo > fOutbeamInfos;
+  double fTimePad;
+  double fBFPEpsilion;
+  std::string fURL;
+  //MWRData mwrdata;
+  std::string raw_data_label_;
+  std::string fDeviceUsedForTiming;
+  int TotalBeamSpills;
+  art::ServiceHandle<ifbeam_ns::IFBeam> ifbeam_handle;
+  std::unique_ptr<ifbeam_ns::BeamFolder> bfp;
+};
+
+sbn::NuMIRetriever::NuMIRetriever(fhicl::ParameterSet const& p)
+  : EDProducer{p},
+  fTimePad(p.get<double>("TimePadding", 0.5)), //epsilon in seconds, buffer time to look for spills
+  fBFPEpsilion(p.get<double>("BFPEpsilon", 0.02)), // 20 ms, tuned for BNB, check for NuMI here might need to be larger
+  raw_data_label_(p.get<std::string>("raw_data_label")),
+  fDeviceUsedForTiming(p.get<std::string>("DeviceUsedForTiming")),
+  bfp(ifbeam_handle->getBeamFolder(p.get<std::string>("Bundle"), p.get<std::string>("URL"), p.get<double>("TimeWindow")))
+{
+
+  bfp->set_epsilon(fBFPEpsilion);
+  bfp->setValidWindow(500.);
+  produces<std::vector<sbn::NuMISpillInfo>, art::InSubRun>();
+  TotalBeamSpills = 0;
+}
+
+void sbn::NuMIRetriever::produce(art::Event &e)
+{
+
+  // If this is the first event in the run, then ignore it
+  // We do not currently have the ability to figure out the first
+  // spill that the DAQ was sensitive to, so don't try to save any
+  // spill information
+  //
+  // TODO: long-term goal -- can we fix this?
+  if (e.event() == 1) return;
+
+  int gate_type = 0;
+  art::Handle< std::vector<artdaq::Fragment> > raw_data_ptr;
+  e.getByLabel(raw_data_label_, "ICARUSTriggerUDP", raw_data_ptr);
+  auto const & raw_data = (*raw_data_ptr);
+
+  double t_current_event  = 0;
+  double t_previous_event = 0;
+  double number_of_gates_since_previous_event = 0;
+
+  for(auto raw_datum : raw_data){
+
+    uint64_t artdaq_ts = raw_datum.timestamp();
+    icarus::ICARUSTriggerUDPFragment frag(raw_datum);
+    std::string data = frag.GetDataString();
+    char *buffer = const_cast<char*>(data.c_str());
+    icarus::ICARUSTriggerInfo datastream_info = icarus::parse_ICARUSTriggerString(buffer);
+    gate_type = datastream_info.gate_type;
+    number_of_gates_since_previous_event = frag.getDeltaGatesNuMI();
+
+    t_current_event = static_cast<double>(artdaq_ts)/(1000000000.); //check this offset... 
+    if(gate_type == 2)
+      t_previous_event = (static_cast<double>(frag.getLastTimestampNuMI()))/(1000000000.);
+    else
+      t_previous_event = (static_cast<double>(frag.getLastTimestampOther()))/(1000000000.);
+
+  }
+
+  std::cout << std::setprecision(19) << "Previous : " << t_previous_event << ", Current : " << t_current_event << std::endl;
+  //We only want to process NuMI gates, i.e. type 2
+  if(gate_type == 2)
+  {
+    // Keep track of the number of beam gates the DAQ thinks
+    //   are in this job   
+    TotalBeamSpills += number_of_gates_since_previous_event;
+    
+    // These lines get everything primed within the IFBeamDB
+    //   They seem redundant but they are needed
+    try{auto cur_vec_temp = bfp->GetNamedVector((t_previous_event)-fTimePad,"E:HP121[]");} catch (WebAPIException &we) {}
+    
+    try{auto cur_vec_temp_2 = bfp->GetNamedVector((t_current_event)+fTimePad,"E:VP121[]");} catch (WebAPIException &we) {}
+    try{auto packed_MTGTDS_temp = bfp->GetNamedVector((t_current_event)+fTimePad, "E:MTGTDS[]");} catch(WebAPIException &we) {}
+    std::vector<double> times_temps = bfp->GetTimeList(fDeviceUsedForTiming);
+
+    int spill_count = 0;
+    // Iterating through each of the beamline times
+    for (size_t i = 0; i < times_temps.size(); i++) {
+
+      // Only continue if these times are matched to our DAQ time
+      // plus or minus some time padding, currently using 3.3 ms
+      // which is half the Booster Rep Rate
+      if(e.event() != 1){//We already addressed the "first event" above 
+        if(times_temps[i] > t_current_event){continue;}
+        if(times_temps[i] <= t_previous_event){continue;}
+      }
+
+      //count found spills
+      spill_count++;
+
+      //initialize all devices found in NuMISpillInfo.h in sbnobj
+      double HRNDIR = -1.;
+      double NSLINA = -1.;
+      double NSLINB = -1.;
+      double NSLINC = -1.;
+      double NSLIND = -1.;
+      double TOR101 = -1.;
+      double TORTGT = -1.;
+      double TR101D = -1.;
+      double TRTGTD = -1.;
+      std::vector< double > HP121;
+      std::vector< double > VP121;
+      std::vector< double > HPTGT;
+      std::vector< double > VPTGT;
+      std::vector< double > HITGT;
+      std::vector< double > VITGT;
+      std::vector< double > MTGTDS;
+      double TRTGTD_time = -1.;
+      std::cout << "Grabbing IFBeam info!" << std::endl;
+      try{bfp->GetNamedData(times_temps[i], "E:TRTGTD@",&TRTGTD,&TRTGTD_time);}catch (WebAPIException &we) {std::cout << "At time : " << times_temps[i] << " " << "got exception: " << we.what() << "\n";}
+      try{bfp->GetNamedData(times_temps[i], "E:TR101D",&TR101D);}catch (WebAPIException &we) {std::cout << "At time : " << times_temps[i] << " " << "got exception: " << we.what() << "\n";}
+      try{bfp->GetNamedData(times_temps[i], "E:HRNDIR",&HRNDIR);}catch (WebAPIException &we) {std::cout << "At time : " << times_temps[i] << " " << "got exception: " << we.what() << "\n";}
+      try{bfp->GetNamedData(times_temps[i], "E:NSLINA",&NSLINA);}catch (WebAPIException &we) {std::cout << "At time : " << times_temps[i] << " " << "got exception: " << we.what() << "\n";}
+      try{bfp->GetNamedData(times_temps[i], "E:NSLINB",&NSLINB);}catch (WebAPIException &we) {std::cout << "At time : " << times_temps[i] << " " << "got exception: " << we.what() << "\n";}
+      try{bfp->GetNamedData(times_temps[i], "E:NSLINC",&NSLINC);}catch (WebAPIException &we) {std::cout << "At time : " << times_temps[i] << " " << "got exception: " << we.what() << "\n";}
+      try{bfp->GetNamedData(times_temps[i], "E:NSLIND",&NSLIND);}catch (WebAPIException &we) {std::cout << "At time : " << times_temps[i] << " " << "got exception: " << we.what() << "\n";}
+      try{bfp->GetNamedData(times_temps[i], "E:TOR101",&TOR101);}catch (WebAPIException &we) {std::cout << "At time : " << times_temps[i] << " " << "got exception: " << we.what() << "\n";}
+      try{bfp->GetNamedData(times_temps[i], "E:TORTGT",&TORTGT);}catch (WebAPIException &we) {std::cout << "At time : " << times_temps[i] << " " << "got exception: " << we.what() << "\n";}
+      // BPM Positions and Intensities - they each have 7 elements
+      // First is an average value of a few batches (often 2,3,4)
+      // used for auto-tuning, so we should disregard it
+      
+      try{HP121 = bfp->GetNamedVector(times_temps[i], "E:HP121[]");}catch (WebAPIException &we) {std::cout << "At time : " << times_temps[i] << " " << "got exception: " << we.what() << "\n";}
+      try{VP121 = bfp->GetNamedVector(times_temps[i], "E:VP121[]");}catch (WebAPIException &we) {std::cout << "At time : " << times_temps[i] << " " <<"got exception: " << we.what() << "\n";}
+      try{HPTGT = bfp->GetNamedVector(times_temps[i], "E:HPTGT[]");}catch (WebAPIException &we) {std::cout << "At time : " << times_temps[i] << " " <<"got exception: " << we.what() << "\n";}
+      try{VPTGT = bfp->GetNamedVector(times_temps[i], "E:VPTGT[]");}catch (WebAPIException &we) {std::cout << "At time : " << times_temps[i] << " " <<"got exception: " << we.what() << "\n";}
+      try{HITGT = bfp->GetNamedVector(times_temps[i], "E:HITGT[]");}catch (WebAPIException &we) {std::cout << "At time : " << times_temps[i] << " " <<"got exception: " << we.what() << "\n";}
+      try{VITGT = bfp->GetNamedVector(times_temps[i], "E:VITGT[]");}catch (WebAPIException &we) {std::cout << "At time : " << times_temps[i] << " " <<"got exception: " << we.what() << "\n";}
+      try{MTGTDS = bfp->GetNamedVector(times_temps[i], "E:MTGTDS[]");}catch (WebAPIException &we) {std::cout << "At time : " << times_temps[i] << " " <<"got exception: " << we.what() << "\n";}
+      
+      std::cout << "Finished getting IFBeam info" << std::endl;
+      std::cout << "BFP Time: " << times_temps[i] << " TOROID Time: " << TRTGTD_time << " TOROID COUNT: " << TRTGTD << std::endl;
+      unsigned long int time_closest_int = (int) TRTGTD_time;
+      double time_closest_ns = (TRTGTD_time - time_closest_int)*1000000000;
+
+      sbn::NuMISpillInfo NuMIbeamInfo;
+      NuMIbeamInfo.TORTGT = TORTGT*1e12; //include factor of 1e12 protons in POT calculation
+      NuMIbeamInfo.TOR101 = TOR101*1e12; //include factor of 1e12 protons in POT calculation
+      NuMIbeamInfo.TRTGTD = TRTGTD*1e12; //include factor of 1e12 protons in POT calculation 
+      NuMIbeamInfo.TR101D = TR101D*1e12; //include factor of 1e12 protons in POT calculation 
+      NuMIbeamInfo.HRNDIR = HRNDIR;
+      NuMIbeamInfo.NSLINA = NSLINA;
+      NuMIbeamInfo.NSLINB = NSLINB;
+      NuMIbeamInfo.NSLINC = NSLINC;
+      NuMIbeamInfo.NSLIND = NSLIND;
+      
+      NuMIbeamInfo.HP121 = HP121;
+      NuMIbeamInfo.VP121 = VP121;
+      NuMIbeamInfo.HPTGT = HPTGT;
+      NuMIbeamInfo.VPTGT = VPTGT;
+      NuMIbeamInfo.HITGT = HITGT;
+      NuMIbeamInfo.VITGT = VITGT;
+      NuMIbeamInfo.MTGTDS = MTGTDS;
+
+      NuMIbeamInfo.time = times_temps[i];
+      NuMIbeamInfo.event = e.event();
+      NuMIbeamInfo.spill_time_s = time_closest_int;
+      NuMIbeamInfo.spill_time_ns = time_closest_ns;
+      // Save the Number of DAQ Gates in the first saved spill
+      if (spill_count == 1) {
+        NuMIbeamInfo.daq_gates = number_of_gates_since_previous_event;
+      }
+      else {
+        NuMIbeamInfo.daq_gates = 0;
+      }
+      
+      fOutbeamInfos.push_back(NuMIbeamInfo);
+    }
+    if(spill_count > number_of_gates_since_previous_event)
+      std::cout << "Event Spills : " << spill_count << ", DAQ Spills : " << number_of_gates_since_previous_event << " \t \t ::: WRONG!"<< std::endl;
+    else
+      std::cout << "Event Spills : " << spill_count << ", DAQ Spills : " << number_of_gates_since_previous_event << std::endl;
+  }
+}
+
+void sbn::NuMIRetriever::beginSubRun(art::SubRun& sr)
+{
+  return;
+}
+
+void sbn::NuMIRetriever::endSubRun(art::SubRun& sr)
+{
+  // We will add all of the BNBSpillInfo data-products to the
+  // art::SubRun so it persists
+  // currently this is ~2.7 kB/event or ~0.07 kB/spill
+
+  std::cout << "Total number of DAQ Spills : " << TotalBeamSpills << std::endl;
+  std::cout << "Total number of Selected Spills : " << fOutbeamInfos.size() << std::endl;
+
+  auto p =  std::make_unique< std::vector< sbn::NuMISpillInfo > >(fOutbeamInfos);
+
+  sr.put(std::move(p), art::subRunFragment());
+
+  // Clear the (now old) infos
+  fOutbeamInfos.clear();
+
+  return;
+}
+
+DEFINE_ART_MODULE(sbn::NuMIRetriever)
+
+
diff --git a/sbncode/BeamSpillInfoRetriever/job/numispillinfo.fcl b/sbncode/BeamSpillInfoRetriever/job/numispillinfo.fcl
new file mode 100644
index 0000000..da5b146
--- /dev/null
+++ b/sbncode/BeamSpillInfoRetriever/job/numispillinfo.fcl
@@ -0,0 +1,17 @@
+
+BEGIN_PROLOG
+
+numispillinfo: {
+
+    module_type: "NuMIRetriever"
+    TimePadding: 0.5 #unit seconds, Booster Rep Rate is 15 Hz, so the closest spill could be 66ms away
+    URL: "" #keep this blank and we're good
+    Bundle: "NuMI_Physics_A9"
+    MultiWireBundle: "BNBMultiWire"
+    TimeWindow: "600" #seconds
+    BFPEpsilon: 0.2 # 200 ms
+    MWR_TimeWindow: "3601" #seconds
+    raw_data_label: "daq"
+    DeviceUsedForTiming: "E:TRTGTD"
+}
+END_PROLOG
diff --git a/sbncode/BeamSpillInfoRetriever/job/run_numiinfo_sbn.fcl b/sbncode/BeamSpillInfoRetriever/job/run_numiinfo_sbn.fcl
new file mode 100644
index 0000000..d34b0f6
--- /dev/null
+++ b/sbncode/BeamSpillInfoRetriever/job/run_numiinfo_sbn.fcl
@@ -0,0 +1,33 @@
+#include "numispillinfo.fcl"
+
+process_name: NuMIInfoGen
+
+services:{
+  IFBeam:{}
+}
+
+
+source: {
+  module_type: RootInput
+}
+
+physics: {
+ producers: {
+   numiinfo: @local::numispillinfo
+ }
+
+ simulate: [numiinfo ]
+ stream1: [ out1 ]
+ trigger_paths: [ simulate ]
+ end_paths: [ stream1 ]
+}
+
+outputs: {
+ out1: {
+   module_type: RootOutput
+   fileName: "%ifb_%tc_numiinfo.root"
+   dataTier: "raw"
+   compressionLevel: 1
+ }
+}
+
diff --git a/sbncode/BeamSpillInfoRetriever/job/run_numiinfo_sbn_dropfrag.fcl b/sbncode/BeamSpillInfoRetriever/job/run_numiinfo_sbn_dropfrag.fcl
new file mode 100644
index 0000000..5d939a5
--- /dev/null
+++ b/sbncode/BeamSpillInfoRetriever/job/run_numiinfo_sbn_dropfrag.fcl
@@ -0,0 +1,5 @@
+#include "run_numiinfo_sbn.fcl"
+
+outputs.out1.outputCommands: [
+  "keep *_*_*_NuMIInfoGen"
+]
diff --git a/sbncode/CAFMaker/CAFMakerParams.h b/sbncode/CAFMaker/CAFMakerParams.h
index b700b1a..b23db90 100644
--- a/sbncode/CAFMaker/CAFMakerParams.h
+++ b/sbncode/CAFMaker/CAFMakerParams.h
@@ -73,6 +73,18 @@ namespace caf
       Comment("List of suffixes to add to TPC reco tag names (e.g. cryo0 cryo1)")
     };
 
+    Atom<string> BNBPOTDataLabel {
+      Name("BNBPOTDataLabel"),
+      Comment("Label of BNBRetriever module"),
+      "bnbinfo"
+    };
+
+    Atom<string> NuMIPOTDataLabel {
+      Name("NuMIPOTDataLabel"),
+      Comment("Label of NuMIRetriever module"),
+      "numiinfo"
+    };
+
     Atom<string> G4Label {
       Name("G4Label"),
       Comment("Label of G4 module."),
@@ -115,6 +127,12 @@ namespace caf
       "fmatch" // same for icarus and sbnd
     };
 
+    Atom<string> CRUMBSLabel {
+      Name("CRUMBSLabel"),
+      Comment("Base label of CRUMBS ID producer."),
+      "crumbs"
+    };
+
     Atom<string> HitLabel {
       Name("HitLabel"),
       Comment("Base label of the TPC Hit producer."),
@@ -216,7 +234,19 @@ namespace caf
       Comment("Label of sbn CRT tracks."),
       "crttrack" // same for icarus and sbnd
     };
-    
+
+    Atom<long long> CRTSimT0Offset {
+      Name("CRTSimT0Offset"),
+      Comment("start of beam gate/simulation time in the simulated CRT clock"),
+      0,
+    };
+
+    Atom<art::InputTag> TriggerLabel {
+      Name("TriggerLabel"),
+      Comment("Label of trigger."),
+      "daqTrigger"
+    };
+
     Atom<string> FlashTrigLabel {
       Name("FlashTrigLabel"),
       Comment("Label of bool of passing flash trigger."),
diff --git a/sbncode/CAFMaker/CAFMaker_module.cc b/sbncode/CAFMaker/CAFMaker_module.cc
index 60f867b..3e14be3 100644
--- a/sbncode/CAFMaker/CAFMaker_module.cc
+++ b/sbncode/CAFMaker/CAFMaker_module.cc
@@ -17,6 +17,7 @@
 #include "sbncode/CAFMaker/FillFlashMatch.h"
 #include "sbncode/CAFMaker/FillTrue.h"
 #include "sbncode/CAFMaker/FillReco.h"
+#include "sbncode/CAFMaker/FillExposure.h"
 #include "sbncode/CAFMaker/Utils.h"
 
 // C/C++ includes
@@ -37,7 +38,7 @@
 #include <libgen.h>
 #endif
 
-#include <IFDH_service.h>
+#include "ifdh_art/IFDHService/IFDH_service.h"
 
 // ROOT includes
 #include "TFile.h"
@@ -99,6 +100,10 @@
 #include "sbnobj/Common/Reco/MVAPID.h"
 #include "sbnobj/Common/Reco/ScatterClosestApproach.h"
 #include "sbnobj/Common/Reco/StoppingChi2Fit.h"
+#include "sbnobj/Common/POTAccounting/BNBSpillInfo.h"
+#include "sbnobj/Common/POTAccounting/NuMISpillInfo.h"
+#include "sbnobj/Common/Reco/CRUMBSResult.h"
+
 
 #include "canvas/Persistency/Provenance/ProcessConfiguration.h"
 #include "larcoreobj/SummaryData/POTSummary.h"
@@ -108,6 +113,8 @@
 #include "sbnanaobj/StandardRecord/SRGlobal.h"
 
 #include "sbnanaobj/StandardRecord/Flat/FlatRecord.h"
+#include "lardataobj/RawData/ExternalTrigger.h"
+#include "lardataobj/RawData/TriggerData.h"
 
 // // CAFMaker
 #include "sbncode/CAFMaker/AssociationUtil.h"
@@ -166,16 +173,18 @@ class CAFMaker : public art::EDProducer {
   double fSubRunPOT;
   double fTotalSinglePOT;
   double fTotalEvents;
+  std::vector<caf::SRBNBInfo> fBNBInfo; ///< Store detailed BNB info to save into the first StandardRecord of the output file
+  std::vector<caf::SRNuMIInfo> fNuMIInfo; ///< Store detailed NuMI info to save into the first StandardRecord of the output file
   // int fCycle;
   // int fBatch;
 
-  TFile* fFile;
-  TTree* fRecTree;
+  TFile* fFile = 0;
+  TTree* fRecTree = 0;
 
-  TFile* fFlatFile;
-  TTree* fFlatTree;
+  TFile* fFlatFile = 0;
+  TTree* fFlatTree = 0;
 
-  flat::Flat<caf::StandardRecord>* fFlatRecord;
+  flat::Flat<caf::StandardRecord>* fFlatRecord = 0;
 
   Det_t fDet;  ///< Detector ID in caf namespace typedef
 
@@ -215,6 +224,13 @@ class CAFMaker : public art::EDProducer {
                                         const art::Event& evt,
                                         const art::InputTag& tag) const;
 
+  /// Equivalent of FindOneP except a return that is !isValid() prints a
+  /// messsage and aborts if StrictMode is true.
+  template <class T, class U>
+  art::FindOneP<T> FindOnePStrict(const U& from, const art::Event& evt,
+				  const art::InputTag& label) const;
+
+
   /// \brief Retrieve an object from an association, with error handling
   ///
   /// This can go wrong in two ways: either the FindManyP itself is
@@ -485,20 +501,42 @@ void CAFMaker::beginRun(art::Run& run) {
 
 //......................................................................
 void CAFMaker::beginSubRun(art::SubRun& sr) {
-  // get the POT
+
   // get POT information
-  art::Handle<sumdata::POTSummary> pot_handle;
-  sr.getByLabel("generator", pot_handle);
+  fBNBInfo.clear();
+  fNuMIInfo.clear();
+  fSubRunPOT = 0;
 
-  if (pot_handle.isValid()) {
+  if(auto bnb_spill = sr.getHandle<std::vector<sbn::BNBSpillInfo>>(fParams.BNBPOTDataLabel())){
+    FillExposure(*bnb_spill, fBNBInfo, fSubRunPOT);
+    fTotalPOT += fSubRunPOT;
+  }
+  else if (auto numi_spill = sr.getHandle<std::vector<sbn::NuMISpillInfo>>(fParams.NuMIPOTDataLabel())) {
+    FillExposureNuMI(*numi_spill, fNuMIInfo, fSubRunPOT);
+    fTotalPOT += fSubRunPOT;
+  }
+  else if(auto pot_handle = sr.getHandle<sumdata::POTSummary>(fParams.GenLabel())){
     fSubRunPOT = pot_handle->totgoodpot;
     fTotalPOT += fSubRunPOT;
   }
-  std::cout << "POT: " << fSubRunPOT << std::endl;
+  else{
+    if(!fParams.BNBPOTDataLabel().empty() || !fParams.GenLabel().empty() || !fParams.NuMIPOTDataLabel().empty()){
+      std::cout << "Found neither BNB data POT info under '"
+                << fParams.BNBPOTDataLabel()
+                << "' not NuMIdata POT info under '"
+                << fParams.NuMIPOTDataLabel()
+                << "' nor MC POT info under '"
+                << fParams.GenLabel() << "'"
+                << std::endl;
+      if(fParams.StrictMode()) abort();
+    }
 
-  fFirstInSubRun = true;
+    // Otherwise, if one label is blank, maybe no POT was the expected result
+  }
 
+  std::cout << "POT: " << fSubRunPOT << std::endl;
 
+  fFirstInSubRun = true;
 }
 
 //......................................................................
@@ -661,6 +699,25 @@ art::FindManyP<T, D> CAFMaker::FindManyPDStrict(const U& from,
 }
 
 //......................................................................
+template <class T, class U>
+art::FindOneP<T> CAFMaker::FindOnePStrict(const U& from,
+					  const art::Event& evt,
+					  const art::InputTag& tag) const {
+  art::FindOneP<T> ret(from, evt, tag);
+
+  if (!tag.label().empty() && !ret.isValid() && fParams.StrictMode()) {
+    std::cout << "CAFMaker: No Assn from '"
+              << cet::demangle_symbol(typeid(from).name()) << "' to '"
+              << cet::demangle_symbol(typeid(T).name())
+              << "' found under label '" << tag << "'. "
+              << "Set 'StrictMode: false' to continue anyway." << std::endl;
+    abort();
+  }
+
+  return ret;
+}
+
+//......................................................................
 template <class T>
 bool CAFMaker::GetAssociatedProduct(const art::FindManyP<T>& fm, int idx,
                                     T& ret) const {
@@ -955,10 +1012,39 @@ void CAFMaker::produce(art::Event& evt) noexcept {
   GetByLabelStrict(evt, fParams.CRTHitLabel(), crthits_handle);
   // fill into event
   if (crthits_handle.isValid()) {
+
+    //==== gate start time
+    //==== 03/31/22 : 1600000 ns = 1.6 ms is the default T0Offset in MC
+    //==== https://github.com/SBNSoftware/icaruscode/blob/v09_37_02_01/icaruscode/CRT/crtsimmodules_icarus.fcl#L11
+    uint64_t m_gate_start_timestamp = fParams.CRTSimT0Offset(); // ns
+    if(isRealData){
+
+      art::Handle< std::vector<raw::ExternalTrigger> > externalTrigger_handle;
+      evt.getByLabel( fParams.TriggerLabel(), externalTrigger_handle );
+      const std::vector<raw::ExternalTrigger> &externalTrgs = *externalTrigger_handle;
+
+      art::Handle< std::vector<raw::Trigger> > trigger_handle;
+      evt.getByLabel( fParams.TriggerLabel(), trigger_handle );
+      const std::vector<raw::Trigger> &trgs = *trigger_handle;
+
+      if(externalTrgs.size()==1 && trgs.size()==1){
+        long long TriggerAbsoluteTime = externalTrgs[0].GetTrigTime(); // Absolute time of trigger
+        double BeamGateRelativeTime = trgs[0].BeamGateTime(); // BeamGate time w.r.t. electronics clock T0 in us
+        double TriggerRelativeTime = trgs[0].TriggerTime(); // Trigger time w.r.t. electronics clock T0 in us
+        m_gate_start_timestamp = TriggerAbsoluteTime + (int)(BeamGateRelativeTime*1000-TriggerRelativeTime*1000);
+      }
+      else{
+        std::cout << "Unexpected in " << evt.id() << ": there are " << trgs.size()
+          << " triggers in '" << fParams.TriggerLabel().encode() << "' data product."
+          << " Please contact CAFmaker maintainer." << std::endl;
+        abort();
+      }
+    }
+
     const std::vector<sbn::crt::CRTHit> &crthits = *crthits_handle;
     for (unsigned i = 0; i < crthits.size(); i++) {
       srcrthits.emplace_back();
-      FillCRTHit(crthits[i], fParams.CRTUseTS0(), srcrthits.back());
+      FillCRTHit(crthits[i], m_gate_start_timestamp, fParams.CRTUseTS0(), srcrthits.back());
     }
   }
 
@@ -1028,6 +1114,14 @@ void CAFMaker::produce(art::Event& evt) noexcept {
       slcHits = fmSlcHits.at(0);
     }
 
+    art::FindOneP<sbn::CRUMBSResult> foSlcCRUMBS =
+      FindOnePStrict<sbn::CRUMBSResult>(sliceList, evt,
+          fParams.CRUMBSLabel() + slice_tag_suff);
+    const sbn::CRUMBSResult *slcCRUMBS = nullptr;
+    if (foSlcCRUMBS.isValid()) {
+      slcCRUMBS = foSlcCRUMBS.at(0).get();
+    }
+
     art::FindManyP<sbn::SimpleFlashMatch> fm_sFM =
       FindManyPStrict<sbn::SimpleFlashMatch>(fmPFPart, evt,
                                              fParams.FlashMatchLabel() + slice_tag_suff);
@@ -1196,6 +1290,7 @@ void CAFMaker::produce(art::Event& evt) noexcept {
     FillSliceFlashMatch(fmatch, recslc);
     FillSliceFlashMatchA(fmatch, recslc);
     FillSliceVertex(vertex, recslc);
+    FillSliceCRUMBS(slcCRUMBS, recslc);
 
     // select slice
     if (!SelectSlice(recslc, fParams.CutClearCosmic())) continue;
@@ -1436,7 +1531,14 @@ void CAFMaker::produce(art::Event& evt) noexcept {
   rec.hdr.ismc    = !isRealData;
   rec.hdr.det     = fDet;
   rec.hdr.fno     = fFileNumber;
-  rec.hdr.pot     = fSubRunPOT;
+  if(fFirstInFile)
+  {
+    rec.hdr.pot   = fSubRunPOT;
+    rec.hdr.nbnbinfo = fBNBInfo.size();
+    rec.hdr.bnbinfo = fBNBInfo;
+    rec.hdr.nnumiinfo = fNuMIInfo.size();
+    rec.hdr.numiinfo = fNuMIInfo;
+  }
   rec.hdr.ngenevt = n_gen_evt;
   rec.hdr.mctype  = mctype;
   rec.hdr.first_in_file = fFirstInFile;
@@ -1465,6 +1567,10 @@ void CAFMaker::produce(art::Event& evt) noexcept {
 
   srcol->push_back(rec);
   evt.put(std::move(srcol));
+
+  fBNBInfo.clear();
+  fNuMIInfo.clear();
+  rec.hdr.pot = 0;
 }
 
 void CAFMaker::endSubRun(art::SubRun& sr) {
diff --git a/sbncode/CAFMaker/CMakeLists.txt b/sbncode/CAFMaker/CMakeLists.txt
index bb2a232..10fd327 100644
--- a/sbncode/CAFMaker/CMakeLists.txt
+++ b/sbncode/CAFMaker/CMakeLists.txt
@@ -1,87 +1,86 @@
 # for classes_def.xml
-include_directories ( ${CMAKE_CURRENT_SOURCE_DIR} )
+include_directories ( ${CMAKE_CURRENT_SOURCE_DIR} ) ### MIGRATE-ACTION-RECOMMENDED: use target_link_directories() with target semantics
 #set( PACKAGE CAFMaker )
 FILE( GLOB src_files *.cxx )
 
 add_subdirectory(RecoUtils)
 add_subdirectory(bin)
 
-art_make_library( LIBRARY_NAME sbncode_CAFMaker
+include_directories( $ENV{SRPROXY_DIR}/include )
+art_make_library( LIBRARY_NAME sbncode::CAFMaker
                   SOURCE ${src_files}
                   LIBRARIES
-                  sbnanaobj_StandardRecord
-                  sbnanaobj_StandardRecordFlat
-                  ${ART_FRAMEWORK_CORE}
-                  ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                  ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                  ${ART_FRAMEWORK_SERVICES}
-                  ${ART_FRAMEWORK_PRINCIPAL}
-                  art_Persistency_Common
-                  art_Utilities canvas
+                  ifdh_art::IFDH_service
+                  sbnanaobj::StandardRecord
+                  sbnanaobj::StandardRecordFlat
+                  art::Framework_Core
+                  art::Framework_Services_Registry
+                  art_root_io::TFileService_service
+                  art::Framework_Principal
+                  art::Persistency_Common
+                  art::Utilities canvas::canvas
                   ${MF_MESSAGELOGGER}
                   ${MF_UTILITIES}
                   ${FHICLCPP}
-                  cetlib cetlib_except
+                  cetlib::cetlib cetlib_except::cetlib_except
                   ${ROOT_EVE_LIB_LIST}
-                  ${ROOT_X3d}
-                  ${ROOT_BASIC_LIB_LIST}
+                  ROOT::X3d
+                  ROOT::EG
                   caf_RecoUtils
-                  lardataobj_AnalysisBase
-                  lardataobj_RecoBase
-                  larcorealg_Geometry
-                  larcore_Geometry_Geometry_service
-                  larcorealg_GeoAlgo
-                  larsim_MCCheater_BackTrackerService_service
-                  larsim_Utils
-                  nusimdata_SimulationBase
-                  larsim_MCCheater_ParticleInventoryService_service
-                  sbnobj_Common_CRT
-                  sbnobj_Common_Reco
-                  sbnobj_Common_Analysis
-		  lardataalg_DetectorInfo
-                  art_Framework_Services_System_TriggerNamesService_service
-                  sbncode_Metadata_MetadataSBN_service
+                  lardataobj::AnalysisBase
+                  lardataobj::RecoBase
+                  larcorealg::Geometry
+                  larcore::Geometry_Geometry_service
+                  larcorealg::GeoAlgo
+                  larsim::MCCheater_BackTrackerService_service
+                  nusimdata::SimulationBase
+                  larsim::MCCheater_ParticleInventoryService_service
+                  sbnobj::Common_CRT
+                  sbnobj::Common_Reco
+                  sbnobj::Common_Analysis
+		  lardataalg::DetectorInfo
+                  art::Framework_Services_System_TriggerNamesService_service
+                  sbncode::Metadata_MetadataSBN_service
+                  larsim::Utils
                   )
 
-cet_find_library( IFDH NAMES ifdh PATHS ENV IFDHC_LIB NO_DEFAULT_PATH )
-##include_directories( $ENV{IFDHC_FQ_DIR}/inc )
-##include_directories( $ENV{IFDH_ART_FQ_DIR}/inc )
+include_directories( $ENV{IFDHC_DIR}/inc ) ### MIGRATE-ACTION-RECOMMENDED: use target_link_directories() with target semantics
+link_directories( $ENV{IFDHC_DIR}/lib )
 
-include_directories( $ENV{SRPROXY_INC} )
-
-cet_find_library( IFDH_SERVICE NAMES IFDH_service PATHS ENV IFDH_ART_LIB )
-
-simple_plugin ( CAFMaker module
-               sbncode_CAFMaker
-               sbnanaobj_StandardRecord
-               IFDH_SERVICE
-               ${ART_FRAMEWORK_CORE}
-               ${ART_FRAMEWORK_PRINCIPAL}
-               ${ART_FRAMEWORK_SERVICES_REGISTRY}
-               ${ART_FRAMEWORK_SERVICES_BASIC}
-               ${ART_FRAMEWORK_SERVICES_OPTIONAL}
-               art_Utilities canvas
+cet_build_plugin ( CAFMaker art::module
+               LIBRARIES
+               sbncode::CAFMaker
+               sbnanaobj::StandardRecord
+               larcorealg::Geometry
+               ifdh_art::IFDH_service
+               art::Framework_Core
+               art::Framework_Principal
+               art::Framework_Services_Registry
+               art::Utilities canvas::canvas
                ${MF_MESSAGELOGGER}
                ${MF_UTILITIES}
                ${FHICLCPP}
-               cetlib cetlib_except
-               ${ROOT_BASIC_LIB_LIST}
-               art_root_io_RootDB
-               hep_concurrency
-               nurandom_RandomUtils_NuRandomService_service
+               cetlib::cetlib cetlib_except::cetlib_except
+               ROOT::Core ROOT::Tree
+               art_root_io::RootDB
+               hep_concurrency::hep_concurrency
+                  lardataobj::RecoBase
+               nurandom::RandomUtils_NuRandomService_service
                BASENAME_ONLY
             )
 
 build_dictionary( CAFMaker
                   DICTIONARY_LIBRARIES
-                  sbnanaobj_StandardRecord
-                  sbnanaobj_StandardRecord_dict
-                  ${ART_FRAMEWORK_CORE}
-                  ${ART_FRAMEWORK_PRINCIPAL}
-                  art_Persistency_Common
-                  art_Persistency_Provenance
-                  art_Utilities canvas
-                  cetlib cetlib_except
+                  sbnanaobj::StandardRecord
+                  sbnanaobj::StandardRecord_dict
+                  lardataobj::RecoBase
+                  larcorealg::Geometry
+                  art::Framework_Core
+                  art::Framework_Principal
+                  art::Persistency_Common
+                  art::Persistency_Provenance
+                  art::Utilities canvas::canvas
+                  cetlib::cetlib cetlib_except::cetlib_except
                   ${MF_MESSAGELOGGER}
                   ${MF_UTILITIES}
                   )
diff --git a/sbncode/CAFMaker/FillExposure.cxx b/sbncode/CAFMaker/FillExposure.cxx
new file mode 100644
index 0000000..203a3a6
--- /dev/null
+++ b/sbncode/CAFMaker/FillExposure.cxx
@@ -0,0 +1,76 @@
+
+#include "sbncode/CAFMaker/FillExposure.h"
+
+namespace caf
+{
+
+  caf::SRBNBInfo makeSRBNBInfo(sbn::BNBSpillInfo const& info)
+  {
+    caf::SRBNBInfo single_store;
+    single_store.spill_time_sec = info.spill_time_s;
+    single_store.spill_time_nsec = info.spill_time_ns;
+    single_store.event = info.event;
+    single_store.TOR860 = info.TOR860;
+    single_store.TOR875 = info.TOR875;
+    single_store.LM875A = info.LM875A;
+    single_store.LM875B = info.LM875B;
+    single_store.LM875C = info.LM875C;
+    single_store.HP875 = info.HP875;
+    single_store.VP875 = info.VP875;
+    single_store.HPTG1 = info.HPTG1;
+    single_store.VPTG1 = info.VPTG1;
+    single_store.HPTG2 = info.HPTG2;
+    single_store.VPTG2 = info.VPTG2;
+    single_store.BTJT2 = info.BTJT2;
+    single_store.THCURR = info.THCURR;
+    single_store.M875BB = info.M875BB;
+    single_store.M876BB = info.M876BB;
+    single_store.MMBTBB = info.MMBTBB;
+    single_store.M875BB_spill_time_diff = info.M875BB_spill_time_diff;
+    single_store.M876BB_spill_time_diff = info.M876BB_spill_time_diff;
+    single_store.MMBTBB_spill_time_diff = info.MMBTBB_spill_time_diff;
+    return single_store;
+  }
+
+  void FillExposure(const std::vector<sbn::BNBSpillInfo>& bnb_spill_info,
+		    std::vector<caf::SRBNBInfo>& BNBInfo,
+		    double& subRunPOT)
+  {
+    for(const sbn::BNBSpillInfo& info: bnb_spill_info)
+      {
+	subRunPOT += info.POT();
+        BNBInfo.push_back(makeSRBNBInfo(info));
+      }
+  }
+
+  void FillExposureNuMI(const std::vector<sbn::NuMISpillInfo>& numi_spill_info,
+		    std::vector<caf::SRNuMIInfo>& NuMIInfo,
+		    double& subRunPOT) {
+    for (const sbn::NuMISpillInfo &info: numi_spill_info) {
+      subRunPOT += info.POT();
+
+      NuMIInfo.emplace_back();
+      NuMIInfo.back().HP121 = info.HP121;
+      NuMIInfo.back().VP121 = info.VP121;
+      NuMIInfo.back().HPTGT = info.HPTGT;
+      NuMIInfo.back().VPTGT = info.VPTGT;
+      NuMIInfo.back().HITGT = info.HITGT;
+      NuMIInfo.back().VITGT = info.VITGT;
+      NuMIInfo.back().MTGTDS = info.MTGTDS;
+      NuMIInfo.back().HRNDIR = info.HRNDIR;
+      NuMIInfo.back().NSLINA = info.NSLINA;
+      NuMIInfo.back().NSLINB = info.NSLINB;
+      NuMIInfo.back().NSLINC = info.NSLINC;
+      NuMIInfo.back().NSLIND = info.NSLIND;
+      NuMIInfo.back().TRTGTD = info.TRTGTD;
+      NuMIInfo.back().TR101D = info.TR101D;
+      NuMIInfo.back().TORTGT = info.TORTGT;
+      NuMIInfo.back().TOR101 = info.TOR101;
+      NuMIInfo.back().time = info.time;
+      NuMIInfo.back().spill_time_s = info.spill_time_s;
+      NuMIInfo.back().spill_time_ns = info.spill_time_ns;
+      NuMIInfo.back().event = info.event;
+      NuMIInfo.back().daq_gates = info.daq_gates;
+    }
+  }
+}
diff --git a/sbncode/CAFMaker/FillExposure.h b/sbncode/CAFMaker/FillExposure.h
new file mode 100644
index 0000000..4b49a8e
--- /dev/null
+++ b/sbncode/CAFMaker/FillExposure.h
@@ -0,0 +1,25 @@
+#ifndef CAF_FILLEXPOSURE_H
+#define CAF_FILLEXPOSURE_H
+
+#include "sbnanaobj/StandardRecord/SRBNBInfo.h"
+#include "sbnobj/Common/POTAccounting/BNBSpillInfo.h"
+#include "sbnanaobj/StandardRecord/SRNuMIInfo.h"
+#include "sbnobj/Common/POTAccounting/NuMISpillInfo.h"
+#include <vector>
+
+namespace caf
+{
+  void FillExposure(const std::vector<sbn::BNBSpillInfo>& bnb_spill_info,
+		    std::vector<caf::SRBNBInfo>& BNBInfo,
+		    double& subRunPOT);
+
+  caf::SRBNBInfo makeSRBNBInfo(sbn::BNBSpillInfo const& info);
+
+  void FillExposureNuMI(const std::vector<sbn::NuMISpillInfo>& numi_spill_info,
+		    std::vector<caf::SRNuMIInfo>& NuMIInfo,
+		    double& subRunPOT);
+
+  
+}
+
+#endif
diff --git a/sbncode/CAFMaker/FillReco.cxx b/sbncode/CAFMaker/FillReco.cxx
index d060aa8..bc7aa63 100644
--- a/sbncode/CAFMaker/FillReco.cxx
+++ b/sbncode/CAFMaker/FillReco.cxx
@@ -61,10 +61,14 @@ namespace caf
   }
 
   void FillCRTHit(const sbn::crt::CRTHit &hit,
+                  uint64_t gate_start_timestamp,
                   bool use_ts0,
                   caf::SRCRTHit &srhit,
                   bool allowEmpty) {
+
     srhit.time = (use_ts0 ? (float)hit.ts0_ns : hit.ts1_ns) / 1000.;
+    srhit.t0 = ((long long)(hit.ts0_ns)-(long long)(gate_start_timestamp))/1000.;
+    srhit.t1 = hit.ts1_ns/1000.;
 
     srhit.position.x = hit.x_pos;
     srhit.position.y = hit.y_pos;
@@ -255,6 +259,7 @@ namespace caf
     // default values
     srslice.nu_score = -1;
     srslice.is_clear_cosmic = true;
+    srslice.nuid.setDefault();
 
     // collect the properties
     if (primary_meta != NULL) {
@@ -273,6 +278,17 @@ namespace caf
       else {
         srslice.nu_score = -1;
       }
+      // NeutrinoID (SliceID) features
+      CopyPropertyIfSet(properties, "NuNFinalStatePfos",        srslice.nuid.nufspfos);
+      CopyPropertyIfSet(properties, "NuNHitsTotal",             srslice.nuid.nutothits);
+      CopyPropertyIfSet(properties, "NuVertexY",                srslice.nuid.nuvtxy);
+      CopyPropertyIfSet(properties, "NuWeightedDirZ",           srslice.nuid.nuwgtdirz);
+      CopyPropertyIfSet(properties, "NuNSpacePointsInSphere",   srslice.nuid.nusps);
+      CopyPropertyIfSet(properties, "NuEigenRatioInSphere",     srslice.nuid.nueigen);
+      CopyPropertyIfSet(properties, "CRLongestTrackDirY",       srslice.nuid.crlongtrkdiry);
+      CopyPropertyIfSet(properties, "CRLongestTrackDeflection", srslice.nuid.crlongtrkdef);
+      CopyPropertyIfSet(properties, "CRFracHitsInLongestTrack", srslice.nuid.crlongtrkhitfrac);
+      CopyPropertyIfSet(properties, "CRNHitsMax",               srslice.nuid.crmaxhits);
     }
 
   }
@@ -289,6 +305,33 @@ namespace caf
   }
 
 
+  void FillSliceCRUMBS(const sbn::CRUMBSResult *crumbs,
+                       caf::SRSlice& slice,
+                       bool allowEmpty) {
+    if (crumbs != nullptr) {
+      slice.crumbs_result.score = crumbs->score;
+      slice.crumbs_result.tpc.crlongtrackhitfrac = crumbs->tpc_CRFracHitsInLongestTrack;
+      slice.crumbs_result.tpc.crlongtrackdefl = crumbs->tpc_CRLongestTrackDeflection;
+      slice.crumbs_result.tpc.crlongtrackdiry = crumbs->tpc_CRLongestTrackDirY;
+      slice.crumbs_result.tpc.crnhitsmax = crumbs->tpc_CRNHitsMax;
+      slice.crumbs_result.tpc.nusphereeigenratio = crumbs->tpc_NuEigenRatioInSphere;
+      slice.crumbs_result.tpc.nufinalstatepfos = crumbs->tpc_NuNFinalStatePfos;
+      slice.crumbs_result.tpc.nutotalhits = crumbs->tpc_NuNHitsTotal;
+      slice.crumbs_result.tpc.nuspherespacepoints = crumbs->tpc_NuNSpacePointsInSphere;
+      slice.crumbs_result.tpc.nuvertexy = crumbs->tpc_NuVertexY;
+      slice.crumbs_result.tpc.nuwgtdirz = crumbs->tpc_NuWeightedDirZ;
+      slice.crumbs_result.tpc.stoppingchi2ratio = crumbs->tpc_StoppingChi2CosmicRatio;
+      slice.crumbs_result.pds.fmtotalscore = crumbs->pds_FMTotalScore;
+      slice.crumbs_result.pds.fmpe = crumbs->pds_FMPE;
+      slice.crumbs_result.pds.fmtime = crumbs->pds_FMTime;
+      slice.crumbs_result.crt.trackscore = crumbs->crt_TrackScore;
+      slice.crumbs_result.crt.hitscore = crumbs->crt_HitScore;
+      slice.crumbs_result.crt.tracktime = crumbs->crt_TrackTime;
+      slice.crumbs_result.crt.hittime = crumbs->crt_HitTime;
+    }
+  }
+
+
   //......................................................................
 
   void FillTrackCRTHit(const std::vector<art::Ptr<anab::T0>> &t0match,
@@ -738,5 +781,12 @@ namespace caf
     return;
   }
 
+  //......................................................................
+  template<class T, class U>
+  void CopyPropertyIfSet( const std::map<std::string, T>& props, const std::string& search, U& value )
+  {
+    auto it = props.find(search);
+    if ( it != props.end() ) value = it->second;
+  }
 
 } // end namespace
diff --git a/sbncode/CAFMaker/FillReco.h b/sbncode/CAFMaker/FillReco.h
index 6ca57b7..4e62f61 100644
--- a/sbncode/CAFMaker/FillReco.h
+++ b/sbncode/CAFMaker/FillReco.h
@@ -29,6 +29,7 @@
 #include "sbnobj/Common/Reco/MVAPID.h"
 #include "sbnobj/Common/Reco/ScatterClosestApproach.h"
 #include "sbnobj/Common/Reco/StoppingChi2Fit.h"
+#include "sbnobj/Common/Reco/CRUMBSResult.h"
 #include "sbnobj/Common/CRT/CRTHit.hh"
 #include "sbnobj/Common/CRT/CRTTrack.hh"
 #include "nusimdata/SimulationBase/MCParticle.h"
@@ -84,6 +85,10 @@ namespace caf
                        caf::SRSlice& slice,
                        bool allowEmpty = false);
 
+  void FillSliceCRUMBS(const sbn::CRUMBSResult *crumbs,
+                       caf::SRSlice& slice,
+                       bool allowEmpty = false);
+
   bool SelectSlice(const caf::SRSlice &slice, bool cut_clear_cosmic);
 
   void FillTrackVars(const recob::Track& track,
@@ -153,6 +158,7 @@ namespace caf
                            unsigned truth_ind);
 
   void FillCRTHit(const sbn::crt::CRTHit &hit,
+                  uint64_t gate_start_timestamp,
                   bool use_ts0,
                   caf::SRCRTHit &srhit,
                   bool allowEmpty = false);
@@ -160,6 +166,9 @@ namespace caf
                   bool use_ts0,
                   caf::SRCRTTrack &srtrack,
                   bool allowEmpty = false);
+
+  template<class T, class U>
+  void CopyPropertyIfSet( const std::map<std::string, T>& props, const std::string& search, U& value );
 }
 
 #endif
diff --git a/sbncode/CAFMaker/RecoUtils/CMakeLists.txt b/sbncode/CAFMaker/RecoUtils/CMakeLists.txt
index fe2ecf7..e67a4b7 100644
--- a/sbncode/CAFMaker/RecoUtils/CMakeLists.txt
+++ b/sbncode/CAFMaker/RecoUtils/CMakeLists.txt
@@ -2,18 +2,18 @@
 art_make_library( LIBRARY_NAME caf_RecoUtils
                   SOURCE  RecoUtils.cc
                   LIBRARIES 
-		    ${ART_FRAMEWORK_CORE}
-		    ${ART_FRAMEWORK_SERVICES_REGISTRY}
-		    ${ART_FRAMEWORK_SERVICES}
-		    ${ART_FRAMEWORK_PRINCIPAL}
-		    art_Persistency_Common
-		    art_Utilities canvas
+		    art::Framework_Core
+		    art::Framework_Services_Registry
+		    art::Framework_Principal
+		    art::Persistency_Common
+		    art::Utilities canvas::canvas
                     ${ROOT_BASIC_LIB_LIST}
 		    ${MF_MESSAGELOGGER}
 		    ${MF_UTILITIES}
 		    ${FHICLCPP}
-                    cetlib cetlib_except
-		    larsim_MCCheater_BackTrackerService_service
-		    larsim_MCCheater_ParticleInventoryService_service
-                    larcorealg_Geometry
+                    cetlib::cetlib cetlib_except::cetlib_except
+		    larsim::MCCheater_BackTrackerService_service
+		    larsim::MCCheater_ParticleInventoryService_service
+                    larcorealg::Geometry
+                    larcore::Geometry_DumpGeometry_module
                 )
diff --git a/sbncode/CAFMaker/bin/CMakeLists.txt b/sbncode/CAFMaker/bin/CMakeLists.txt
index 747d8fc..d68f26c 100644
--- a/sbncode/CAFMaker/bin/CMakeLists.txt
+++ b/sbncode/CAFMaker/bin/CMakeLists.txt
@@ -1,6 +1,6 @@
 cet_make_exec( extractCAFMetadata
                SOURCE extractCAFMetadata.cc
-               LIBRARIES ${ROOT_BASIC_LIB_LIST}
+               LIBRARIES ROOT::Core ROOT::RIO
                )
 
 cet_script(diff_cafs)
diff --git a/sbncode/CMakeLists.txt b/sbncode/CMakeLists.txt
index 3c1daf0..d5f0346 100644
--- a/sbncode/CMakeLists.txt
+++ b/sbncode/CMakeLists.txt
@@ -3,7 +3,7 @@ cet_find_library( BOOST_DATE_TIME     NAMES boost_date_time     PATHS ENV BOOST_
 cet_find_library( IFBEAM NAMES ifbeam PATHS ENV IFBEAM_LIB NO_DEFAULT_PATH )
 cet_find_library( WDA NAMES wda PATHS ENV LIBWDA_LIB NO_DEFAULT_PATH )
 
-find_ups_product(sbnanaobj)
+find_package(sbnanaobj) ### MIGRATE-ACTION-RECOMMENDED: use cet_find_package() with target semantics for linking
 
 add_subdirectory(SBNEventWeight)
 add_subdirectory(NuMuSelection)
@@ -24,3 +24,4 @@ add_subdirectory(FluxReader)
 add_subdirectory(EventGenerator)
 add_subdirectory(PID)
 add_subdirectory(GeometryTools)
+add_subdirectory(CosmicID)
diff --git a/sbncode/Calibration/CMakeLists.txt b/sbncode/Calibration/CMakeLists.txt
index 827749a..c59ba5a 100644
--- a/sbncode/Calibration/CMakeLists.txt
+++ b/sbncode/Calibration/CMakeLists.txt
@@ -1,88 +1,96 @@
-link_directories(
+link_directories( ### MIGRATE-ACTION-RECOMMENDED: use target_link_libraries() with target semantics
  $ENV{ROOTSYS}/lib
 )
 
 simple_plugin( TrackCaloSkimmer module
-                            ${ART_FRAMEWORK_CORE}
-                            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                            ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-                            ${ART_FRAMEWORK_PRINCIPAL}
-                            art_Persistency_Common
-                            art_Utilities canvas
+                            art::Framework_Core
+                            art::Framework_Services_Registry
+                            art_root_io::TFileService_service
+                            art::Framework_Principal
+                            art::Persistency_Common
+                            art::Utilities canvas::canvas
                             ${MF_MESSAGELOGGER}
                             ${MF_UTILITIES}
                             ${FHICLCPP}
-                            cetlib cetlib_except
+                            cetlib::cetlib cetlib_except::cetlib_except
                             ${ROOT_EVE_LIB_LIST}
-                            ${ROOT_X3d}
+                            ROOT::X3d
                             ${ROOT_BASIC_LIB_LIST}
-	art_root_io_tfile_support
-	art_root_io
-	art_root_io_dict
-        lardataobj_AnalysisBase
-        lardataobj_RecoBase
-        larcorealg_Geometry
-        larcore_Geometry_Geometry_service
-        larcorealg_GeoAlgo
-	sbnobj_Common_Reco
-	larcorealg_GeoAlgo
-	lardata_DetectorInfoServices_DetectorPropertiesServiceStandard_service
-	lardataalg_DetectorInfo
-	Minuit
-	sbncode_CAFMaker
+	art_root_io::tfile_support
+	art_root_io::art_root_io
+	art_root_io::dict
+        lardataobj::AnalysisBase
+        lardataobj::RecoBase
+        larcorealg::Geometry
+        larcore::Geometry_Geometry_service
+        larcorealg::GeoAlgo
+	sbnobj::Common_Reco
+	larcorealg::GeoAlgo
+	lardata::DetectorInfoServices_DetectorPropertiesServiceStandard_service
+	lardataalg::DetectorInfo
+	ROOT::Minuit
+	sbncode::CAFMaker
+        sbnobj::Common_Calibration_dict
+        larevt::SpaceCharge
 )
 
 simple_plugin(TrackCaloSkimmerSelectStoppingTrack tool
-                            ${ART_FRAMEWORK_CORE}
-                            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                            ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-                            ${ART_FRAMEWORK_PRINCIPAL}
-                            art_Persistency_Common
-                            art_Utilities canvas
+                            art::Framework_Core
+                            art::Framework_Services_Registry
+                            art_root_io::TFileService_service
+                            art::Framework_Principal
+                            art::Persistency_Common
+                            art::Utilities canvas::canvas
                             ${MF_MESSAGELOGGER}
                             ${MF_UTILITIES}
                             ${FHICLCPP}
-                            cetlib cetlib_except
+                            cetlib::cetlib cetlib_except::cetlib_except
                             ${ROOT_EVE_LIB_LIST}
-                            ${ROOT_X3d}
+                            ROOT::X3d
                             ${ROOT_BASIC_LIB_LIST}
-        larcorealg_Geometry
-	larcorealg_GeoAlgo
-	lardata_DetectorInfoServices_DetectorPropertiesServiceStandard_service
-	lardataalg_DetectorInfo
+        larcorealg::Geometry
+	larcorealg::GeoAlgo
+	lardata::DetectorInfoServices_DetectorPropertiesServiceStandard_service
+	lardataalg::DetectorInfo
+        larevt::SpaceCharge
+        sbnobj::Common_Calibration_dict
 )
 
 simple_plugin(TrackCaloSkimmerSelectAnode2CathodeTrack tool
-                            ${ART_FRAMEWORK_CORE}
-                            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                            ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-                            ${ART_FRAMEWORK_PRINCIPAL}
-                            art_Persistency_Common
-                            art_Utilities canvas
+                            art::Framework_Core
+                            art::Framework_Services_Registry
+                            art_root_io::TFileService_service
+                            art::Framework_Principal
+                            art::Persistency_Common
+                            art::Utilities canvas::canvas
                             ${MF_MESSAGELOGGER}
                             ${MF_UTILITIES}
                             ${FHICLCPP}
-                            cetlib cetlib_except
+                            cetlib::cetlib cetlib_except::cetlib_except
                             ${ROOT_EVE_LIB_LIST}
-                            ${ROOT_X3d}
+                            ROOT::X3d
                             ${ROOT_BASIC_LIB_LIST}
+        sbnobj::Common_Calibration_dict
+        larevt::SpaceCharge
 )
 
+link_directories( $ENV{IFDHC_DIR}/lib )
 simple_plugin ( DataSelect module
-                IFDH_SERVICE
-               ${ART_FRAMEWORK_CORE}
-               ${ART_FRAMEWORK_PRINCIPAL}
-               ${ART_FRAMEWORK_SERVICES_REGISTRY}
-               ${ART_FRAMEWORK_SERVICES_BASIC}
-               ${ART_FRAMEWORK_SERVICES_OPTIONAL}
-               art_Utilities canvas
+               ifdh_art::IFDH_service
+               art::Framework_Core
+               art::Framework_Principal
+               art::Framework_Services_Registry
+               art::Utilities canvas::canvas
                ${MF_MESSAGELOGGER}
                ${MF_UTILITIES}
                ${FHICLCPP}
-               cetlib cetlib_except
+               cetlib::cetlib cetlib_except::cetlib_except
         ${ROOT_EVE_LIB_LIST}
-        ${ROOT_X3d}
+        ROOT::X3d
         ${ROOT_BASIC_LIB_LIST}
+        sbnobj::Common_Calibration_dict
+	larevt::SpaceCharge
+        lardataobj::RecoBase
 )
 
 
diff --git a/sbncode/Calibration/TrackCaloSkimmer.h b/sbncode/Calibration/TrackCaloSkimmer.h
index 63898e9..86cc62a 100644
--- a/sbncode/Calibration/TrackCaloSkimmer.h
+++ b/sbncode/Calibration/TrackCaloSkimmer.h
@@ -120,6 +120,7 @@ private:
     const recob::PFParticle &pfp, float t0, 
     const std::vector<art::Ptr<recob::Hit>> &hits,
     const std::vector<const recob::TrackHitMeta*> &thms,
+    const std::vector<art::Ptr<recob::SpacePoint>> &sps,
     const std::vector<art::Ptr<anab::Calorimetry>> &calo,
     const std::map<geo::WireID, art::Ptr<raw::RawDigit>> &rawdigits,
     const std::vector<GlobalTrackInfo> &tracks,
@@ -153,6 +154,7 @@ private:
     unsigned hkey,
     const recob::TrackHitMeta &thm,
     const recob::Track &trk,
+    const art::Ptr<recob::SpacePoint> &sp,
     const std::vector<art::Ptr<anab::Calorimetry>> &calo,
     const geo::GeometryCore *geo,
     const detinfo::DetectorClocksData &dclock,
diff --git a/sbncode/Calibration/TrackCaloSkimmer_module.cc b/sbncode/Calibration/TrackCaloSkimmer_module.cc
index f019d05..84310c7 100644
--- a/sbncode/Calibration/TrackCaloSkimmer_module.cc
+++ b/sbncode/Calibration/TrackCaloSkimmer_module.cc
@@ -298,9 +298,25 @@ void sbn::TrackCaloSkimmer::analyze(art::Event const& e)
     std::vector<art::Ptr<recob::Hit>> emptyHitVector;
     const std::vector<art::Ptr<recob::Hit>> &trkHits  = fmtrkHits.isValid() ? fmtrkHits.at(trkPtr.key()) : emptyHitVector;
 
+    art::FindManyP<recob::SpacePoint> fmtrkHitSPs(trkHits, e, fPFPproducer);
+
     std::vector<const recob::TrackHitMeta*> emptyTHMVector;
     const std::vector<const recob::TrackHitMeta*> &trkHitMetas = fmtrkHits.isValid() ? fmtrkHits.data(trkPtr.key()) : emptyTHMVector;
 
+    art::Ptr<recob::SpacePoint> nullSP;
+    std::vector<art::Ptr<recob::SpacePoint>> trkHitSPs;
+    if (fmtrkHitSPs.isValid()) {
+      for (unsigned i_hit = 0; i_hit < trkHits.size(); i_hit++) {
+        const std::vector<art::Ptr<recob::SpacePoint>> &h_sp = fmtrkHitSPs.at(i_hit);
+        if (h_sp.size()) {
+          trkHitSPs.push_back(h_sp.at(0));
+        }
+        else {
+          trkHitSPs.push_back(nullSP);
+        }
+      }
+    }
+
     float t0 = std::numeric_limits<float>::signaling_NaN();
     if (fmT0.isValid() && fmT0.at(p_pfp.key()).size()) t0 = fmT0.at(p_pfp.key()).at(0)->Time();
 
@@ -318,7 +334,7 @@ void sbn::TrackCaloSkimmer::analyze(art::Event const& e)
     fWiresToSave.clear();
 
     // Fill the track!
-    FillTrack(*trkPtr, pfp, t0, trkHits, trkHitMetas, calo, rawdigits, track_infos, geometry, clock_data, bt, det);
+    FillTrack(*trkPtr, pfp, t0, trkHits, trkHitMetas, trkHitSPs, calo, rawdigits, track_infos, geometry, clock_data, bt, det);
 
     FillTrackDaughterRays(*trkPtr, pfp, PFParticleList, PFParticleSPs);
 
@@ -857,9 +873,14 @@ void sbn::TrackCaloSkimmer::FillTrackEndHits(const geo::GeometryCore *geometry,
       const std::vector<art::Ptr<recob::SpacePoint>> &h_sp = allHitSPs.at(hit.key());
       if (h_sp.size()) {
         const recob::SpacePoint &sp = *h_sp[0];
-        hinfo.p.x = sp.position().x();
-        hinfo.p.y = sp.position().y();
-        hinfo.p.z = sp.position().z();
+        hinfo.sp.x = sp.position().x();
+        hinfo.sp.y = sp.position().y();
+        hinfo.sp.z = sp.position().z();
+
+        hinfo.hasSP = true;
+      }
+      else {
+        hinfo.hasSP = false;
       }
 
       fTrack->endhits.push_back(hinfo);
@@ -951,6 +972,7 @@ void sbn::TrackCaloSkimmer::FillTrack(const recob::Track &track,
     const recob::PFParticle &pfp, float t0, 
     const std::vector<art::Ptr<recob::Hit>> &hits,
     const std::vector<const recob::TrackHitMeta*> &thms,
+    const std::vector<art::Ptr<recob::SpacePoint>> &sps,
     const std::vector<art::Ptr<anab::Calorimetry>> &calo,
     const std::map<geo::WireID, art::Ptr<raw::RawDigit>> &rawdigits,
     const std::vector<GlobalTrackInfo> &tracks,
@@ -982,7 +1004,7 @@ void sbn::TrackCaloSkimmer::FillTrack(const recob::Track &track,
 
   // Fill each hit
   for (unsigned i_hit = 0; i_hit < hits.size(); i_hit++) {
-    sbn::TrackHitInfo hinfo = MakeHit(*hits[i_hit], hits[i_hit].key(), *thms[i_hit], track, calo, geo, clock_data, bt_serv);
+    sbn::TrackHitInfo hinfo = MakeHit(*hits[i_hit], hits[i_hit].key(), *thms[i_hit], track, sps[i_hit], calo, geo, clock_data, bt_serv);
     if (hinfo.h.plane == 0) {
       fTrack->hits0.push_back(hinfo);
     }
@@ -1129,6 +1151,7 @@ sbn::TrackHitInfo sbn::TrackCaloSkimmer::MakeHit(const recob::Hit &hit,
     unsigned hkey,
     const recob::TrackHitMeta &thm,
     const recob::Track &trk,
+    const art::Ptr<recob::SpacePoint> &sp,
     const std::vector<art::Ptr<anab::Calorimetry>> &calo,
     const geo::GeometryCore *geo,
     const detinfo::DetectorClocksData &dclock,
@@ -1153,7 +1176,20 @@ sbn::TrackHitInfo sbn::TrackCaloSkimmer::MakeHit(const recob::Hit &hit,
 
   // Do back-tracking on each hit
   if (bt_serv) {
-    std::vector<sim::TrackIDE> ides = bt_serv->HitToTrackIDEs(dclock, hit);
+    // The default BackTracking function goes from (peak - width, peak + width).
+    //
+    // This time range does not match well hits with a non-Gaussian shape where
+    // the Gaussian-fit-width does not replicate the width of the pulse. 
+    //
+    // Instead, we use the Hit (start, end) time range. This is also more relevant
+    // for (e.g.) the SummedADC charge extraction method.
+    //
+    // Don't use this:
+    // std::vector<sim::TrackIDE> ides = bt_serv->HitToTrackIDEs(dclock, hit);
+    //
+    // Use this:
+    std::vector<sim::TrackIDE> ides = bt_serv->ChannelToTrackIDEs(dclock, hit.Channel(), hit.StartTick(), hit.EndTick());
+
     hinfo.h.truth.e = 0.;
     hinfo.h.truth.nelec = 0.;
 
@@ -1202,9 +1238,9 @@ sbn::TrackHitInfo sbn::TrackCaloSkimmer::MakeHit(const recob::Hit &hit,
   // Save trajectory information if we can
   if (!badhit) {
     geo::Point_t loc = trk.LocationAtPoint(thm.Index());
-    hinfo.h.p.x = loc.X();
-    hinfo.h.p.y = loc.Y();
-    hinfo.h.p.z = loc.Z();
+    hinfo.tp.x = loc.X();
+    hinfo.tp.y = loc.Y();
+    hinfo.tp.z = loc.Z();
 
     geo::Vector_t dir = trk.DirectionAtPoint(thm.Index());
     hinfo.dir.x = dir.X();
@@ -1230,6 +1266,18 @@ sbn::TrackHitInfo sbn::TrackCaloSkimmer::MakeHit(const recob::Hit &hit,
     }
   }
 
+  // Save SpacePoint information
+  if (sp) {
+    hinfo.h.sp.x = sp->position().x();
+    hinfo.h.sp.y = sp->position().y();
+    hinfo.h.sp.z = sp->position().z();
+
+    hinfo.h.hasSP = true;
+  }
+  else {
+    hinfo.h.hasSP = false;
+  }
+
   return hinfo;
 }
 
diff --git a/sbncode/Calibration/fcl/icarus/icarus_trackcalo_skimmer.fcl b/sbncode/Calibration/fcl/icarus/icarus_trackcalo_skimmer.fcl
index 0c0c710..c13fe52 100644
--- a/sbncode/Calibration/fcl/icarus/icarus_trackcalo_skimmer.fcl
+++ b/sbncode/Calibration/fcl/icarus/icarus_trackcalo_skimmer.fcl
@@ -30,7 +30,7 @@ caloskim_cryoe: {
   HITproducer: "cluster3DCryoE"
   RawDigitproducers: ["daqTPC:PHYSCRATEDATATPCEW", "daqTPC:PHYSCRATEDATATPCEE"]
   RequireT0: true
-  HitRawDigitsTickCollectWidth: 50
+  HitRawDigitsTickCollectWidth: 100
   DoTailFit: false
   SilenceMissingDataProducts: true
   SelectionTools: []
@@ -47,7 +47,7 @@ caloskim_cryow: {
   HITproducer: "cluster3DCryoE"
   RawDigitproducers: ["daqTPC:PHYSCRATEDATATPCWW", "daqTPC:PHYSCRATEDATATPCWE"]
   RequireT0: true
-  HitRawDigitsTickCollectWidth: 50
+  HitRawDigitsTickCollectWidth: 100
   DoTailFit: false
   SilenceMissingDataProducts: true
   SelectionTools: []
diff --git a/sbncode/CosmicID/CMakeLists.txt b/sbncode/CosmicID/CMakeLists.txt
new file mode 100644
index 0000000..372e689
--- /dev/null
+++ b/sbncode/CosmicID/CMakeLists.txt
@@ -0,0 +1,23 @@
+#link_directories(
+# $ENV{ROOTSYS}/lib
+#)
+
+art_make( MODULE_LIBRARIES
+	  ${ART_FRAMEWORK_SERVICES}
+	  art_root_io::TFileService_service
+	  fhiclcpp::fhiclcpp
+	  art::Persistency_Provenance canvas
+	  ${ROOT_BASIC_LIB_LIST}
+	  ${ROOT_TMVA}
+	  sbnobj_Common_Reco
+	  sbncode_GeoWrappers
+	  sbncode_LArRecoProducer
+	  lardataobj_RecoBase_AssnsDicts_dict
+	  lardataobj_RecoBase_dict	
+	  lardataobj_RecoBase
+	  larsim_Utils
+)
+
+install_fhicl()
+install_source()
+
diff --git a/sbncode/CosmicID/CRUMBS_module.cc b/sbncode/CosmicID/CRUMBS_module.cc
new file mode 100644
index 0000000..b031800
--- /dev/null
+++ b/sbncode/CosmicID/CRUMBS_module.cc
@@ -0,0 +1,696 @@
+////////////////////////////////////////////////////////////////////////
+// Class:       CRUMBS
+// Plugin Type: producer
+// File:        CRUMBS_module.cc
+//
+// Generated at Wed Jan  5 08:25:29 2022 by Henry Lay using cetskelgen
+// from  version .
+////////////////////////////////////////////////////////////////////////
+
+#include "art/Framework/Core/EDProducer.h"
+#include "art/Framework/Core/ModuleMacros.h"
+#include "art/Framework/Principal/Event.h"
+#include "art/Framework/Principal/Handle.h"
+#include "art/Framework/Principal/Run.h"
+#include "art/Framework/Principal/SubRun.h"
+#include "canvas/Utilities/InputTag.h"
+#include "fhiclcpp/ParameterSet.h"
+#include "lardata/Utilities/AssociationUtil.h"
+#include "messagefacility/MessageLogger/MessageLogger.h"
+
+#include "canvas/Persistency/Common/FindManyP.h"
+#include "canvas/Persistency/Common/FindOneP.h"
+#include "art_root_io/TFileService.h"
+
+#include "nusimdata/SimulationBase/MCTruth.h"
+#include "nusimdata/SimulationBase/MCParticle.h"
+
+#include "lardataobj/RecoBase/Slice.h"
+#include "lardataobj/RecoBase/PFParticle.h"
+#include "lardataobj/RecoBase/Track.h"
+#include "lardataobj/RecoBase/Hit.h"
+#include "lardataobj/RecoBase/PFParticleMetadata.h"
+#include "lardataobj/AnalysisBase/T0.h"
+#include "lardataobj/AnalysisBase/Calorimetry.h"
+
+#include "lardata/DetectorInfoServices/DetectorClocksService.h"
+#include "larsim/Utils/TruthMatchUtils.h"
+
+#include "sbncode/GeometryTools/TPCGeoAlg.h"
+#include "sbnobj/Common/Reco/SimpleFlashMatchVars.h"
+#include "sbnobj/Common/Reco/StoppingChi2Fit.h"
+#include "sbncode/LArRecoProducer/TrackStoppingChi2Alg.h"
+#include "sbnobj/Common/Reco/CRUMBSResult.h"
+
+#include "TTree.h"
+#include "TMVA/Reader.h"
+
+class CRUMBS;
+
+namespace sbn {
+  class CRUMBS : public art::EDProducer {
+  public:
+    explicit CRUMBS(fhicl::ParameterSet const& p);
+    // The compiler-generated destructor is fine for non-base
+    // classes without bare pointers or other resource use.
+
+    // Plugins should not be copied or assigned.
+    CRUMBS(CRUMBS const&) = delete;
+    CRUMBS(CRUMBS&&) = delete;
+    CRUMBS& operator=(CRUMBS const&) = delete;
+    CRUMBS& operator=(CRUMBS&&) = delete;
+
+    // Required functions.
+    void produce(art::Event& e) override;
+
+    void ResetVars();
+    void GetMaps(art::Event const& e, std::map<int, int> &trackIDToGenMap, std::map<int, std::string> &genTypeMap);
+
+    art::Ptr<recob::PFParticle> GetSlicePrimary(art::Event const& e, 
+                                                const art::Ptr<recob::Slice> &slice, 
+                                                const art::ValidHandle<std::vector<recob::Slice> > &handleSlices);
+
+    std::vector<art::Ptr<anab::T0> > GetCRTTrackT0s(art::Event const& e, const art::Ptr<recob::Slice> &slice, 
+                                                    const art::ValidHandle<std::vector<recob::PFParticle> > &handlePFPs,
+                                                    const art::ValidHandle<std::vector<recob::Slice> > &handleSlices);
+
+    std::vector<art::Ptr<anab::T0> > GetCRTHitT0s(art::Event const& e, const art::Ptr<recob::Slice> &slice, 
+                                                  const art::ValidHandle<std::vector<recob::PFParticle> > &handlePFPs,
+                                                  const art::ValidHandle<std::vector<recob::Slice> > &handleSlices);
+
+    float GetLongestTrackStoppingChi2Ratio(art::Event const& e, const art::Ptr<recob::Slice> &slice, 
+                                           const art::ValidHandle<std::vector<recob::PFParticle> > &handlePFPs,
+                                           const art::ValidHandle<std::vector<recob::Slice> > &handleSlices);
+
+    void FillCRTVars(const std::vector<art::Ptr<anab::T0> > &trackT0s, const std::vector<art::Ptr<anab::T0> > &hitT0s);
+
+    void FillPandoraNuScoreVars(std::map<std::string, float> &propertiesMap);
+
+    std::vector<art::Ptr<recob::Hit> > GetAllSliceHits(art::Event const& e, 
+                                                       const art::Ptr<recob::Slice> &slice, 
+                                                       const art::ValidHandle<std::vector<recob::Slice> > &handleSlices);
+
+    void GetTruthMatching(art::Event const& e, const std::vector<art::Ptr<recob::Hit> > &sliceHits, const std::vector<art::Ptr<recob::Hit> > &allHits, 
+                          std::map<int, int> &trackIDToGenMap, int &matchedID, double &purity, double &completeness);
+
+    int SliceTruthId(std::map<int, float> &purities);
+
+  private:
+
+    // Bools to control training
+    bool fTrainingMode, fProcessNeutrinos, fProcessCosmics;
+
+    // Module labels
+    std::string fMCParticleModuleLabel, fGeneratorModuleLabel, fCosmicModuleLabel, fPFParticleModuleLabel, fHitModuleLabel, fTrackModuleLabel, fSliceModuleLabel, 
+      fFlashMatchModuleLabel, fCRTTrackMatchModuleLabel, fCRTHitMatchModuleLabel, fCalorimetryModuleLabel;
+
+    // MVA location and type for loading
+    std::string fMVAName, fMVAFileName;
+
+    // Parameter set to pass to the stopping chi2 alg
+    fhicl::ParameterSet fChi2FitParams;
+
+    // Tree for storing training information
+    TTree *fSliceTree;
+    
+    // TMVA reader for calculating CRUMBS score
+    TMVA::Reader *fMVAReader;
+
+    // Other useful information for training tree
+    float tpc_NuScore;
+    unsigned eventID, subRunID, runID, slicePDG;
+    std::string matchedType;
+    double matchedPurity, matchedCompleteness;
+
+    // Algorithms used for calculating variables
+    sbn::TrackStoppingChi2Alg fTrackStoppingChi2Alg;
+    sbn::TPCGeoAlg fTpcGeo;
+
+    // ======================== //
+    //  CRUMBS INPUT VARIABLES  //
+    // ======================== //
+
+    // Pandora Cosmic Hypothesis Variables
+    float tpc_CRFracHitsInLongestTrack;   // fraction of slice’s space points in longest track
+    float tpc_CRLongestTrackDeflection;   // 1 - the cosine of the angle between the starting and finishing directions of the longest track
+    float tpc_CRLongestTrackDirY;         // relative direction of the longest track in Y
+    float tpc_CRNHitsMax;                 // the number of space points in the largest pfp
+
+    // Pandora Neutrino Hypothesis Variables
+    float tpc_NuEigenRatioInSphere;       // the ratio between the first and second eigenvalues from a PCA of spacepoints within 10cm of the vertex
+    float tpc_NuNFinalStatePfos;          // the number of final state pfos
+    float tpc_NuNHitsTotal;               // the total number of space points
+    float tpc_NuNSpacePointsInSphere;     // the total number of space points within 10cm of the vertex
+    float tpc_NuVertexY;                  // the vertex position in Y [cm]
+    float tpc_NuWeightedDirZ;             // the Z component of the space-point weighted direction of the final state pfos
+
+    // Other TPC Variables
+    float tpc_StoppingChi2CosmicRatio;    // a ratio of chi2 values intended to find Bragg peaks in stopping muon tracks
+
+    // SBN Simple Flash Match Variables
+    float pds_FMTotalScore;               // the total score
+    float pds_FMPE;                       // the total number of photoelectrons in the associated flash
+    float pds_FMTime;                     // the time associated with the flash [us]
+
+    // CRT Track and Hit Matching Variables
+    float crt_TrackScore;                // a combination of the DCA and angle between the best matched TPC & CRT tracks
+    float crt_HitScore;                  // the best distance from an extrapolated TPC track to a CRT hit [cm]
+    float crt_TrackTime;                 // the time associated with the matched CRT track [us]
+    float crt_HitTime;                   // the time associated with the matched CRT hit [us]
+  };
+
+
+  CRUMBS::CRUMBS(fhicl::ParameterSet const& p)
+    : EDProducer{p},
+    fTrainingMode                 (p.get<bool>("TrainingMode",false)),
+    fProcessNeutrinos             (p.get<bool>("ProcessNeutrinos",true)),
+    fProcessCosmics               (p.get<bool>("ProcessCosmics",true)),
+    fMCParticleModuleLabel        (p.get<std::string>("MCParticleModuleLabel","")),
+    fGeneratorModuleLabel         (p.get<std::string>("GeneratorModuleLabel","")),
+    fCosmicModuleLabel            (p.get<std::string>("CosmicModuleLabel","")),
+    fPFParticleModuleLabel        (p.get<std::string>("PFParticleModuleLabel")),
+    fHitModuleLabel               (p.get<std::string>("HitModuleLabel")),
+    fTrackModuleLabel             (p.get<std::string>("TrackModuleLabel")),
+    fSliceModuleLabel             (p.get<std::string>("SliceModuleLabel")),
+    fFlashMatchModuleLabel        (p.get<std::string>("FlashMatchModuleLabel")),
+    fCRTTrackMatchModuleLabel     (p.get<std::string>("CRTTrackMatchModuleLabel")),
+    fCRTHitMatchModuleLabel       (p.get<std::string>("CRTHitMatchModuleLabel")),
+    fCalorimetryModuleLabel       (p.get<std::string>("CalorimetryModuleLabel")),
+    fMVAName                      (p.get<std::string>("MVAName")),
+    fMVAFileName                  (p.get<std::string>("MVAFileName")),
+    fChi2FitParams                (p.get<fhicl::ParameterSet>("Chi2FitParams")),
+    fTrackStoppingChi2Alg(fChi2FitParams)
+    {
+      produces<std::vector<CRUMBSResult>>();
+      produces<art::Assns<recob::Slice, CRUMBSResult>>();
+
+      fMVAReader = new TMVA::Reader("V");
+
+      fMVAReader->AddVariable("tpc_CRFracHitsInLongestTrack",&tpc_CRFracHitsInLongestTrack);
+      fMVAReader->AddVariable("tpc_CRLongestTrackDeflection",&tpc_CRLongestTrackDeflection);
+      fMVAReader->AddVariable("tpc_CRLongestTrackDirY",&tpc_CRLongestTrackDirY);
+      fMVAReader->AddVariable("tpc_CRNHitsMax",&tpc_CRNHitsMax);
+      fMVAReader->AddVariable("tpc_NuEigenRatioInSphere",&tpc_NuEigenRatioInSphere);
+      fMVAReader->AddVariable("tpc_NuNFinalStatePfos",&tpc_NuNFinalStatePfos);
+      fMVAReader->AddVariable("tpc_NuNHitsTotal",&tpc_NuNHitsTotal);
+      fMVAReader->AddVariable("tpc_NuNSpacePointsInSphere",&tpc_NuNSpacePointsInSphere);
+      fMVAReader->AddVariable("tpc_NuVertexY",&tpc_NuVertexY);
+      fMVAReader->AddVariable("tpc_NuWeightedDirZ",&tpc_NuWeightedDirZ);
+      fMVAReader->AddVariable("tpc_StoppingChi2CosmicRatio",&tpc_StoppingChi2CosmicRatio);
+
+      fMVAReader->AddVariable("pds_FMTotalScore",&pds_FMTotalScore);
+      fMVAReader->AddVariable("pds_FMPE",&pds_FMPE);
+      fMVAReader->AddVariable("pds_FMTime",&pds_FMTime);
+
+      fMVAReader->AddVariable("crt_TrackScore",&crt_TrackScore);
+      fMVAReader->AddVariable("crt_HitScore",&crt_HitScore);
+      fMVAReader->AddVariable("crt_TrackTime",&crt_TrackTime);
+      fMVAReader->AddVariable("crt_HitTime",&crt_HitTime);
+
+      cet::search_path searchPath("FW_SEARCH_PATH");
+      std::string weightFileFullPath;
+      if (!searchPath.find_file(fMVAFileName, weightFileFullPath))
+        throw cet::exception("CRUMBS") << "Unable to find weight file: " << fMVAFileName << " in FW_SEARCH_PATH: " << searchPath.to_string();
+
+      fMVAReader->BookMVA(fMVAName, weightFileFullPath);
+
+      art::ServiceHandle<art::TFileService> tfs;
+      if(fTrainingMode)
+        {
+          fSliceTree = tfs->make<TTree>("SliceTree","Slice data TTree");
+
+          fSliceTree->Branch("tpc_NuScore",&tpc_NuScore);
+          fSliceTree->Branch("tpc_CRFracHitsInLongestTrack",&tpc_CRFracHitsInLongestTrack);
+          fSliceTree->Branch("tpc_CRLongestTrackDeflection",&tpc_CRLongestTrackDeflection);
+          fSliceTree->Branch("tpc_CRLongestTrackDirY",&tpc_CRLongestTrackDirY);
+          fSliceTree->Branch("tpc_CRNHitsMax",&tpc_CRNHitsMax);
+          fSliceTree->Branch("tpc_NuEigenRatioInSphere",&tpc_NuEigenRatioInSphere);
+          fSliceTree->Branch("tpc_NuNFinalStatePfos",&tpc_NuNFinalStatePfos);
+          fSliceTree->Branch("tpc_NuNHitsTotal",&tpc_NuNHitsTotal);
+          fSliceTree->Branch("tpc_NuNSpacePointsInSphere",&tpc_NuNSpacePointsInSphere);
+          fSliceTree->Branch("tpc_NuVertexY",&tpc_NuVertexY);
+          fSliceTree->Branch("tpc_NuWeightedDirZ",&tpc_NuWeightedDirZ);
+          fSliceTree->Branch("tpc_StoppingChi2CosmicRatio",&tpc_StoppingChi2CosmicRatio);
+
+          fSliceTree->Branch("pds_FMTotalScore",&pds_FMTotalScore);
+          fSliceTree->Branch("pds_FMPE",&pds_FMPE);
+          fSliceTree->Branch("pds_FMTime",&pds_FMTime);
+
+          fSliceTree->Branch("crt_TrackScore",&crt_TrackScore);
+          fSliceTree->Branch("crt_HitScore",&crt_HitScore);
+          fSliceTree->Branch("crt_TrackTime",&crt_TrackTime);
+          fSliceTree->Branch("crt_HitTime",&crt_HitTime);
+
+          fSliceTree->Branch("eventID",&eventID);
+          fSliceTree->Branch("subRunID",&subRunID);
+          fSliceTree->Branch("runID",&runID);
+          fSliceTree->Branch("slicePDG",&slicePDG);
+          fSliceTree->Branch("matchedType",&matchedType);
+          fSliceTree->Branch("matchedPurity",&matchedPurity);
+          fSliceTree->Branch("matchedCompleteness",&matchedCompleteness);
+        }
+    }
+
+  void CRUMBS::ResetVars()
+  {
+    tpc_NuScore = -999999.; tpc_CRFracHitsInLongestTrack = -999999.; tpc_CRLongestTrackDeflection = -999999.; tpc_CRLongestTrackDirY = -999999.; tpc_CRNHitsMax = -999999.;
+    tpc_NuEigenRatioInSphere = -999999.; tpc_NuNFinalStatePfos = -999999.; tpc_NuNHitsTotal = -999999.; tpc_NuNSpacePointsInSphere = -999999.; tpc_NuVertexY = -999999.;
+    tpc_NuWeightedDirZ = -999999.; tpc_StoppingChi2CosmicRatio = -4.;
+
+    pds_FMTotalScore = -999999.; pds_FMPE = -999999.; pds_FMTime = -500.;
+
+    crt_TrackScore = -4.; crt_HitScore = -4.; crt_TrackTime = -3000; crt_HitTime = -3000;
+
+    slicePDG = 999999;
+    matchedType = "";
+    matchedPurity = -999999.; matchedCompleteness = -999999.;
+  }
+
+  void CRUMBS::GetMaps(art::Event const& e, std::map<int, int> &trackIDToGenMap, std::map<int, std::string> &genTypeMap)
+  {
+
+    unsigned nNu(0), nCos(0);
+
+    if(fProcessNeutrinos)
+      {
+        art::Handle<std::vector<simb::MCTruth> > handleMCTruthNu;
+        e.getByLabel(fGeneratorModuleLabel, handleMCTruthNu);
+        art::FindManyP<simb::MCParticle> truthNuMCPAssn(handleMCTruthNu,e,fMCParticleModuleLabel);
+
+        for (unsigned int i = 0; i < handleMCTruthNu->size(); ++i){
+          const art::Ptr<simb::MCTruth> mcTruth(handleMCTruthNu, i);
+          const simb::MCParticle nu = mcTruth->GetNeutrino().Nu();
+
+          if(!fTpcGeo.InVolume(nu))
+            genTypeMap[i] = "DirtNu";
+          else
+            genTypeMap[i] = "Nu";
+    
+          const std::vector<art::Ptr<simb::MCParticle> > particles = truthNuMCPAssn.at(mcTruth.key());
+    
+          for (auto const& particle : particles)
+            {
+              trackIDToGenMap[particle->TrackId()] = i;
+            }
+          ++nNu;
+        }
+      }
+
+    if(fProcessCosmics)
+      {
+        art::Handle<std::vector<simb::MCTruth> > handleMCTruthCosmic;
+        e.getByLabel(fCosmicModuleLabel, handleMCTruthCosmic);
+
+        art::FindManyP<simb::MCParticle> truthCosmicMCPAssn(handleMCTruthCosmic,e,fMCParticleModuleLabel);
+
+        for (unsigned int i = 0; i < handleMCTruthCosmic->size(); ++i){
+          const art::Ptr<simb::MCTruth> mcTruth(handleMCTruthCosmic, i);
+
+          genTypeMap[i + nNu] = "Cosmic";
+    
+          const std::vector<art::Ptr<simb::MCParticle> > particles = truthCosmicMCPAssn.at(mcTruth.key());
+    
+          for (auto const& particle : particles)
+            {
+              trackIDToGenMap[particle->TrackId()] = i + nNu;
+            }
+          ++nCos;
+        }
+      }
+  
+    eventID = e.event();
+    subRunID = e.subRun();
+    runID = e.run();
+  }
+
+  void CRUMBS::produce(art::Event& e)
+  {
+    std::map<int, int> trackIDToGenMap;
+    std::map<int, std::string> genTypeMap;
+
+    if(fTrainingMode)
+      this->GetMaps(e, trackIDToGenMap, genTypeMap);
+
+    auto resultsVec = std::make_unique<std::vector<CRUMBSResult>>();
+    auto sliceAssns = std::make_unique<art::Assns<recob::Slice, CRUMBSResult>>();
+
+    auto const handleSlices(e.getValidHandle<std::vector<recob::Slice>>(fSliceModuleLabel));
+    std::vector<art::Ptr<recob::Slice>> slices;
+    art::fill_ptr_vector(slices, handleSlices);
+
+    auto const handlePFPs(e.getValidHandle<std::vector<recob::PFParticle>>(fPFParticleModuleLabel));
+    std::vector<art::Ptr<recob::PFParticle>> pfps;
+    art::fill_ptr_vector(pfps, handlePFPs);
+
+    auto const handleHits(e.getValidHandle<std::vector<recob::Hit>>(fHitModuleLabel));
+    std::vector<art::Ptr<recob::Hit>> allHits;
+    art::fill_ptr_vector(allHits, handleHits);
+
+    art::FindManyP<larpandoraobj::PFParticleMetadata> pfpMetadataAssoc(handlePFPs, e, fPFParticleModuleLabel);
+    art::FindManyP<sbn::SimpleFlashMatch> pfpFMAssoc(handlePFPs, e, fFlashMatchModuleLabel);
+
+    for(auto const &slice : slices)
+      {
+        this->ResetVars();
+
+        auto const primary = this->GetSlicePrimary(e, slice, handleSlices);
+
+        if(primary.isNull())
+          continue;
+
+        if(primary->PdgCode() == 13 || primary->PdgCode() == 11)
+          continue;
+
+        const std::vector<art::Ptr<larpandoraobj::PFParticleMetadata> > pfpMetaVec = pfpMetadataAssoc.at(primary.key());
+        const std::vector<art::Ptr<sbn::SimpleFlashMatch> > pfpFMVec = pfpFMAssoc.at(primary.key());
+        const std::vector<art::Ptr<anab::T0> > sliceCRTTrackT0s = this->GetCRTTrackT0s(e, slice, handlePFPs, handleSlices);
+        const std::vector<art::Ptr<anab::T0> > sliceCRTHitT0s = this->GetCRTHitT0s(e, slice, handlePFPs, handleSlices);
+
+        this->FillCRTVars(sliceCRTTrackT0s, sliceCRTHitT0s);
+
+        const art::Ptr<larpandoraobj::PFParticleMetadata> pfpMeta = pfpMetaVec.front();
+        std::map<std::string, float> propertiesMap = pfpMeta->GetPropertiesMap();
+      
+        this->FillPandoraNuScoreVars(propertiesMap);
+
+        tpc_StoppingChi2CosmicRatio = this->GetLongestTrackStoppingChi2Ratio(e, slice, handlePFPs, handleSlices);
+    
+        const art::Ptr<sbn::SimpleFlashMatch> flashmatch = pfpFMVec.front();
+        pds_FMTotalScore = flashmatch->score.total;
+        pds_FMPE = flashmatch->light.pe;
+        pds_FMTime = std::max(flashmatch->time, -100.);
+      
+        const float score = fMVAReader->EvaluateMVA(fMVAName);
+
+        resultsVec->emplace_back(score, tpc_CRFracHitsInLongestTrack, tpc_CRLongestTrackDeflection, tpc_CRLongestTrackDirY, std::round(tpc_CRNHitsMax),
+                                 tpc_NuEigenRatioInSphere, std::round(tpc_NuNFinalStatePfos), std::round(tpc_NuNHitsTotal), std::round(tpc_NuNSpacePointsInSphere), 
+                                 tpc_NuVertexY, tpc_NuWeightedDirZ, tpc_StoppingChi2CosmicRatio, pds_FMTotalScore, pds_FMPE, pds_FMTime, crt_TrackScore, crt_HitScore, 
+                                 crt_TrackTime, crt_HitTime);
+        
+        util::CreateAssn(*this, e, *resultsVec, slice, *sliceAssns);
+
+        if(fTrainingMode)
+          {
+            std::vector<art::Ptr<recob::Hit> > sliceHits = this->GetAllSliceHits(e, slice, handleSlices);
+
+            int matchedID(-1);
+            this->GetTruthMatching(e, sliceHits, allHits, trackIDToGenMap, matchedID, matchedPurity, matchedCompleteness);
+
+            slicePDG = primary->PdgCode();
+            matchedType = genTypeMap[matchedID];
+      
+            fSliceTree->Fill();
+          }
+      }
+
+    e.put(std::move(resultsVec));
+    e.put(std::move(sliceAssns));
+  }
+
+  void CRUMBS::FillCRTVars(const std::vector<art::Ptr<anab::T0> > &trackT0s, const std::vector<art::Ptr<anab::T0> > &hitT0s)
+  {
+    if (!trackT0s.empty()){
+      crt_TrackScore = std::numeric_limits<float>::max();
+      for(auto const crttrackmatcht0 : trackT0s)
+        {
+          if(crttrackmatcht0->TriggerConfidence() < crt_TrackScore)
+            {
+              crt_TrackScore = crttrackmatcht0->TriggerConfidence();
+              crt_TrackTime = crttrackmatcht0->Time() * 1e-3;
+            }
+        }
+    }
+  
+    if (!hitT0s.empty()){
+      crt_HitScore = std::numeric_limits<float>::max();
+      for(auto const crthitmatcht0 : hitT0s)
+        {
+          if(crthitmatcht0->TriggerConfidence() < crt_HitScore)
+            {
+              crt_HitScore = crthitmatcht0->TriggerConfidence();
+              crt_HitTime = crthitmatcht0->Time() * 1e-3;
+            }
+        }
+    }
+  }
+
+  void CRUMBS::FillPandoraNuScoreVars(std::map<std::string, float> &propertiesMap)
+  {
+    auto propertiesMapIter = propertiesMap.find("NuScore");
+    if (propertiesMapIter == propertiesMap.end()){
+      std::cout << "CRUMBS_module: Error finding variable -- NuScore" << std::endl;
+      abort();
+    }
+    tpc_NuScore = propertiesMapIter->second;
+
+    propertiesMapIter = propertiesMap.find("CRFracHitsInLongestTrack");
+    if (propertiesMapIter == propertiesMap.end()){
+      std::cout << "CRUMBS_module: Error finding variable -- CRFracHitsInLongestTrack" << std::endl;
+      abort();
+    }
+    tpc_CRFracHitsInLongestTrack = propertiesMapIter->second;
+
+    propertiesMapIter = propertiesMap.find("CRLongestTrackDeflection");
+    if (propertiesMapIter == propertiesMap.end()){
+      std::cout << "CRUMBS_module: Error finding variable -- CRLongestTrackDeflection" << std::endl;
+      abort();
+    }
+    tpc_CRLongestTrackDeflection = propertiesMapIter->second;
+
+    propertiesMapIter = propertiesMap.find("CRLongestTrackDirY");
+    if (propertiesMapIter == propertiesMap.end()){
+      std::cout << "CRUMBS_module: Error finding variable -- CRLongestTrackDirY" << std::endl;
+      abort();
+    }
+    tpc_CRLongestTrackDirY = propertiesMapIter->second;
+
+    propertiesMapIter = propertiesMap.find("CRNHitsMax");
+    if (propertiesMapIter == propertiesMap.end()){
+      std::cout << "CRUMBS_module: Error finding variable -- CRNHitsMax" << std::endl;
+      abort();
+    }
+    tpc_CRNHitsMax = propertiesMapIter->second;
+
+    propertiesMapIter = propertiesMap.find("NuEigenRatioInSphere");
+    if (propertiesMapIter == propertiesMap.end()){
+      std::cout << "CRUMBS_module: Error finding variable -- NuEigenRatioInSphere" << std::endl;
+      abort();
+    }
+    tpc_NuEigenRatioInSphere = propertiesMapIter->second;
+
+    propertiesMapIter = propertiesMap.find("NuNFinalStatePfos");
+    if (propertiesMapIter == propertiesMap.end()){
+      std::cout << "CRUMBS_module: Error finding variable -- NuNFinalStatePfos" << std::endl;
+      abort();
+    }
+    tpc_NuNFinalStatePfos = propertiesMapIter->second;
+
+    propertiesMapIter = propertiesMap.find("NuNHitsTotal");
+    if (propertiesMapIter == propertiesMap.end()){
+      std::cout << "CRUMBS_module: Error finding variable -- NuNHitsTotal" << std::endl;
+      abort();
+    }
+    tpc_NuNHitsTotal = propertiesMapIter->second;
+
+    propertiesMapIter = propertiesMap.find("NuNSpacePointsInSphere");
+    if (propertiesMapIter == propertiesMap.end()){
+      std::cout << "CRUMBS_module: Error finding variable -- NuNSpacePointsInSphere" << std::endl;
+      abort();
+    }
+    tpc_NuNSpacePointsInSphere = propertiesMapIter->second;
+
+    propertiesMapIter = propertiesMap.find("NuVertexY");
+    if (propertiesMapIter == propertiesMap.end()){
+      std::cout << "CRUMBS_module: Error finding variable -- NuVertexY" << std::endl;
+      abort();
+    }
+    tpc_NuVertexY = propertiesMapIter->second;
+
+    propertiesMapIter = propertiesMap.find("NuWeightedDirZ");
+    if (propertiesMapIter == propertiesMap.end()){
+      std::cout << "CRUMBS_module: Error finding variable -- NuWeightedDirZ" << std::endl;
+      abort();
+    }
+    tpc_NuWeightedDirZ = propertiesMapIter->second;
+  }
+
+  std::vector<art::Ptr<recob::Hit> > CRUMBS::GetAllSliceHits(art::Event const& e, const art::Ptr<recob::Slice> &slice, const art::ValidHandle<std::vector<recob::Slice> > &handleSlices)
+  {
+    art::FindManyP<recob::Hit> sliceHitAssn(handleSlices,e,fSliceModuleLabel);
+    return sliceHitAssn.at(slice.key());
+  }
+
+  art::Ptr<recob::PFParticle> CRUMBS::GetSlicePrimary(art::Event const& e, const art::Ptr<recob::Slice> &slice, const art::ValidHandle<std::vector<recob::Slice> > &handleSlices)
+  {
+    art::FindManyP<recob::PFParticle> slicePfpAssn(handleSlices,e,fSliceModuleLabel);
+    std::vector<art::Ptr<recob::PFParticle> > pfps = slicePfpAssn.at(slice.key());
+
+    for(auto const &pfp : pfps)
+      {
+        if(pfp->IsPrimary())
+          return pfp;
+      }
+  
+    art::Ptr<recob::PFParticle> nullReturn;
+    return nullReturn;
+  }
+
+  void CRUMBS::GetTruthMatching(art::Event const& e, const std::vector<art::Ptr<recob::Hit> > &sliceHits, const std::vector<art::Ptr<recob::Hit> > &allHits, 
+                                std::map<int, int> &trackIDToGenMap, int &matchedID, double &purity, double &completeness)
+  {
+    std::map<int, int> sliceHitMap;
+    std::map<int, float> slicePurityMap;
+
+    auto clockData = art::ServiceHandle<detinfo::DetectorClocksService>()->DataFor(e);
+
+    for (auto const& hit : sliceHits)
+      {
+        ++sliceHitMap[trackIDToGenMap[TruthMatchUtils::TrueParticleID(clockData,hit,true)]];
+      }
+
+    for (auto const& [id, nHits] : sliceHitMap)
+      {
+        slicePurityMap[id] = (float) nHits / (float) sliceHits.size();
+      }
+
+    for (auto const& [id, pur] : slicePurityMap)
+      {
+        if(pur > purity) 
+          {
+            matchedID = id;
+            purity = pur;
+          }
+      }
+
+    int totalTrueHits(0);
+
+    for (auto const& hit : allHits)
+      {
+        if(trackIDToGenMap[TruthMatchUtils::TrueParticleID(clockData,hit,true)] == matchedID)
+          ++totalTrueHits;
+      }
+  
+    if(totalTrueHits == 0) 
+      completeness = 0;
+    else
+      completeness = sliceHitMap[matchedID] / (float) totalTrueHits;
+  }
+
+  std::vector<art::Ptr<anab::T0> > CRUMBS::GetCRTTrackT0s(art::Event const& e, const art::Ptr<recob::Slice> &slice, const art::ValidHandle<std::vector<recob::PFParticle> > &handlePFPs,
+                                                          const art::ValidHandle<std::vector<recob::Slice> > &handleSlices)
+  {
+    std::vector<art::Ptr<anab::T0> > t0Vec;
+
+    art::Handle<std::vector<recob::Track> > handleTracks;
+    e.getByLabel(fTrackModuleLabel, handleTracks);
+
+    art::FindManyP<recob::PFParticle> slicePFPAssn(handleSlices,e,fSliceModuleLabel);
+    art::FindManyP<recob::Track> pfpTrackAssn(handlePFPs,e,fTrackModuleLabel);
+    art::FindManyP<anab::T0> trackT0Assn(handleTracks,e,fCRTTrackMatchModuleLabel);
+
+    const std::vector<art::Ptr<recob::PFParticle> > pfps = slicePFPAssn.at(slice.key());
+  
+    for(auto const& pfp : pfps)
+      {
+        if(pfp->PdgCode() != 13)
+          continue;
+
+        const std::vector<art::Ptr<recob::Track> > tracks = pfpTrackAssn.at(pfp.key());
+
+        if(tracks.size() != 1)
+          continue;
+
+        const art::Ptr<recob::Track> track = tracks.front();
+
+        const std::vector<art::Ptr<anab::T0> > t0s = trackT0Assn.at(track.key());
+        t0Vec.insert(t0Vec.end(), t0s.begin(), t0s.end());
+      }
+  
+    return t0Vec;
+  }
+
+  std::vector<art::Ptr<anab::T0> > CRUMBS::GetCRTHitT0s(art::Event const& e, const art::Ptr<recob::Slice> &slice, const art::ValidHandle<std::vector<recob::PFParticle> > &handlePFPs,
+                                                        const art::ValidHandle<std::vector<recob::Slice> > &handleSlices)
+  {
+    std::vector<art::Ptr<anab::T0> > t0Vec;
+
+    art::Handle<std::vector<recob::Track> > handleTracks;
+    e.getByLabel(fTrackModuleLabel, handleTracks);
+
+    art::FindManyP<recob::PFParticle> slicePFPAssn(handleSlices,e,fSliceModuleLabel);
+    art::FindManyP<recob::Track> pfpTrackAssn(handlePFPs,e,fTrackModuleLabel);
+    art::FindManyP<anab::T0> trackT0Assn(handleTracks,e,fCRTHitMatchModuleLabel);
+
+    const std::vector<art::Ptr<recob::PFParticle> > pfps = slicePFPAssn.at(slice.key());
+  
+    for(auto const& pfp : pfps)
+      {
+        if(pfp->PdgCode() != 13)
+          continue;
+
+        const std::vector<art::Ptr<recob::Track> > tracks = pfpTrackAssn.at(pfp.key());
+
+        if(tracks.size() != 1)
+          continue;
+
+        const art::Ptr<recob::Track> track = tracks.front();
+
+        const std::vector<art::Ptr<anab::T0> > t0s = trackT0Assn.at(track.key());
+        t0Vec.insert(t0Vec.end(), t0s.begin(), t0s.end());
+      }
+  
+    return t0Vec;
+  }
+
+  float CRUMBS::GetLongestTrackStoppingChi2Ratio(art::Event const& e, const art::Ptr<recob::Slice> &slice, const art::ValidHandle<std::vector<recob::PFParticle> > &handlePFPs,
+                                                 const art::ValidHandle<std::vector<recob::Slice> > &handleSlices)
+  {
+    art::Ptr<anab::Calorimetry> longestTrackCalo;
+    float maxLength = -std::numeric_limits<float>::max();
+
+    art::Handle<std::vector<recob::Track> > handleTracks;
+    e.getByLabel(fTrackModuleLabel, handleTracks);
+
+    art::FindManyP<recob::PFParticle> slicePFPAssn(handleSlices,e,fSliceModuleLabel);
+    art::FindOneP<recob::Track> pfpTrackAssn(handlePFPs,e,fTrackModuleLabel);
+    art::FindManyP<anab::Calorimetry> trackCaloAssn(handleTracks,e,fCalorimetryModuleLabel);
+
+    const std::vector<art::Ptr<recob::PFParticle> > pfps = slicePFPAssn.at(slice.key());
+  
+    for(auto const& pfp : pfps)
+      {
+        if(pfp->PdgCode() != 13)
+          continue;
+
+        const art::Ptr<recob::Track> track = pfpTrackAssn.at(pfp.key());
+
+        if(track.isNull())
+          continue;
+
+        const std::vector<art::Ptr<anab::Calorimetry> > calos = trackCaloAssn.at(track.key());
+
+        const unsigned int maxHits(std::max({ calos[0]->dEdx().size(), calos[1]->dEdx().size(), calos[2]->dEdx().size() }));
+        const int bestPlane((calos[2]->dEdx().size() == maxHits) ? 2 : (calos[0]->dEdx().size() == maxHits) ? 0 : (calos[1]->dEdx().size() == maxHits) ? 1 : -1);
+
+        if (bestPlane == -1)
+          continue;
+
+        const art::Ptr<anab::Calorimetry> calo = calos.at(bestPlane);
+
+        if(track->Length() > maxLength)
+          {
+            maxLength = track->Length();
+            longestTrackCalo = calo;
+          }
+      }
+
+    sbn::StoppingChi2Fit longestTrackFit = longestTrackCalo.isNull() ? StoppingChi2Fit() : fTrackStoppingChi2Alg.RunFitForCosmicID(*longestTrackCalo);
+
+    if(longestTrackFit.pol0Chi2 < 0 || longestTrackFit.expChi2 <= 0)
+      return -4.f;
+  
+    return longestTrackFit.pol0Chi2 / longestTrackFit.expChi2;
+  }
+}
+
+DEFINE_ART_MODULE(sbn::CRUMBS)
diff --git a/sbncode/CosmicID/sbn_crumbs_producer.fcl b/sbncode/CosmicID/sbn_crumbs_producer.fcl
new file mode 100644
index 0000000..949031b
--- /dev/null
+++ b/sbncode/CosmicID/sbn_crumbs_producer.fcl
@@ -0,0 +1,33 @@
+BEGIN_PROLOG
+
+crumbs_sbnd:
+{
+  module_type:     "CRUMBS"
+
+  MCParticleModuleLabel:		"largeant"
+  GeneratorModuleLabel:			"generator"
+  CosmicModuleLabel:			"corsika"
+
+  PFParticleModuleLabel:		"pandora"
+  HitModuleLabel:			"gaushit"
+  TrackModuleLabel:			"pandoraTrack"
+  SliceModuleLabel:			"pandora"
+  FlashMatchModuleLabel:		"fmatch"
+  CRTTrackMatchModuleLabel:		"crttrackt0"
+  CRTHitMatchModuleLabel:		"crthitt0"
+  CalorimetryModuleLabel:		"pandoraCalo"
+  
+  MVAName:				"BDT Method"
+  MVAFileName:				"CRUMBS/CRUMBS_SBND.weights.xml"
+    
+  Chi2FitParams: {
+    TrackLabel: pandoraTrack
+    CaloLabel: pandoraCalo
+    MinTrackLength: 10
+    FitRange: 30
+    MaxdEdx: 30
+    MinHits: 30
+  }
+}
+
+END_PROLOG
diff --git a/sbncode/EventGenerator/MeVPrtl/CMakeLists.txt b/sbncode/EventGenerator/MeVPrtl/CMakeLists.txt
index 6d63008..e896bdc 100644
--- a/sbncode/EventGenerator/MeVPrtl/CMakeLists.txt
+++ b/sbncode/EventGenerator/MeVPrtl/CMakeLists.txt
@@ -1,65 +1,64 @@
-find_ups_product(ifdhc)
-find_ups_product(dk2nudata)
-find_ups_product(dk2nugenie)
+find_package(ifdhc) ### MIGRATE-ACTION-RECOMMENDED: use cet_find_package() with target semantics for linking
+find_package(dk2nudata) ### MIGRATE-ACTION-RECOMMENDED: use cet_find_package() with target semantics for linking
+find_package(dk2nugenie) ### MIGRATE-ACTION-RECOMMENDED: use cet_find_package() with target semantics for linking
 
-link_directories( $ENV{ROOTSYS}/lib )
-link_directories( $ENV{DK2NUDATA_LIB} )
-link_directories( $ENV{DK2NUGENIE_LIB} )
+link_directories( $ENV{ROOTSYS}/lib ) ### MIGRATE-ACTION-RECOMMENDED: use target_link_libraries() with target semantics
+link_directories( $ENV{DK2NUDATA_LIB} ) ### MIGRATE-ACTION-RECOMMENDED: use target_link_libraries() with target semantics
+link_directories( $ENV{DK2NUGENIE_LIB} ) ### MIGRATE-ACTION-RECOMMENDED: use target_link_libraries() with target semantics
 
 add_subdirectory(Tools)
 add_subdirectory(config)
 
 simple_plugin( MeVPrtlGen module
-              ${ART_FRAMEWORK_CORE}
-              ${ART_FRAMEWORK_SERVICES_REGISTRY}
-              ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-              ${ART_FRAMEWORK_SERVICES}
-				      ${ART_FRAMEWORK_SERVICES_OPTIONAL_TFILESERVICE_SERVICE}
-				      ${ART_ROOT_IO_TFILE_SUPPORT}
-              ${ART_FRAMEWORK_PRINCIPAL}
-              art_Persistency_Common
-              art_Utilities canvas
+              art::Framework_Core
+              art::Framework_Services_Registry
+              art_root_io::TFileService_service
+				      art_root_io::TFileService_service
+				      art_root_io::tfile_support
+              art::Framework_Principal
+              art::Persistency_Common
+              art::Utilities canvas::canvas
               ${MF_MESSAGELOGGER}
               ${MF_UTILITIES}
               ${FHICLCPP}
-              cetlib cetlib_except
+              cetlib::cetlib cetlib_except::cetlib_except
               ${ROOT_EVE_LIB_LIST}
               ${ROOT_X3d}
               ${ROOT_CORE}
               ${ROOT_BASIC_LIB_LIST}
         			${ROOT_XMLIO}
-        			${CLHEP}
-		nusimdata_SimulationBase
-              larcorealg_Geometry
-        			nurandom_RandomUtils_NuRandomService_service
-        			larcoreobj_SummaryData
-        			sbnobj_Common_EventGen_MeVPrtl
-        			sbncode_EventGenerator_MeVPrtl_Constants
+        			CLHEP::CLHEP
+		nusimdata::SimulationBase
+              larcorealg::Geometry
+        			nurandom::RandomUtils_NuRandomService_service
+        			larcoreobj::SummaryData
+        			sbnobj::Common_EventGen_MeVPrtl
+        			sbncode::EventGenerator_MeVPrtl_Constants
 )
 
 simple_plugin( MeVPrtlTestRayTrace module
-                            ${ART_FRAMEWORK_CORE}
-                            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                            ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-				${ART_FRAMEWORK_SERVICES_OPTIONAL_TFILESERVICE_SERVICE}
-				${ART_ROOT_IO_TFILE_SUPPORT}
-                            ${ART_FRAMEWORK_PRINCIPAL}
-                            art_Persistency_Common
-                            art_Utilities canvas
+                            art::Framework_Core
+                            art::Framework_Services_Registry
+                            art_root_io::TFileService_service
+				art_root_io::TFileService_service
+				art_root_io::tfile_support
+                            art::Framework_Principal
+                            art::Persistency_Common
+                            art::Utilities canvas::canvas
                             ${MF_MESSAGELOGGER}
                             ${MF_UTILITIES}
                             ${FHICLCPP}
-                            cetlib cetlib_except
+                            cetlib::cetlib cetlib_except::cetlib_except
                             ${ROOT_EVE_LIB_LIST}
                             ${ROOT_X3d}
                             ${ROOT_CORE}
                             ${ROOT_BASIC_LIB_LIST}
 			${ROOT_XMLIO}
-			${CLHEP}
-			nurandom_RandomUtils_NuRandomService_service
-			larcoreobj_SummaryData
-        		sbnobj_Common_EventGen_MeVPrtl
-			sbncode_EventGenerator_MeVPrtl_Constants
+			CLHEP::CLHEP
+			nurandom::RandomUtils_NuRandomService_service
+			larcoreobj::SummaryData
+        		sbnobj::Common_EventGen_MeVPrtl
+			sbncode::EventGenerator_MeVPrtl_Constants
 )
 
 
diff --git a/sbncode/EventGenerator/MeVPrtl/Tools/CMakeLists.txt b/sbncode/EventGenerator/MeVPrtl/Tools/CMakeLists.txt
index 3f1d1f6..bb50c69 100644
--- a/sbncode/EventGenerator/MeVPrtl/Tools/CMakeLists.txt
+++ b/sbncode/EventGenerator/MeVPrtl/Tools/CMakeLists.txt
@@ -1,150 +1,155 @@
-link_directories( $ENV{ROOTSYS}/lib )
 
-art_make_library( LIBRARY_NAME sbncode_EventGenerator_MeVPrtl_Constants
+find_library( IFDH NAMES ifdh PATHS $ENV{IFDHC_DIR}/lib) ### MIGRATE-ACTION-RECOMMENDED: use of ENV ... may be UPS-dependent ### MIGRATE-ACTION-RECOMMENDED: use cet_find_package() with target semantics for linking
+include_directories( $ENV{IFDHC_DIR}/inc ) ### MIGRATE-ACTION-RECOMMENDED: use target_link_directories() with target semantics
+
+find_library( DK2NUTREE NAMES dk2nuTree PATHS $ENV{DK2NUDATA_LIB})
+find_library( DK2NUGENIE NAMES dk2nuGenie PATHS $ENV{DK2NUGENIE_LIB})
+
+art_make_library( LIBRARY_NAME sbncode::EventGenerator_MeVPrtl_Constants
           SOURCE Constants.cpp
           LIBRARIES
-                        ${ROOT_BASIC_LIB_LIST}
-                        ${ROOT_EVE_LIB_LIST}
-                        ${ROOT_X3d}
-                            ${FHICLCPP}
-                            cetlib cetlib_except
+                        ROOT::Core
+                        ROOT::Eve
+                        ROOT::X3d
+                            fhiclcpp::fhiclcpp
+                            cetlib::cetlib cetlib_except::cetlib_except
         )
 
 
 simple_plugin( EmptyKaonGen tool
-                            ${ART_FRAMEWORK_CORE}
-                            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                            ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-                            ${ART_FRAMEWORK_PRINCIPAL}
-                            art_Persistency_Common
-                            art_Utilities canvas
+                            art::Framework_Core
+                            art::Framework_Services_Registry
+                            art_root_io::TFileService_service
+                            art::Framework_Principal
+                            art::Persistency_Common
+                            art::Utilities canvas::canvas
                             ${MF_MESSAGELOGGER}
                             ${MF_UTILITIES}
-                            ${FHICLCPP}
-                            cetlib cetlib_except
-                            ${ROOT_EVE_LIB_LIST}
-                            ${ROOT_X3d}
-                            ${ROOT_BASIC_LIB_LIST}
-			${CLHEP}
-			nurandom_RandomUtils_NuRandomService_service
-			nusimdata_SimulationBase
-			sbncode_EventGenerator_MeVPrtl_Constants
+                            fhiclcpp::fhiclcpp
+                            cetlib::cetlib cetlib_except::cetlib_except
+                            ROOT::Eve
+                            ROOT::X3d
+                            ROOT::Core
+			CLHEP::CLHEP
+			nurandom::RandomUtils_NuRandomService_service
+			nusimdata::SimulationBase
+			sbncode::EventGenerator_MeVPrtl_Constants
+                        sbnobj::Common_EventGen_MeVPrtl
 )
 
-cet_find_library( IFDH NAMES ifdh PATHS ENV IFDHC_LIB NO_DEFAULT_PATH )
-##include_directories( $ENV{IFDHC_FQ_DIR}/inc )
-##include_directories( $ENV{IFDH_ART_FQ_DIR}/inc )
-
-cet_find_library( IFDH_SERVICE NAMES IFDH_service PATHS ENV IFDH_ART_LIB )
-
 
 simple_plugin( NuMiKaonGen tool
-                            IFDH_SERVICE
-                            ${ART_FRAMEWORK_CORE}
-                            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                            ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-                            ${ART_FRAMEWORK_PRINCIPAL}
-                            art_Persistency_Common
-                            art_Utilities canvas
+                            ifdh_art::IFDH_service
+                            art::Framework_Core
+                            art::Framework_Services_Registry
+                            art_root_io::TFileService_service 
+                            art::Framework_Principal
+                            art::Persistency_Common
+                            art::Utilities canvas::canvas
                             ${MF_MESSAGELOGGER}
                             ${MF_UTILITIES}
-                            ${FHICLCPP}
-                            cetlib cetlib_except
-                            ${ROOT_EVE_LIB_LIST}
-                            ${ROOT_X3d}
-                            ${ROOT_BASIC_LIB_LIST}
-			${CLHEP}
-			ifdh
-			dk2nuTree
-			nurandom_RandomUtils_NuRandomService_service
-			nusimdata_SimulationBase
-			sbncode_EventGenerator_MeVPrtl_Constants
+                            fhiclcpp::fhiclcpp
+                            cetlib::cetlib cetlib_except::cetlib_except
+                            ROOT::Eve
+                            ROOT::X3d
+                            ROOT::Core
+			CLHEP::CLHEP
+			ifdh::ifdh
+			${DK2NUTREE}
+			nurandom::RandomUtils_NuRandomService_service
+			nusimdata::SimulationBase
+			sbncode::EventGenerator_MeVPrtl_Constants
+                        sbnobj::Common_EventGen_MeVPrtl
 )
 
 simple_plugin( WeightedRayTraceBox tool
-                            ${ART_FRAMEWORK_CORE}
-                            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                            ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-                            ${ART_FRAMEWORK_PRINCIPAL}
-                            art_Persistency_Common
-                            art_Utilities canvas
+                            art::Framework_Core
+                            art::Framework_Services_Registry
+                            art_root_io::TFileService_service 
+                            art::Framework_Principal
+                            art::Persistency_Common
+                            art::Utilities canvas::canvas
                             ${MF_MESSAGELOGGER}
                             ${MF_UTILITIES}
-                            ${FHICLCPP}
-                            cetlib cetlib_except
-                            ${ROOT_EVE_LIB_LIST}
-                            ${ROOT_X3d}
-                            ${ROOT_BASIC_LIB_LIST}
-			${CLHEP}
-			larcorealg_Geometry
-			nurandom_RandomUtils_NuRandomService_service
-			dk2nuGenie
-			dk2nuTree
-			sbncode_EventGenerator_MeVPrtl_Constants
+                            fhiclcpp::fhiclcpp
+                            cetlib::cetlib cetlib_except::cetlib_except
+                            ROOT::Eve
+                            ROOT::X3d
+                            ROOT::Core
+			CLHEP::CLHEP
+			larcorealg::Geometry
+			nurandom::RandomUtils_NuRandomService_service
+			${DK2NUGENIE}
+			${DK2NUTREE}
+			sbncode::EventGenerator_MeVPrtl_Constants
+                        sbnobj::Common_EventGen_MeVPrtl
 )
 
 simple_plugin( MixedWeightRayTraceBox tool
-                            ${ART_FRAMEWORK_CORE}
-                            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                            ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-                            ${ART_FRAMEWORK_PRINCIPAL}
-                            art_Persistency_Common
-                            art_Utilities canvas
+                            art::Framework_Core
+                            art::Framework_Services_Registry
+                            art_root_io::TFileService_service
+                            art::Framework_Principal
+                            art::Persistency_Common
+                            art::Utilities canvas::canvas
                             ${MF_MESSAGELOGGER}
                             ${MF_UTILITIES}
-                            ${FHICLCPP}
-                            cetlib cetlib_except
-                            ${ROOT_EVE_LIB_LIST}
-                            ${ROOT_X3d}
-                            ${ROOT_BASIC_LIB_LIST}
-			${CLHEP}
-			larcorealg_Geometry
-			nurandom_RandomUtils_NuRandomService_service
+                            fhiclcpp::fhiclcpp
+                            cetlib::cetlib cetlib_except::cetlib_except
+                            ROOT::Eve
+                            ROOT::X3d
+                            ROOT::Core
+			CLHEP::CLHEP
+			larcorealg::Geometry
+			nurandom::RandomUtils_NuRandomService_service
 			dk2nuTree
-			sbncode_EventGenerator_MeVPrtl_Constants
+			sbncode::EventGenerator_MeVPrtl_Constants
+                        sbnobj::Common_EventGen_MeVPrtl
 )
 
 
 
 
 simple_plugin( ReThrowRayTraceBox tool
-                            ${ART_FRAMEWORK_CORE}
-                            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                            ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-                            ${ART_FRAMEWORK_PRINCIPAL}
-                            art_Persistency_Common
-                            art_Utilities canvas
+                            art::Framework_Core
+                            art::Framework_Services_Registry
+                            art_root_io::TFileService_service
+                            art::Framework_Principal
+                            art::Persistency_Common
+                            art::Utilities canvas::canvas
                             ${MF_MESSAGELOGGER}
                             ${MF_UTILITIES}
-                            ${FHICLCPP}
-                            cetlib cetlib_except
-                            ${ROOT_EVE_LIB_LIST}
-                            ${ROOT_X3d}
-                            ${ROOT_BASIC_LIB_LIST}
-			${CLHEP}
-			larcorealg_Geometry
-			nurandom_RandomUtils_NuRandomService_service
-			sbncode_EventGenerator_MeVPrtl_Constants
+                            fhiclcpp::fhiclcpp
+                            cetlib::cetlib cetlib_except::cetlib_except
+                            ROOT::Eve
+                            ROOT::X3d
+                            ROOT::Core
+			CLHEP::CLHEP
+			larcorealg::Geometry
+			nurandom::RandomUtils_NuRandomService_service
+			sbncode::EventGenerator_MeVPrtl_Constants
+                        sbnobj::Common_EventGen_MeVPrtl
 )
 
 simple_plugin( RayTraceBox tool
-                            ${ART_FRAMEWORK_CORE}
-                            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                            ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-                            ${ART_FRAMEWORK_PRINCIPAL}
-                            art_Persistency_Common
-                            art_Utilities canvas
+                            art::Framework_Core
+                            art::Framework_Services_Registry
+                            art_root_io::TFileService_service
+                            art::Framework_Principal
+                            art::Persistency_Common
+                            art::Utilities canvas::canvas
                             ${MF_MESSAGELOGGER}
                             ${MF_UTILITIES}
-                            ${FHICLCPP}
-                            cetlib cetlib_except
-                            ${ROOT_EVE_LIB_LIST}
-                            ${ROOT_X3d}
-                            ${ROOT_BASIC_LIB_LIST}
-			${CLHEP}
-			larcorealg_Geometry
-			nurandom_RandomUtils_NuRandomService_service
-			sbncode_EventGenerator_MeVPrtl_Constants
+                            fhiclcpp::fhiclcpp
+                            cetlib::cetlib cetlib_except::cetlib_except
+                            ROOT::Eve
+                            ROOT::X3d
+                            ROOT::Core
+			CLHEP::CLHEP
+			larcorealg::Geometry
+			nurandom::RandomUtils_NuRandomService_service
+			sbncode::EventGenerator_MeVPrtl_Constants
+                        sbnobj::Common_EventGen_MeVPrtl
 )
 
 add_subdirectory(Higgs)
diff --git a/sbncode/EventGenerator/MeVPrtl/Tools/HNL/CMakeLists.txt b/sbncode/EventGenerator/MeVPrtl/Tools/HNL/CMakeLists.txt
index 1c2f798..368b4c6 100644
--- a/sbncode/EventGenerator/MeVPrtl/Tools/HNL/CMakeLists.txt
+++ b/sbncode/EventGenerator/MeVPrtl/Tools/HNL/CMakeLists.txt
@@ -1,55 +1,58 @@
-art_make_library( LIBRARY_NAME sbncode_EventGenerator_MeVPrtl_Dalitz
+art_make_library( LIBRARY_NAME sbncode::EventGenerator_MeVPrtl_Dalitz
           SOURCE HNLDecayDalitz.cpp
           LIBRARIES
                         ${ROOT_BASIC_LIB_LIST}
                         ${ROOT_EVE_LIB_LIST}
                         ${ROOT_X3d}
-			sbncode_EventGenerator_MeVPrtl_Constants
+			sbncode::EventGenerator_MeVPrtl_Constants
+                        sbnobj::Common_EventGen_MeVPrtl
         )
 
 simple_plugin( Kaon2HNLFlux tool
-                            ${ART_FRAMEWORK_CORE}
-                            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                            ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-                            ${ART_FRAMEWORK_PRINCIPAL}
-                            art_Persistency_Common
-                            art_Utilities canvas
+                            art::Framework_Core
+                            art::Framework_Services_Registry
+                            art_root_io::TFileService_service 
+                            art::Framework_Principal
+                            art::Persistency_Common
+                            art::Utilities canvas::canvas
                             ${MF_MESSAGELOGGER}
                             ${MF_UTILITIES}
                             ${FHICLCPP}
-                            cetlib cetlib_except
+                            cetlib::cetlib cetlib_except::cetlib_except
                             ${ROOT_EVE_LIB_LIST}
                             ${ROOT_X3d}
                             ${ROOT_BASIC_LIB_LIST}
-			EGPythia6
-			${CLHEP}
-			sbnobj_Common_EventGen_MeVPrtl
-			nugen_EventGeneratorBase_GENIE
-			nurandom_RandomUtils_NuRandomService_service
-			GSL
-			sbncode_EventGenerator_MeVPrtl_Constants
+			ROOT::EGPythia6
+			CLHEP::CLHEP
+			sbnobj::Common_EventGen_MeVPrtl
+			nugen::EventGeneratorBase_GENIE
+			nurandom::RandomUtils_NuRandomService_service
+			gsl
+			sbncode::EventGenerator_MeVPrtl_Constants
+                        sbnobj::Common_EventGen_MeVPrtl
 )
 
 simple_plugin( HNLMakeDecay tool
-                            ${ART_FRAMEWORK_CORE}
-                            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                            ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-                            ${ART_FRAMEWORK_PRINCIPAL}
-                            art_Persistency_Common
-                            art_Utilities canvas
+                            art::Framework_Core
+                            art::Framework_Services_Registry
+                            art_root_io::TFileService_service
+                            art::Framework_Principal
+                            art::Persistency_Common
+                            art::Utilities canvas::canvas
                             ${MF_MESSAGELOGGER}
                             ${MF_UTILITIES}
                             ${FHICLCPP}
-                            cetlib cetlib_except
+                            cetlib::cetlib cetlib_except::cetlib_except
                             ${ROOT_EVE_LIB_LIST}
                             ${ROOT_X3d}
                             ${ROOT_BASIC_LIB_LIST}
-			${CLHEP}
-			nurandom_RandomUtils_NuRandomService_service
-			nusimdata_SimulationBase
-			GSL
-			sbncode_EventGenerator_MeVPrtl_Dalitz
-			sbncode_EventGenerator_MeVPrtl_Constants
+			CLHEP::CLHEP
+			nurandom::RandomUtils_NuRandomService_service
+			nusimdata::SimulationBase
+			${GSL}
+			sbncode::EventGenerator_MeVPrtl_Dalitz
+			sbncode::EventGenerator_MeVPrtl_Constants
+                        sbnobj::Common_EventGen_MeVPrtl
 )
 
 
diff --git a/sbncode/EventGenerator/MeVPrtl/Tools/Higgs/CMakeLists.txt b/sbncode/EventGenerator/MeVPrtl/Tools/Higgs/CMakeLists.txt
index 97bab07..638b7a1 100644
--- a/sbncode/EventGenerator/MeVPrtl/Tools/Higgs/CMakeLists.txt
+++ b/sbncode/EventGenerator/MeVPrtl/Tools/Higgs/CMakeLists.txt
@@ -1,65 +1,68 @@
 simple_plugin( MonoEnergyHiggsFlux tool
-                            ${ART_FRAMEWORK_CORE}
-                            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                            ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-                            ${ART_FRAMEWORK_PRINCIPAL}
-                            art_Persistency_Common
-                            art_Utilities canvas
+                            art::Framework_Core
+                            art::Framework_Services_Registry
+                            art_root_io::TFileService_service 
+                            art::Framework_Principal
+                            art::Persistency_Common
+                            art::Utilities canvas::canvas
                             ${MF_MESSAGELOGGER}
                             ${MF_UTILITIES}
                             ${FHICLCPP}
-                            cetlib cetlib_except
+                            cetlib::cetlib cetlib_except::cetlib_except
                             ${ROOT_EVE_LIB_LIST}
                             ${ROOT_X3d}
                             ${ROOT_BASIC_LIB_LIST}
-			${CLHEP}
-			nugen_EventGeneratorBase_GENIE
-			nurandom_RandomUtils_NuRandomService_service
-			sbncode_EventGenerator_MeVPrtl_Constants
+			CLHEP::CLHEP
+			nugen::EventGeneratorBase_GENIE
+			nurandom::RandomUtils_NuRandomService_service
+			sbncode::EventGenerator_MeVPrtl_Constants
+                        sbnobj::Common_EventGen_MeVPrtl
 )
 
 
 simple_plugin( Kaon2HiggsFlux tool
-                            ${ART_FRAMEWORK_CORE}
-                            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                            ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-                            ${ART_FRAMEWORK_PRINCIPAL}
-                            art_Persistency_Common
-                            art_Utilities canvas
+                            art::Framework_Core
+                            art::Framework_Services_Registry
+                            art_root_io::TFileService_service
+                            art::Framework_Principal
+                            art::Persistency_Common
+                            art::Utilities canvas::canvas
                             ${MF_MESSAGELOGGER}
                             ${MF_UTILITIES}
                             ${FHICLCPP}
-                            cetlib cetlib_except
+                            cetlib::cetlib cetlib_except::cetlib_except
                             ${ROOT_EVE_LIB_LIST}
                             ${ROOT_X3d}
                             ${ROOT_BASIC_LIB_LIST}
 			EGPythia6
-			${CLHEP}
-			sbnobj_Common_EventGen_MeVPrtl
-			nugen_EventGeneratorBase_GENIE
-			nurandom_RandomUtils_NuRandomService_service
-			GSL
-			sbncode_EventGenerator_MeVPrtl_Constants
+			CLHEP::CLHEP
+			sbnobj::Common_EventGen_MeVPrtl
+			nugen::EventGeneratorBase_GENIE
+			nurandom::RandomUtils_NuRandomService_service
+			${GSL}
+			sbncode::EventGenerator_MeVPrtl_Constants
+                        sbnobj::Common_EventGen_MeVPrtl
 )
 
 simple_plugin( HiggsMakeDecay tool
-                            ${ART_FRAMEWORK_CORE}
-                            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                            ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-                            ${ART_FRAMEWORK_PRINCIPAL}
-                            art_Persistency_Common
-                            art_Utilities canvas
+                            art::Framework_Core
+                            art::Framework_Services_Registry
+                            art_root_io::TFileService_service
+                            art::Framework_Principal
+                            art::Persistency_Common
+                            art::Utilities canvas::canvas
                             ${MF_MESSAGELOGGER}
                             ${MF_UTILITIES}
                             ${FHICLCPP}
-                            cetlib cetlib_except
+                            cetlib::cetlib cetlib_except::cetlib_except
                             ${ROOT_EVE_LIB_LIST}
                             ${ROOT_X3d}
                             ${ROOT_BASIC_LIB_LIST}
-			${CLHEP}
-			nurandom_RandomUtils_NuRandomService_service
-			nusimdata_SimulationBase
-			sbncode_EventGenerator_MeVPrtl_Constants
+			CLHEP::CLHEP
+			nurandom::RandomUtils_NuRandomService_service
+			nusimdata::SimulationBase
+			sbncode::EventGenerator_MeVPrtl_Constants
+                        sbnobj::Common_EventGen_MeVPrtl
 )
 
 install_headers()
diff --git a/sbncode/EventGenerator/MeVPrtl/Tools/Higgs/Kaon2HiggsFlux_tool.cc b/sbncode/EventGenerator/MeVPrtl/Tools/Higgs/Kaon2HiggsFlux_tool.cc
index bba1c06..4c79a82 100644
--- a/sbncode/EventGenerator/MeVPrtl/Tools/Higgs/Kaon2HiggsFlux_tool.cc
+++ b/sbncode/EventGenerator/MeVPrtl/Tools/Higgs/Kaon2HiggsFlux_tool.cc
@@ -68,6 +68,8 @@ private:
   double fM; //!< Mass of Higgs [GeV]
   double fMixingAngle; //!< Mixing angle of dark higgs
   bool fKDAROnly;
+  bool fKDIFOnly;
+  bool fKDIFandBeamline;
   bool fIgnoreParentDecayTime;
 
   // branching ratios
@@ -182,6 +184,8 @@ void Kaon2HiggsFlux::configure(fhicl::ParameterSet const &pset)
   fMixingAngle = pset.get<double>("MixingAngle");
   fIgnoreParentDecayTime = pset.get<bool>("IgnoreParentDecayTime");
   fKDAROnly = pset.get<bool>("KDAROnly", false);
+  fKDIFOnly = pset.get<bool>("KDIFOnly", false);
+  fKDIFandBeamline = pset.get<bool>("KDIFandBeamline", false);
 
   // Throw exception for a bad mass value
   if (fM > Constants::Instance().kplus_mass - Constants::Instance().piplus_mass && 
@@ -214,8 +218,13 @@ bool Kaon2HiggsFlux::MakeFlux(const simb::MCFlux &flux, evgen::ldm::MeVPrtlFlux
   if (!kaon.kaon_pdg) return false; // parent wasn't a kaon
 
   // select on the kaon
-  if (fKDAROnly && (kaon.mom.P() > 1e-3 || kaon.pos.Z() < 72000.)) return false;
+  if (fKDAROnly && (kaon.mom.P() > 1e-3 || kaon.pos.Z() < 72000.)) return false; //selects KDAR from absorber only.
   if (fKDAROnly) std::cout << "FOUND KDAR\n";
+  if (fKDIFOnly && (kaon.mom.P() <= 1e-3)){ // no KDAR allowed (from anywhere). Accepts KDIF from beamline or absorber.
+    std::cout << "found KDAR, skipping to next event\n";
+    return false;
+  }
+  if (fKDIFandBeamline && (kaon.mom.P() <= 1e-3 && kaon.pos.Z() >= 72000.)) return false; //allows for KDAR from decay-pipe, and any KDIF. This option is exactly orthogonal to "KDAROnly" option. 
 
   TLorentzVector Beam4 = BeamOrigin();
   // get position in detector frame
diff --git a/sbncode/EventGenerator/MeVPrtl/Tools/NuMiKaonGen_tool.cc b/sbncode/EventGenerator/MeVPrtl/Tools/NuMiKaonGen_tool.cc
index 1ba2882..4d9633b 100644
--- a/sbncode/EventGenerator/MeVPrtl/Tools/NuMiKaonGen_tool.cc
+++ b/sbncode/EventGenerator/MeVPrtl/Tools/NuMiKaonGen_tool.cc
@@ -13,7 +13,7 @@
 #include "fhiclcpp/ParameterSet.h"
 #include "messagefacility/MessageLogger/MessageLogger.h"
 #include "CLHEP/Random/RandFlat.h"
-#include "IFDH_service.h"
+#include "ifdh_art/IFDHService/IFDH_service.h"
 
 #include "nusimdata/SimulationBase/MCFlux.h"
 
diff --git a/sbncode/EventGenerator/MeVPrtl/config/Higgs/dissonant_higgs.fcl b/sbncode/EventGenerator/MeVPrtl/config/Higgs/dissonant_higgs.fcl
index faafa8c..ab40fb7 100644
--- a/sbncode/EventGenerator/MeVPrtl/config/Higgs/dissonant_higgs.fcl
+++ b/sbncode/EventGenerator/MeVPrtl/config/Higgs/dissonant_higgs.fcl
@@ -8,7 +8,9 @@ kaon2higgs: {
   tool_type: Kaon2HiggsFlux
   M: @local::higgsM
   MixingAngle: 1e-5
-  KDAROnly: false
+  KDAROnly: false #as written this only includes KDAR from absorber (not all KDAR)
+  KDIFOnly: false #includes KDIF (from absorber or beamline)
+  KDIFandBeamline: false #inlcudes KDIF from beamline, KDIF from absorber, and KDAR from beamline (this option orthogonal to "KDAROnly")
 
   Beam2DetectorRotation: @local::icarus_numi_beam2detector_rotation
   BeamOrigin: @local::icarus_numi_beam_origin
diff --git a/sbncode/EventGenerator/MultiPart/CMakeLists.txt b/sbncode/EventGenerator/MultiPart/CMakeLists.txt
index a15df99..dd7226a 100644
--- a/sbncode/EventGenerator/MultiPart/CMakeLists.txt
+++ b/sbncode/EventGenerator/MultiPart/CMakeLists.txt
@@ -1,40 +1,40 @@
 # Add the subfolder containing the deconvolution tools
-art_make( 
-          MODULE_LIBRARIES larcorealg_Geometry
-            larcore_Geometry_Geometry_service
-            lardata_Utilities
-            larevt_Filters
-            lardataobj_RawData
-            larevt_CalibrationDBI_IOVData
-            larevt_CalibrationDBI_Providers
-            lardataobj_RecoBase
-            lardata_ArtDataHelper
-            larsim_Simulation nug4_ParticleNavigation 
-            lardataobj_Simulation
-            nusimdata_SimulationBase
-            lardata_Utilities
-            lardataobj_MCBase
-            larcoreobj_SummaryData
-            nusimdata_SimulationBase
-            nurandom_RandomUtils_NuRandomService_service
-            lardataobj_MCBase
-            ${CLHEP}
-            ${ART_FRAMEWORK_CORE}
-            ${ART_FRAMEWORK_PRINCIPAL}
-            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-            ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-            ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-            art_Persistency_Common
-            art_Persistency_Provenance
-            art_Utilities
-            canvas
+art_make(  ### MIGRATE-ACTION-RECOMMENDED: use art_make_library(), art_dictionary(), simple_plugin() with explicit source lists
+          MODULE_LIBRARIES larcorealg::Geometry
+            larcore::Geometry_Geometry_service
+            lardata::Utilities
+            larevt::Filters
+            lardataobj::RawData
+            larevt::CalibrationDBI_IOVData
+            larevt::CalibrationDBI_Providers
+            lardataobj::RecoBase
+            lardata::ArtDataHelper
+            larsim::Simulation nug4::ParticleNavigation 
+            lardataobj::Simulation
+            nusimdata::SimulationBase
+            lardata::Utilities
+            lardataobj::MCBase
+            larcoreobj::SummaryData
+            nusimdata::SimulationBase
+            nurandom::RandomUtils_NuRandomService_service
+            lardataobj::MCBase
+            CLHEP::CLHEP
+            art::Framework_Core
+            art::Framework_Principal
+            art::Framework_Services_Registry
+            art_root_io::tfile_support ${ROOT_CORE}
+            art_root_io::TFileService_service
+            art::Persistency_Common
+            art::Persistency_Provenance
+            art::Utilities
+            canvas::canvas
             ${MF_MESSAGELOGGER}
             ${MF_UTILITIES}
             ${FHICLCPP}
             ${CETLIB}
             ${ROOT_FFTW}
             ${ROOT_BASIC_LIB_LIST}
-	    ${ROOT_EG}
+	    ROOT::EG
         )
 
 install_headers()
diff --git a/sbncode/FlashMatch/CMakeLists.txt b/sbncode/FlashMatch/CMakeLists.txt
index ddb1522..f1d4127 100644
--- a/sbncode/FlashMatch/CMakeLists.txt
+++ b/sbncode/FlashMatch/CMakeLists.txt
@@ -4,35 +4,36 @@
 #  EXTRA_FLAGS  -Wall -Wextra  -pedantic  #-Wconversion
 #  )
 
-art_make(
+art_make( ### MIGRATE-ACTION-RECOMMENDED: use art_make_library(), art_dictionary(), simple_plugin() with explicit source lists
   MODULE_LIBRARIES
-  ${ART_FRAMEWORK_CORE}
-  ${ART_FRAMEWORK_PRINCIPAL}
-  ${ART_FRAMEWORK_SERVICES_REGISTRY}
-  ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-  ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-  art_Persistency_Common
-  art_Persistency_Provenance
-  art_Utilities canvas
-
-  canvas
-  cetlib
-  cetlib_except
-
-  larcore_Geometry_Geometry_service
-  larcorealg_Geometry
-
-  lardata_DetectorInfoServices_DetectorClocksServiceStandard_service
-  lardata_Utilities
-  lardataobj_AnalysisBase
-  lardataobj_RawData
-  lardataobj_RecoBase
-  lardataobj_Simulation
-
-  larpandora_LArPandoraInterface
-  larsim_Utils
-
-  nusimdata_SimulationBase
+  art::Framework_Core
+  art::Framework_Principal
+  art::Framework_Services_Registry
+  art_root_io::tfile_support ${ROOT_CORE}
+  art_root_io::TFileService_service
+  art::Persistency_Common
+  art::Persistency_Provenance
+  art::Utilities canvas::canvas
+
+  canvas::canvas
+  cetlib::cetlib
+  cetlib_except::cetlib_except
+
+  larcore::Geometry_Geometry_service
+  larcorealg::Geometry
+
+  lardata::DetectorInfoServices_DetectorClocksServiceStandard_service
+  lardata::Utilities
+  lardataalg::DetectorInfo
+  lardataobj::AnalysisBase
+  lardataobj::RawData
+  lardataobj::RecoBase
+  lardataobj::Simulation
+
+  larpandora::LArPandoraInterface
+  larsim::Utils
+  sbnobj::Common_Reco
+  nusimdata::SimulationBase
   ${MF_MESSAGELOGGER}
   ${FHICLCPP}
   ${ROOT_GEOM}
diff --git a/sbncode/FluxReader/CMakeLists.txt b/sbncode/FluxReader/CMakeLists.txt
index 7e11652..02e6297 100644
--- a/sbncode/FluxReader/CMakeLists.txt
+++ b/sbncode/FluxReader/CMakeLists.txt
@@ -1,94 +1,103 @@
 cet_enable_asserts()
-include_directories ( $ENV{GENIE_INC}/GENIE )
-include_directories ( $ENV{DK2NUDATA_INC} )
-include_directories ( $ENV{DK2NUGENIE_INC} )
-link_directories( $ENV{DK2NUDATA_LIB})
+include_directories ( $ENV{GENIE}/include/GENIE ) ### MIGRATE-ACTION-RECOMMENDED: use target_link_directories() with target semantics
+include_directories ( $ENV{GENIE}/include ) ### MIGRATE-ACTION-RECOMMENDED: use target_link_directories() with target semantics
+include_directories ( $ENV{DK2NUDATA_INC} ) ### MIGRATE-ACTION-RECOMMENDED: use target_link_directories() with target semantics
+include_directories ( $ENV{DK2NUGENIE_INC} ) ### MIGRATE-ACTION-RECOMMENDED: use target_link_directories() with target semantics
+link_directories( $ENV{DK2NUDATA_LIB}) ### MIGRATE-ACTION-RECOMMENDED: use target_link_libraries() with target semantics
 
 file(GLOB INTERFACEFILES *Interface* )
 
 simple_plugin( FluxReader
                "source"
-               sbncode_FluxReader
+               sbncode::FluxReader
+               larcore::Geometry_Geometry_service 
+               nutools::EventGeneratorBase_CRY
+               lardata::Utilities
                ${ART_FRAMEWORK_PERSISTENCY_COMMON}
 )
 
 simple_plugin ( FluxGeoFilter "module"
-                ${ART_FRAMEWORK_CORE}
-                ${ART_FRAMEWORK_PRINCIPAL}
-                ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                ${ART_FRAMEWORK_SERVICES_OPTIONAL}
-                ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                ${ART_ROOT_IO_TFILE_SUPPORT}
-                art_Persistency_Common canvas
-                art_Persistency_Provenance canvas
-                art_Utilities canvas
+                art::Framework_Core
+                art::Framework_Principal
+                art::Framework_Services_Registry
+                art_root_io::TFileService_service
+                art_root_io::tfile_support
+                art::Persistency_Common canvas::canvas
+                art::Persistency_Provenance canvas::canvas
+                art::Utilities canvas::canvas
                 ${MF_MESSAGELOGGER}
-                nusimdata_SimulationBase
-                larcore_Geometry_Geometry_service
-                larcorealg_Geometry
-                ${ROOT_GEOM}
+                nusimdata::SimulationBase
+                larcore::Geometry_Geometry_service
+               lardata::Utilities
+                larcorealg::Geometry
+                ROOT::Geom
                 ${ROOT_BASIC_LIB_LIST}
 )
 
-art_make_library( LIBRARY_NAME sbncode_FluxReader_FluxInterface
+art_make_library( LIBRARY_NAME sbncode::FluxReader_FluxInterface
                   SOURCE	${INTERFACEFILES}
                   LIBRARIES
-                  nusimdata_SimulationBase
+                  nusimdata::SimulationBase
+               larcore::Geometry_Geometry_service 
                   # GENIE STUFF #####################################
                   xml2
                   LOG4CPP
-                  GFwEG
-                  GFwAlg
-                  GFwMsg
-                  GFwGHEP
-                  GTlFlx
-                  dk2nuTree
+                  GENIE::GFwEG
+                  GENIE::GFwAlg
+                  GENIE::GFwMsg
+                  GENIE::GFwGHEP
+                  GENIE::GTlFlx
+                  dk2nu::Tree
                   #${DK2NUDATA}
                   ${DK2NUGENIE}
                   ####################################################
-                  cetlib cetlib_except
+                  cetlib::cetlib cetlib_except::cetlib_except
+               lardata::Utilities
 
                   ${FHICLCPP}
                   ${MF_MESSAGELOGGER}
-                  ${CLHEP}
-                  ${ROOT_BASIC_LIB_LIST}
+                  CLHEP::CLHEP
+                  ROOT::Core ROOT::Tree
                   ${Boost_SYSTEM_LIBRARY}
 )
 
-art_make( EXCLUDE FluxReader_source.cc ${INTERFACEFILES} FluxGeoFilter_module.cc
-          LIB_LIBRARIES	nusimdata_SimulationBase
-                        sbncode_FluxReader_FluxInterface
-                        larcoreobj_SummaryData
-                        ${ART_FRAMEWORK_CORE}
-                        ${ART_FRAMEWORK_IO_SOURCES}
-                        ${ART_FRAMEWORK_PRINCIPAL}
-                        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                        ${ART_FRAMEWORK_SERVICES_OPTIONAL}
-                        ${ART_FRAMEWORK_SERVICES_OPTIONAL_TFILESERVICE_SERVICE}
-                        ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                        ${ART_ROOT_IO_TFILE_SUPPORT}
-                        art_Persistency_Common canvas
-                        art_Persistency_Provenance canvas
-                        art_Utilities canvas
+art_make( EXCLUDE FluxReader_source.cc ${INTERFACEFILES} FluxGeoFilter_module.cc ### MIGRATE-ACTION-RECOMMENDED: use art_make_library(), art_dictionary(), simple_plugin() with explicit source lists
+          LIB_LIBRARIES	nusimdata::SimulationBase
+                        sbncode::FluxReader_FluxInterface
+                        larcoreobj::SummaryData
+               larcore::Geometry_Geometry_service 
+                        art::Framework_Core
+                        art::Framework_IO_Sources
+                        art::Framework_Principal
+                        art::Framework_Services_Registry
+                        art_root_io::TFileService_service
+                        art_root_io::TFileService_service
+                        art_root_io::tfile_support
+                        art::Persistency_Common canvas::canvas
+                        art::Persistency_Provenance canvas::canvas
+                        art::Utilities canvas::canvas
                         ${MF_MESSAGELOGGER}
                         ${MF_UTILITIES}
                         ${FHICLCPP}
                         ${Boost_SYSTEM_LIBRARY}
-                        ${ROOT_BASIC_LIB_LIST}
-                        cetlib cetlib_except
+                        ROOT::Core ROOT::Tree
+                        cetlib::cetlib cetlib_except::cetlib_except
+               nutools::EventGeneratorBase_CRY
+               lardata::Utilities
 
-          MODULE_LIBRARIES sbncode_FluxReader
-                        sbncode_FluxReader_FluxInterface
-                        nusimdata_SimulationBase
-                        larcoreobj_SummaryData
-                        ${ART_FRAMEWORK_CORE}
-                        ${ART_FRAMEWORK_IO_SOURCES}
-                        ${ART_FRAMEWORK_PRINCIPAL}
-                        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                        ${ART_FRAMEWORK_SERVICES_OPTIONAL}
-                        ${ART_FRAMEWORK_SERVICES_OPTIONAL_TFILESERVICE_SERVICE}
-                        ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                        ${ART_ROOT_IO_TFILE_SUPPORT}
+          MODULE_LIBRARIES sbncode::FluxReader
+                        sbncode::FluxReader_FluxInterface
+                        nusimdata::SimulationBase
+                        larcoreobj::SummaryData
+               larcore::Geometry_Geometry_service 
+               lardata::Utilities
+                        art::Framework_Core
+                        art::Framework_IO_Sources
+                        art::Framework_Principal
+                        art::Framework_Services_Registry
+                        art_root_io::TFileService_service
+                        art_root_io::TFileService_service
+                        art_root_io::tfile_support
                         # GENIE STUFF #####################################
                         xml2
                         LOG4CPP
@@ -107,7 +116,7 @@ art_make( EXCLUDE FluxReader_source.cc ${INTERFACEFILES} FluxGeoFilter_module.cc
                         ${MF_UTILITIES}
                         ${FHICLCPP}
                         ${Boost_SYSTEM_LIBRARY}
-                        ${ROOT_BASIC_LIB_LIST}
+                        ROOT::Core ROOT::Tree
 )
 
 install_headers()
diff --git a/sbncode/GeometryTools/CMakeLists.txt b/sbncode/GeometryTools/CMakeLists.txt
index 9e162ab..cc8796a 100644
--- a/sbncode/GeometryTools/CMakeLists.txt
+++ b/sbncode/GeometryTools/CMakeLists.txt
@@ -1,25 +1,25 @@
 art_make(    LIBRARY_NAME sbncode_GeoWrappers
-             LIB_LIBRARIES larcorealg_Geometry
-                           larcore_Geometry_Geometry_service
-                           larsim_Simulation lardataobj_Simulation
-                           larsim_MCCheater_BackTrackerService_service
-                           larsim_MCCheater_ParticleInventoryService_service
-                           lardata_Utilities
-                           larevt_Filters
-                           lardataobj_RawData
-                           lardataobj_RecoBase
-                           lardata_RecoObjects  
-                           larpandora_LArPandoraInterface
-                           nusimdata_SimulationBase
-                           cetlib cetlib_except
+             LIB_LIBRARIES larcorealg::Geometry
+                           larcore::Geometry_Geometry_service
+                           larsim::Simulation lardataobj::Simulation
+                           larsim::MCCheater_BackTrackerService_service
+                           larsim::MCCheater_ParticleInventoryService_service
+                           lardata::Utilities
+                           larevt::Filters
+                           lardataobj::RawData
+                           lardataobj::RecoBase
+                           lardata::RecoObjects  
+                           larpandora::LArPandoraInterface
+                           nusimdata::SimulationBase
+                           cetlib::cetlib cetlib_except::cetlib_except
                            ${ART_FRAMEWORK_CORE}
                            ${ART_FRAMEWORK_PRINCIPAL}
                            ${ART_FRAMEWORK_SERVICES_REGISTRY}
                            ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
                            ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-                           art_Persistency_Common canvas
-                           art_Persistency_Provenance canvas
-                           art_Utilities canvas
+                           art::Persistency_Common canvas::canvas
+                           art::Persistency_Provenance
+                           art::Utilities
                            ${MF_MESSAGELOGGER}
                            
                            ${FHICLCPP}
diff --git a/sbncode/GeometryTools/TPCGeoAlg.cc b/sbncode/GeometryTools/TPCGeoAlg.cc
index 5ae094e..64ff7b0 100644
--- a/sbncode/GeometryTools/TPCGeoAlg.cc
+++ b/sbncode/GeometryTools/TPCGeoAlg.cc
@@ -147,7 +147,7 @@ bool TPCGeoAlg::InsideTPC(geo::Point_t point, const geo::TPCGeo& tpc, double buf
 }
 
 // Minimum distance to a TPC wall
-double TPCGeoAlg::MinDistToWall(geo::Point_t point){
+double TPCGeoAlg::MinDistToWall(geo::Point_t point) const{
 
   std::vector<double> dists;
   
diff --git a/sbncode/GeometryTools/TPCGeoAlg.h b/sbncode/GeometryTools/TPCGeoAlg.h
index 2d4268d..934dcd0 100644
--- a/sbncode/GeometryTools/TPCGeoAlg.h
+++ b/sbncode/GeometryTools/TPCGeoAlg.h
@@ -64,7 +64,7 @@ namespace sbn{
     // Work out the drift limits for a collection of hits
     std::pair<double, double> XLimitsFromHits(std::vector<art::Ptr<recob::Hit>> hits);
 
-    double MinDistToWall(geo::Point_t point);
+    double MinDistToWall(geo::Point_t point) const;
 
     // Determine if a true particle is ever inside the TPC volume
     bool InVolume(const simb::MCParticle& particle);
diff --git a/sbncode/LArRecoProducer/CMakeLists.txt b/sbncode/LArRecoProducer/CMakeLists.txt
index a8b1c01..2159422 100644
--- a/sbncode/LArRecoProducer/CMakeLists.txt
+++ b/sbncode/LArRecoProducer/CMakeLists.txt
@@ -1,30 +1,38 @@
-#link_directories(
+#link_directories( ### MIGRATE-ACTION-RECOMMENDED: use target_link_libraries() with target semantics
 # $ENV{ROOTSYS}/lib
 #)
 
 add_subdirectory(LArReco)
-art_make( MODULE_LIBRARIES
-	${ART_FRAMEWORK_CORE}
-	${ART_FRAMEWORK_SERVICES_REGISTRY}
-	${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-	${ART_FRAMEWORK_PRINCIPAL}
-	art_Persistency_Common
-	art_Utilities canvas
+art_make( 
+  LIB_LIBRARIES
+		fhiclcpp::fhiclcpp
+		art::Persistency_Provenance canvas
+		${ROOT_BASIC_LIB_LIST}
+		sbncode_GeoWrappers
+
+  MODULE_LIBRARIES
+	art::Framework_Core
+	art::Framework_Services_Registry
+	art_root_io::TFileService_service 
+	art::Framework_Principal
+	art::Persistency_Common
+	art::Utilities canvas::canvas
 	${MF_MESSAGELOGGER}
 	${MF_UTILITIES}
 	${FHICLCPP}
-	cetlib cetlib_except
+	cetlib::cetlib cetlib_except::cetlib_except
 	${ROOT_EVE_LIB_LIST}
-	${ROOT_X3d}
-	${ROOT_BASIC_LIB_LIST}
-	MF_MessageLogger
-
+	ROOT::X3d
+	ROOT::Core
+	messagefacility::MF_MessageLogger
+        ROOT::EG
 	sbn_LArReco	    
-	sbnobj_Common_CRT
-	sbnobj_Common_Reco
-	lardataobj_RecoBase_AssnsDicts_dict
-	lardataobj_RecoBase_dict	
-	lardataobj_RecoBase
+        sbncode_LArRecoProducer
+	sbnobj::Common_CRT
+	sbnobj::Common_Reco
+	lardataobj::RecoBase_AssnsDicts_dict
+	lardataobj::RecoBase_dict	
+	lardataobj::RecoBase
 )
 
 install_headers()
diff --git a/sbncode/LArRecoProducer/LArReco/CMakeLists.txt b/sbncode/LArRecoProducer/LArReco/CMakeLists.txt
index 0395da4..8a416cf 100644
--- a/sbncode/LArRecoProducer/LArReco/CMakeLists.txt
+++ b/sbncode/LArRecoProducer/LArReco/CMakeLists.txt
@@ -2,18 +2,18 @@
 art_make_library( LIBRARY_NAME sbn_LArReco
   SOURCE  TrackMomentumCalculator.cxx TrajectoryMCSFitter.cxx
                   LIBRARIES
-        ${ART_FRAMEWORK_CORE}
-        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-        ${ART_FRAMEWORK_SERVICES}
-        ${ART_FRAMEWORK_PRINCIPAL}
-        art_Persistency_Common
-        art_Utilities canvas
+        art::Framework_Core
+        art::Framework_Services_Registry
+        art::Framework_Principal
+        art::Persistency_Common
+        art::Utilities canvas::canvas
                     ${ROOT_BASIC_LIB_LIST}
         ${MF_MESSAGELOGGER}
         ${MF_UTILITIES}
         ${FHICLCPP}
-                    cetlib cetlib_except
-        lardataobj_RecoBase
-        ${ROOT_MINUIT}
-        ${ROOT_MINUIT2}
+                    cetlib::cetlib cetlib_except::cetlib_except
+        lardataobj::RecoBase larcorealg::CoreUtils lardata::RecoObjects
+        ROOT::Minuit
+        ROOT::Minuit2
+        ROOT::Graf3d
                 )
diff --git a/sbncode/LArRecoProducer/TrackStoppingChi2Alg.cc b/sbncode/LArRecoProducer/TrackStoppingChi2Alg.cc
new file mode 100644
index 0000000..db777a9
--- /dev/null
+++ b/sbncode/LArRecoProducer/TrackStoppingChi2Alg.cc
@@ -0,0 +1,83 @@
+#include "sbncode/LArRecoProducer/TrackStoppingChi2Alg.h"
+
+#include "TF1.h"
+#include "TGraph.h"
+
+
+sbn::TrackStoppingChi2Alg::TrackStoppingChi2Alg(fhicl::ParameterSet const& p) :
+  fFitRange(p.get<float>("FitRange"))
+  , fMaxdEdx(p.get<float>("MaxdEdx"))
+  , fMinHits(p.get<unsigned int>("MinHits"))
+{
+}
+
+sbn::StoppingChi2Fit sbn::TrackStoppingChi2Alg::RunFit(const std::vector<float> &dEdxVec, const std::vector<float> &resRangeVec) const
+{
+  if (dEdxVec.size() != resRangeVec.size())
+    throw cet::exception("TrackStoppingChi2Alg") << "dEdx and Res Range do not have same length: " << dEdxVec.size() << " and " << resRangeVec.size() << std::endl;
+
+  if (dEdxVec.size() < fMinHits)
+    return StoppingChi2Fit();
+
+  const auto graph(std::make_unique<TGraph>(dEdxVec.size(), &resRangeVec[0], &dEdxVec[0]));
+
+  // Try and fit a flat polynomial
+  graph->Fit("pol0", "Q");
+  const TF1* polFit = graph->GetFunction("pol0");
+  const float pol0Chi2(polFit ? polFit->GetChisquare() : -5.f);
+  const float pol0Fit(polFit ? polFit->GetParameter(0) : -5.f);
+
+  // Try to fit an exponential
+  graph->Fit("expo", "Q");
+  const TF1* expFit = graph->GetFunction("expo");
+  const float expChi2(expFit ? expFit->GetChisquare() : -5.f);
+
+  return StoppingChi2Fit(pol0Chi2, expChi2, pol0Fit);
+}
+
+sbn::StoppingChi2Fit sbn::TrackStoppingChi2Alg::RunFit(const anab::Calorimetry& calo) const
+{
+
+  std::vector<float> dEdxVec, resRangeVec;
+  // Fill the dEdx vs res range vectors, ignoring the first/last points
+  for (size_t i = 1; i < calo.dEdx().size() - 1; i++) {
+    const float thisdEdx(calo.dEdx()[i]);
+    const float thisResRange(calo.ResidualRange()[i]);
+    if (thisResRange > fFitRange || thisdEdx > fMaxdEdx)
+      continue;
+
+    dEdxVec.push_back(thisdEdx);
+    resRangeVec.push_back(thisResRange);
+  }
+
+  return this->RunFit(dEdxVec, resRangeVec);
+}
+
+sbn::StoppingChi2Fit sbn::TrackStoppingChi2Alg::RunFitForCosmicID(const anab::Calorimetry& calo) const
+{
+  if(calo.XYZ().size() == 0)
+    return StoppingChi2Fit();
+
+  geo::Point_t start(calo.XYZ().front());
+  geo::Point_t end(calo.XYZ().back());
+
+  std::vector<float> dEdxVec, resRangeVec;
+  // Fill the dEdx vs res range vectors, ignoring the first/last points
+  for (size_t i = 1; i < calo.dEdx().size() - 1; i++) {
+    const float thisdEdx(calo.dEdx()[i]);
+    const float thisResRange(calo.ResidualRange()[i]);
+    if (thisResRange > fFitRange || thisdEdx > fMaxdEdx)
+      continue;
+
+    dEdxVec.push_back(thisdEdx);
+    resRangeVec.push_back(thisResRange);
+  }
+
+  if(fTpcGeo.MinDistToWall(start) > fTpcGeo.MinDistToWall(end))
+    {
+      std::reverse(dEdxVec.begin(), dEdxVec.end());
+      std::reverse(resRangeVec.begin(), resRangeVec.end());
+    }
+
+  return this->RunFit(dEdxVec, resRangeVec);
+}
diff --git a/sbncode/LArRecoProducer/TrackStoppingChi2Alg.h b/sbncode/LArRecoProducer/TrackStoppingChi2Alg.h
new file mode 100644
index 0000000..d477258
--- /dev/null
+++ b/sbncode/LArRecoProducer/TrackStoppingChi2Alg.h
@@ -0,0 +1,46 @@
+#ifndef TRACK_STOPPING_CHI2_ALG_H_SEEN
+#define TRACK_STOPPING_CHI2_ALG_H_SEEN
+
+///////////////////////////////////////////////////////////////////////////////
+//
+// TrackStoppingChi2Alg.h
+//
+// Algorithm that performs an exponential and a 0-order polynomial fit
+// to stopping tracks in order to identify Bragg peaks
+//
+///////////////////////////////////////////////////////////////////////////////
+
+#include "fhiclcpp/ParameterSet.h"
+#include "sbnobj/Common/Reco/StoppingChi2Fit.h"
+#include "sbncode/GeometryTools/TPCGeoAlg.h"
+#include "lardataobj/AnalysisBase/Calorimetry.h"
+
+#include <vector>
+
+namespace sbn {
+
+  class TrackStoppingChi2Alg {
+
+  public:
+
+    TrackStoppingChi2Alg(fhicl::ParameterSet const& p);
+
+    StoppingChi2Fit RunFit(const std::vector<float> &dEdxVec, const std::vector<float> &resRangeVec) const;
+    
+    // Prepare dE/dx and residual range vectors for fitting assuming pandora's track direction
+    StoppingChi2Fit RunFit(const anab::Calorimetry& calo) const;
+
+    // Prepare dE/dx and residual range vectors for fitting assuming incoming cosmic hypothesis
+    StoppingChi2Fit RunFitForCosmicID(const anab::Calorimetry& calo) const;
+    
+  private:
+  
+    const float fFitRange, fMaxdEdx;
+    const unsigned int fMinHits;
+
+    sbn::TPCGeoAlg fTpcGeo;
+
+  };
+}
+
+#endif
diff --git a/sbncode/LArRecoProducer/TrackStoppingChi2Fitter_module.cc b/sbncode/LArRecoProducer/TrackStoppingChi2Fitter_module.cc
index c7335b2..64f98d9 100644
--- a/sbncode/LArRecoProducer/TrackStoppingChi2Fitter_module.cc
+++ b/sbncode/LArRecoProducer/TrackStoppingChi2Fitter_module.cc
@@ -21,12 +21,8 @@
 #include "lardata/Utilities/AssociationUtil.h"
 #include "messagefacility/MessageLogger/MessageLogger.h"
 
-#include "lardataobj/AnalysisBase/Calorimetry.h"
 #include "lardataobj/RecoBase/Track.h"
-#include "sbnobj/Common/Reco/StoppingChi2Fit.h"
-
-#include "TF1.h"
-#include "TGraph.h"
+#include "sbncode/LArRecoProducer/TrackStoppingChi2Alg.h"
 
 #include <memory>
 
@@ -49,10 +45,9 @@ class TrackStoppingChi2Fitter : public art::EDProducer {
   private:
   // Declare member data here.
   const art::InputTag fTrackLabel, fCaloLabel;
-  const float fMinTrackLength, fFitRange, fMaxdEdx;
-  const unsigned int fMinHits;
+  const float fMinTrackLength;
 
-  StoppingChi2Fit RunFit(const anab::Calorimetry& calo) const;
+  sbn::TrackStoppingChi2Alg fTrackStoppingChi2Alg;
 };
 
 TrackStoppingChi2Fitter::TrackStoppingChi2Fitter(fhicl::ParameterSet const& p)
@@ -60,9 +55,7 @@ TrackStoppingChi2Fitter::TrackStoppingChi2Fitter(fhicl::ParameterSet const& p)
     , fTrackLabel(p.get<std::string>("TrackLabel"))
     , fCaloLabel(p.get<std::string>("CaloLabel"))
     , fMinTrackLength(p.get<float>("MinTrackLength"))
-    , fFitRange(p.get<float>("FitRange"))
-    , fMaxdEdx(p.get<float>("MaxdEdx"))
-    , fMinHits(p.get<unsigned int>("MinHits"))
+    , fTrackStoppingChi2Alg(p)
 {
   produces<std::vector<StoppingChi2Fit>>();
   produces<art::Assns<recob::Track, StoppingChi2Fit>>();
@@ -100,7 +93,7 @@ void TrackStoppingChi2Fitter::produce(art::Event& e)
     if (bestPlane == -1)
       continue;
 
-    StoppingChi2Fit thisFit(this->RunFit(*caloVec.at(bestPlane)));
+    StoppingChi2Fit thisFit(fTrackStoppingChi2Alg.RunFit(*caloVec.at(bestPlane)));
 
     if (thisFit.pol0Chi2 < 0.f || thisFit.expChi2 < 0.f)
       continue;
@@ -114,43 +107,6 @@ void TrackStoppingChi2Fitter::produce(art::Event& e)
   e.put(std::move(trackAssns));
   e.put(std::move(caloAssns));
 }
-
-StoppingChi2Fit TrackStoppingChi2Fitter::RunFit(const anab::Calorimetry& calo) const
-{
-
-  std::vector<float> dEdxVec, resRangeVec;
-  // Fill the dEdx vs res range vectors, ignoring the first/last points
-  for (size_t i = 1; i < calo.dEdx().size() - 1; i++) {
-    const float thisdEdx(calo.dEdx()[i]);
-    const float thisResRange(calo.ResidualRange()[i]);
-    if (thisResRange > fFitRange || thisdEdx > fMaxdEdx)
-      continue;
-
-    dEdxVec.push_back(thisdEdx);
-    resRangeVec.push_back(thisResRange);
-  }
-
-  if (dEdxVec.size() != resRangeVec.size())
-    throw cet::exception("TrachStoppingChi2Fitter") << "dEdx and Res Range do not have same length: " << dEdxVec.size() << " and " << resRangeVec.size() << std::endl;
-
-  if (dEdxVec.size() < fMinHits)
-    return StoppingChi2Fit();
-
-  const auto graph(std::make_unique<TGraph>(dEdxVec.size(), &resRangeVec[0], &dEdxVec[0]));
-
-  // Try and fit a flat polynomial
-  graph->Fit("pol0", "Q");
-  const TF1* polFit = graph->GetFunction("pol0");
-  const float pol0Chi2(polFit ? polFit->GetChisquare() : -5.f);
-  const float pol0Fit(polFit ? polFit->GetParameter(0) : -5.f);
-
-  // Try to fit an exponential
-  graph->Fit("expo", "Q");
-  const TF1* expFit = graph->GetFunction("expo");
-  const float expChi2(expFit ? expFit->GetChisquare() : -5.f);
-
-  return StoppingChi2Fit(pol0Chi2, expChi2, pol0Fit);
-}
 }
 
 DEFINE_ART_MODULE(sbn::TrackStoppingChi2Fitter)
diff --git a/sbncode/Metadata/CMakeLists.txt b/sbncode/Metadata/CMakeLists.txt
index 0cfa462..8948112 100644
--- a/sbncode/Metadata/CMakeLists.txt
+++ b/sbncode/Metadata/CMakeLists.txt
@@ -1,15 +1,15 @@
 cet_enable_asserts()
 
-set( sbn_meta_lib_list   ${ART_FRAMEWORK_CORE}
-                         ${ART_FRAMEWORK_PRINCIPAL}
-                         ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                         ${ART_FRAMEWORK_SERVICES_BASIC}
+set( sbn_meta_lib_list   art::Framework_Core
+                         art::Framework_Principal
+                         art::Framework_Services_Registry
                          ${ART_FRAMEWORK_SERVICES_SYSTEM_FILECATALOGMETADATA_SERVICE}
-                         art_Framework_Services_System_TriggerNamesService_service
-			 art_Persistency_Common canvas
-			 art_Persistency_Provenance canvas
+                         art::Framework_Services_System_TriggerNamesService_service
+			 art::Persistency_Common canvas::canvas
+			 art::Persistency_Provenance canvas::canvas
                          ${MF_MESSAGELOGGER}
-                         ${ROOT_BASIC_LIB_LIST}
+                         ROOT::Core
+                         larcoreobj::SummaryData
     )
 
 simple_plugin( FileCatalogMetadataSBN  "service"
@@ -18,8 +18,8 @@ simple_plugin( FileCatalogMetadataSBN  "service"
 
 simple_plugin( MetadataSBN "service"
                ${sbn_meta_lib_list}
-               art_Framework_IO
-               art_Framework_IO_detail
+               art::Framework_IO
+               art::Framework_IO_detail
         )
 
 install_headers()
diff --git a/sbncode/NuMuSelection/CMakeLists.txt b/sbncode/NuMuSelection/CMakeLists.txt
index 02bfebb..f1f69d9 100644
--- a/sbncode/NuMuSelection/CMakeLists.txt
+++ b/sbncode/NuMuSelection/CMakeLists.txt
@@ -1,86 +1,95 @@
 simple_plugin( MuPVertexStudy module
-                            ${ART_FRAMEWORK_CORE}
-                            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                            ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-                            ${ART_FRAMEWORK_PRINCIPAL}
-                            art_Persistency_Common
-                            art_Utilities canvas
+                            art::Framework_Core
+                            art::Framework_Services_Registry
+                            art_root_io::TFileService_service
+                            art::Framework_Principal
+                            art::Persistency_Common
+                            art::Utilities canvas::canvas
                             ${MF_MESSAGELOGGER}
                             ${MF_UTILITIES}
                             ${FHICLCPP}
-                            cetlib cetlib_except
+                            cetlib::cetlib cetlib_except::cetlib_except
                             ${ROOT_EVE_LIB_LIST}
                             ${ROOT_X3d}
                             ${ROOT_BASIC_LIB_LIST}
-	art_root_io_tfile_support
-	art_root_io
-	art_root_io_dict
+	art_root_io::tfile_support
+	art_root_io::art_root_io
+	art_root_io::dict
         caf_RecoUtils
-        lardataobj_AnalysisBase
-        lardataobj_RecoBase
-        larcorealg_Geometry
-        larcore_Geometry_Geometry_service
-        larcorealg_GeoAlgo
-        larsim_MCCheater_BackTrackerService_service
-        nusimdata_SimulationBase
-        larsim_MCCheater_ParticleInventoryService_service
-	larcorealg_GeoAlgo
+        lardataobj::AnalysisBase
+        lardataobj::RecoBase
+        larcorealg::Geometry
+        larcore::Geometry_Geometry_service
+        larcorealg::GeoAlgo
+        lardataalg::DetectorInfo
+        lardata::DetectorInfoServices_DetectorClocksServiceStandard_service
+        larsim::MCCheater_BackTrackerService_service
+        nusimdata::SimulationBase
+        larsim::MCCheater_ParticleInventoryService_service
+	larcorealg::GeoAlgo
+        larreco::RecoAlg
 )
 simple_plugin( MuonS2NStudy module
-                            ${ART_FRAMEWORK_CORE}
-                            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                            ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-                            ${ART_FRAMEWORK_PRINCIPAL}
-                            art_Persistency_Common
-                            art_Utilities canvas
+                            art::Framework_Core
+                            art::Framework_Services_Registry
+                            art_root_io::TFileService_service
+                            art::Framework_Principal
+                            art::Persistency_Common
+                            art::Utilities canvas::canvas
                             ${MF_MESSAGELOGGER}
                             ${MF_UTILITIES}
                             ${FHICLCPP}
-                            cetlib cetlib_except
+                            cetlib::cetlib cetlib_except::cetlib_except
                             ${ROOT_EVE_LIB_LIST}
                             ${ROOT_X3d}
                             ${ROOT_BASIC_LIB_LIST}
-	art_root_io_tfile_support
-	art_root_io
-	art_root_io_dict
+	art_root_io::tfile_support
+	art_root_io::art_root_io
+	art_root_io::dict
         caf_RecoUtils
-        lardataobj_AnalysisBase
-        lardataobj_RecoBase
-        larcorealg_Geometry
-        larcore_Geometry_Geometry_service
-        larcorealg_GeoAlgo
-        larsim_MCCheater_BackTrackerService_service
-        nusimdata_SimulationBase
-        larsim_MCCheater_ParticleInventoryService_service
-	larcorealg_GeoAlgo
+        lardataobj::AnalysisBase
+        lardataobj::RecoBase
+        larcorealg::Geometry
+        larcore::Geometry_Geometry_service
+        larcorealg::GeoAlgo
+        lardataalg::DetectorInfo
+        lardata::DetectorInfoServices_DetectorClocksServiceStandard_service
+        larsim::MCCheater_BackTrackerService_service
+        nusimdata::SimulationBase
+        larsim::MCCheater_ParticleInventoryService_service
+	larcorealg::GeoAlgo
+        larreco::RecoAlg
 )
 simple_plugin( NuMuEfficiencyStudy module
-                            ${ART_FRAMEWORK_CORE}
-                            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                            ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-                            ${ART_FRAMEWORK_PRINCIPAL}
-                            art_Persistency_Common
-                            art_Utilities canvas
+                            art::Framework_Core
+                            art::Framework_Services_Registry
+                            art_root_io::TFileService_service
+                            art::Framework_Principal
+                            art::Persistency_Common
+                            art::Utilities canvas::canvas
                             ${MF_MESSAGELOGGER}
                             ${MF_UTILITIES}
                             ${FHICLCPP}
-                            cetlib cetlib_except
+                            cetlib::cetlib cetlib_except::cetlib_except
                             ${ROOT_EVE_LIB_LIST}
                             ${ROOT_X3d}
                             ${ROOT_BASIC_LIB_LIST}
-	art_root_io_tfile_support
-	art_root_io
-	art_root_io_dict
+	art_root_io::tfile_support
+	art_root_io::art_root_io
+	art_root_io::dict
         caf_RecoUtils
-        lardataobj_AnalysisBase
-        lardataobj_RecoBase
-        larcorealg_Geometry
-        larcore_Geometry_Geometry_service
-        larcorealg_GeoAlgo
-        larsim_MCCheater_BackTrackerService_service
-        nusimdata_SimulationBase
-        larsim_MCCheater_ParticleInventoryService_service
-	larcorealg_GeoAlgo
+        lardataobj::AnalysisBase
+        lardataobj::RecoBase
+        larcorealg::Geometry
+        larcore::Geometry_Geometry_service
+        larcorealg::GeoAlgo
+        lardataalg::DetectorInfo
+        lardata::DetectorInfoServices_DetectorClocksServiceStandard_service
+        larsim::MCCheater_BackTrackerService_service
+        nusimdata::SimulationBase
+        larsim::MCCheater_ParticleInventoryService_service
+	larcorealg::GeoAlgo
+        larreco::RecoAlg
 )
 
 install_headers()
diff --git a/sbncode/OpDet/CMakeLists.txt b/sbncode/OpDet/CMakeLists.txt
index 3a27da6..4119140 100644
--- a/sbncode/OpDet/CMakeLists.txt
+++ b/sbncode/OpDet/CMakeLists.txt
@@ -1,7 +1,7 @@
 cet_enable_asserts()
 
-art_make(   TOOL_LIBRARIES
-	    art_Utilities
+art_make(   TOOL_LIBRARIES ### MIGRATE-ACTION-RECOMMENDED: use art_make_library(), art_dictionary(), simple_plugin() with explicit source lists
+	    art::Utilities
 	    ${FHICLCPP}
 	    ${CETLIB}
 )
diff --git a/sbncode/OpT0Finder/CMakeLists.txt b/sbncode/OpT0Finder/CMakeLists.txt
index 3837439..1e3828e 100644
--- a/sbncode/OpT0Finder/CMakeLists.txt
+++ b/sbncode/OpT0Finder/CMakeLists.txt
@@ -1,5 +1,5 @@
 # Add Geant4 directories as needed by flashmatch code
-include_directories($ENV{GEANT4_FQ_DIR}/include)
+include_directories($ENV{GEANT4_FQ_DIR}/include) ### MIGRATE-ACTION-RECOMMENDED: use target_link_directories() with target semantics
 
 add_subdirectory(Products)
 add_subdirectory(flashmatch)
diff --git a/sbncode/OpT0Finder/Products/CMakeLists.txt b/sbncode/OpT0Finder/Products/CMakeLists.txt
index 1650113..66cccf9 100644
--- a/sbncode/OpT0Finder/Products/CMakeLists.txt
+++ b/sbncode/OpT0Finder/Products/CMakeLists.txt
@@ -1,11 +1,18 @@
 # for classes_def.xml!!
-include_directories( ${CMAKE_CURRENT_SOURCE_DIR} )
-# include_directories( $ENV{NUTOOLS_INC} )
+include_directories( ${CMAKE_CURRENT_SOURCE_DIR} ) ### MIGRATE-ACTION-RECOMMENDED: use target_link_directories() with target semantics
+# include_directories( $ENV{NUTOOLS_INC} ) ### MIGRATE-ACTION-RECOMMENDED: use target_link_directories() with target semantics
+get_target_property(DICT_INC_DIR lardataobj::RecoBase INTERFACE_INCLUDE_DIRECTORIES)
+include_directories( ${DICT_INC_DIR} )
+get_target_property(DICT_INC_DIR larcorealg::Geometry INTERFACE_INCLUDE_DIRECTORIES)
+include_directories( ${DICT_INC_DIR} )
+get_target_property(DICT_INC_DIR larcoreobj::SimpleTypesAndConstants INTERFACE_INCLUDE_DIRECTORIES)
+include_directories( ${DICT_INC_DIR} )
 
-art_make(
+art_make( ### MIGRATE-ACTION-RECOMMENDED: use art_make_library(), art_dictionary(), simple_plugin() with explicit source lists
     LIB_LIBRARIES
-        ${ROOT_BASIC_LIB_LIST}
-        ${ROOT_EG}
+        lardataobj::RecoBase
+        ROOT::Core
+        ROOT::Eg
 )
 
 install_headers()
diff --git a/sbncode/OpT0Finder/flashmatch/Algorithms/CMakeLists.txt b/sbncode/OpT0Finder/flashmatch/Algorithms/CMakeLists.txt
index 8994d76..786d008 100644
--- a/sbncode/OpT0Finder/flashmatch/Algorithms/CMakeLists.txt
+++ b/sbncode/OpT0Finder/flashmatch/Algorithms/CMakeLists.txt
@@ -1,20 +1,20 @@
-set( ROOTLIB -L$ENV{ROOTSYS}/lib -lCore -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lTree -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMinuit -pthread -lm -ldl)
+set( ROOTLIB -L$ENV{ROOTSYS}/lib -lCore -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lTree -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMinuit -pthread -lm -ldl) ### MIGRATE-ACTION-RECOMMENDED: use of $ENV{... may be UPS-dependent
 
-link_libraries( ${LIB_NAME} -L$ENV{BOOST_LIB} -lboost_system ${ROOTLIB} )
+link_libraries( ${LIB_NAME} -L$ENV{BOOST_LIB} -lboost_system ${ROOTLIB} ) ### MIGRATE-ACTION-RECOMMENDED: use target_link_libraries() with target semantics ### MIGRATE-ACTION-RECOMMENDED: use of $ENV{... may be UPS-dependent
 
-art_make(
+art_make( ### MIGRATE-ACTION-RECOMMENDED: use art_make_library(), art_dictionary(), simple_plugin() with explicit source lists
     LIB_LIBRARIES
-        larsim_PhotonPropagation
-        larsim_PhotonPropagation_PhotonVisibilityService_service
-        larsim_LegacyLArG4
-        sbncode_OpT0Finder_flashmatch_GeoAlgo
-        sbncode_OpT0Finder_flashmatch_Base
-        ${ART_FRAMEWORK_CORE}
-        ${ART_FRAMEWORK_PRINCIPAL}
+        larsim::PhotonPropagation
+        larsim::PhotonPropagation_PhotonVisibilityService_service
+        larsim::LegacyLArG4
+        #sbncode::OpT0Finder_flashmatch_GeoAlgo
+        sbncode::OpT0Finder_flashmatch_Base
+        larcorealg::GeoAlgo
+        art::Framework_Core
+        art::Framework_Principal
         ${ART_FRAMEWORK_BASIC}
-        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-        ${ART_FRAMEWORK_SERVICES_OPTIONAL}
-        ${ART_FRAMEWORK_SERVICES_OPTIONAL_TFILESERVICE_SERVICE}
+        art::Framework_Services_Registry
+        art_root_io::TFileService_service
         ${ART_PERSISTENCY_COMMON}
         ${ART_PERSISTENCY_PROVENANCE}
         ${ART_UTILITIES}
diff --git a/sbncode/OpT0Finder/flashmatch/Algorithms/LightPath.h b/sbncode/OpT0Finder/flashmatch/Algorithms/LightPath.h
index 3d88858..1f57a05 100644
--- a/sbncode/OpT0Finder/flashmatch/Algorithms/LightPath.h
+++ b/sbncode/OpT0Finder/flashmatch/Algorithms/LightPath.h
@@ -24,10 +24,10 @@
 #include "flashmatch/Base/CustomAlgoFactory.h"
 #include "flashmatch/GeoAlgo/GeoTrajectory.h"
 #else
-#include "sbncode/OpT0Finder/flashmatch/GeoAlgo/GeoTrajectory.h"
+#include "larcorealg/GeoAlgo/GeoTrajectory.h"
 #include "sbncode/OpT0Finder/flashmatch/Base/BaseAlgorithm.h"
 #include "sbncode/OpT0Finder/flashmatch/Base/CustomAlgoFactory.h"
-#include "sbncode/OpT0Finder/flashmatch/GeoAlgo/GeoTrajectory.h"
+#include "larcorealg/GeoAlgo/GeoTrajectory.h"
 #endif
 
 #include <iostream>
diff --git a/sbncode/OpT0Finder/flashmatch/Algorithms/PhotonLibHypothesis.cxx b/sbncode/OpT0Finder/flashmatch/Algorithms/PhotonLibHypothesis.cxx
index 9f1a08f..8115eb7 100644
--- a/sbncode/OpT0Finder/flashmatch/Algorithms/PhotonLibHypothesis.cxx
+++ b/sbncode/OpT0Finder/flashmatch/Algorithms/PhotonLibHypothesis.cxx
@@ -17,7 +17,6 @@ namespace flashmatch {
 
   PhotonLibHypothesis::PhotonLibHypothesis(const std::string name)
     : BaseFlashHypothesis(name)
-    , _opfast_scintillation(new larg4::OpFastScintillation())
     , _vis(art::ServiceHandle<phot::PhotonVisibilityService const>().get())
   {}
 
@@ -81,21 +80,21 @@ namespace flashmatch {
 
       geo::Point_t const xyz = {pt.x, pt.y, pt.z};
 
-      std::map<size_t, int> direct_photons;
-      _opfast_scintillation->detectedDirectHits(direct_photons, n_original_photons, xyz);
+      std::map<size_t, double> direct_visibilities;
+      _semi_model->detectedDirectVisibilities(direct_visibilities, xyz);
 
-      std::map<size_t, int> reflected_photons;
-      _opfast_scintillation->detectedReflecHits(reflected_photons, n_original_photons, xyz);
+      std::map<size_t, double> reflected_visibilities;
+      _semi_model->detectedReflectedVisibilities(reflected_visibilities, xyz);
 
       //
       // Fill Estimate with Direct light
       //
-      for (auto it = direct_photons.begin(); it != direct_photons.end(); ++it) {
+      for (auto it = direct_visibilities.begin(); it != direct_visibilities.end(); ++it) {
 
         const size_t op_det = it->first;
-        const int n_photons = it->second;
+        const double visibility = it->second;
 
-        double q = n_photons * _global_qe / _qe_v[op_det];
+        double q = n_original_photons * visibility * _global_qe / _qe_v[op_det];
 
         // Coated PMTs don't see direct photons
         if (std::find(_uncoated_pmt_list.begin(), _uncoated_pmt_list.end(), op_det) != _uncoated_pmt_list.end()) {
@@ -114,12 +113,12 @@ namespace flashmatch {
       //
       // Fill Estimate with Reflected light
       //
-      for (auto it = reflected_photons.begin(); it != reflected_photons.end(); ++it) {
+      for (auto it = reflected_visibilities.begin(); it != reflected_visibilities.end(); ++it) {
 
         const size_t op_det = it->first;
-        const int n_photons = it->second;
+        const double visibility = it->second;
 
-        double q = n_photons * _global_qe_refl / _qe_v[op_det];
+        double q = n_original_photons * visibility * _global_qe_refl / _qe_v[op_det];
 
         if (std::find(_channel_mask.begin(), _channel_mask.end(), op_det) != _channel_mask.end()) {
           flash.pe_v[op_det] += q;
diff --git a/sbncode/OpT0Finder/flashmatch/Algorithms/PhotonLibHypothesis.h b/sbncode/OpT0Finder/flashmatch/Algorithms/PhotonLibHypothesis.h
index e301faa..e7d905a 100644
--- a/sbncode/OpT0Finder/flashmatch/Algorithms/PhotonLibHypothesis.h
+++ b/sbncode/OpT0Finder/flashmatch/Algorithms/PhotonLibHypothesis.h
@@ -29,7 +29,6 @@
 #include "sbncode/OpT0Finder/flashmatch/Base/FMWKInterface.h"
 #include "sbncode/OpT0Finder/flashmatch/Base/BaseFlashFilter.h"
 #include "sbncode/OpT0Finder/flashmatch/Base/FlashHypothesisFactory.h"
-#include "larsim/LegacyLArG4/OpFastScintillation.hh"
 #endif
 
 #include <iostream>
@@ -70,7 +69,6 @@ namespace flashmatch {
     std::vector<double> _qe_v;     ///< PMT-wise relative QE
     bool _use_semi_analytical;     ///< If the semi-analytical approach should be used
     #if USING_LARSOFT == 1
-    larg4::OpFastScintillation* _opfast_scintillation; ///< For SBND semi-analytical
     phot::PhotonVisibilityService const* const _vis;
     #endif
   };
diff --git a/sbncode/OpT0Finder/flashmatch/Base/BaseFlashHypothesis.h b/sbncode/OpT0Finder/flashmatch/Base/BaseFlashHypothesis.h
index bd546f6..1adcb3a 100644
--- a/sbncode/OpT0Finder/flashmatch/Base/BaseFlashHypothesis.h
+++ b/sbncode/OpT0Finder/flashmatch/Base/BaseFlashHypothesis.h
@@ -16,6 +16,10 @@
 
 #include "BaseAlgorithm.h"
 
+#if USING_LARSOFT == 1
+#include "larsim/PhotonPropagation/SemiAnalyticalModel.h"
+#endif
+
 namespace flashmatch {
   /**
      \class FlashHypothesis
@@ -46,11 +50,20 @@ namespace flashmatch {
     /// Sets the channels sensitive to visible light
     void SetUncoatedPMTs(std::vector<int> ch_uncoated) { _uncoated_pmt_list = ch_uncoated; }
 
+    #if USING_LARSOFT == 1
+    /// Sets the semi analytical model
+    void SetSemiAnalyticalModel(std::unique_ptr<SemiAnalyticalModel> model) { _semi_model = std::move(model); }
+    #endif
+
   protected:
 
     std::vector<int> _channel_mask; ///< The list of channels to use
     std::vector<int> _uncoated_pmt_list; ///< A list of opdet sensitive to visible (reflected) light
 
+    #if USING_LARSOFT == 1
+    std::unique_ptr<SemiAnalyticalModel> _semi_model;
+    #endif
+
   };
 }
 #endif
diff --git a/sbncode/OpT0Finder/flashmatch/Base/CMakeLists.txt b/sbncode/OpT0Finder/flashmatch/Base/CMakeLists.txt
index 3742178..dcefe4f 100644
--- a/sbncode/OpT0Finder/flashmatch/Base/CMakeLists.txt
+++ b/sbncode/OpT0Finder/flashmatch/Base/CMakeLists.txt
@@ -1,36 +1,31 @@
-set( ROOTLIB -L$ENV{ROOTSYS}/lib -lCore  -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lTree -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -pthread -lm -ldl)
-link_libraries( ${LIB_NAME} -L$ENV{BOOST_LIB} ${ROOTLIB} )
-art_make(
+set( ROOTLIB ROOT::Core  ROOT::RIO ROOT::Net ROOT::Hist ROOT::Graf ROOT::Graf3d ROOT::Gpad ROOT::Tree ROOT::Rint ROOT::Postscript ROOT::Matrix ROOT::Physics ROOT::MathCore ROOT::Thread ) ### MIGRATE-ACTION-RECOMMENDED: use of $ENV{... may be UPS-dependent
+art_make( ### MIGRATE-ACTION-RECOMMENDED: use art_make_library(), art_dictionary(), simple_plugin() with explicit source lists
     LIB_LIBRARIES
-        sbncode_OpT0Finder_flashmatch_GeoAlgo
-        larcorealg_Geometry
-        larcore_Geometry_Geometry_service
-        lardataalg_DetectorInfo
-        art_Framework_Core
-        art_Framework_Services_Registry
-        art_Framework_Principal
-        art_Persistency_Provenance
-        art_Utilities
-        canvas
-        art_Utilities canvas
-        ${ART_FRAMEWORK_CORE}
-        ${ART_FRAMEWORK_IO_SOURCES}
-        ${ART_FRAMEWORK_PRINCIPAL}
-        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-        ${ART_ROOT_IO_TFILE_SUPPORT} ${ROOT_CORE}
-        ${ART_ROOT_IO_TFILESERVICE_SERVICE}
+        larcorealg::GeoAlgo
+        larcorealg::Geometry
+        larcore::Geometry_Geometry_service
+        lardataalg::DetectorInfo
+        art::Persistency_Provenance
+        art::Utilities
+        canvas::canvas
+        art::Utilities canvas::canvas
+        art::Framework_Core
+        art::Framework_IO_Sources
+        art::Framework_Principal
+        art::Framework_Services_Registry
+        art_root_io::tfile_support ${ROOT_CORE}
+        art_root_io::TFileService_service
         ${ART_PERSISTENCY_COMMON}
         ${ART_PERSISTENCY_PROVENANCE}
         ${ART_UTILITIES}
         ${MF_MESSAGELOGGER}
         ${MF_UTILITIES}
         ${CETLIB}
-        ${CLHEP}
-        ${BOOST_LIB}
-        ${Boost_SYSTEM_LIBRARY}
-        ${ROOT_BASIC_LIB_LIST}
+        CLHEP::CLHEP
+        Boost::system
+        ${ROOTLIB}
         ${FHICLCPP}
-        cetlib cetlib_except
+        cetlib::cetlib cetlib_except::cetlib_except
 )
 
 install_headers()
diff --git a/sbncode/OpT0Finder/flashmatch/Base/FMWKInterface.cxx b/sbncode/OpT0Finder/flashmatch/Base/FMWKInterface.cxx
index 3ed16f7..76ed320 100644
--- a/sbncode/OpT0Finder/flashmatch/Base/FMWKInterface.cxx
+++ b/sbncode/OpT0Finder/flashmatch/Base/FMWKInterface.cxx
@@ -76,7 +76,7 @@ namespace flashmatch{
     _drift_velocity = det_prop.DriftVelocity();
     _pmt_v.clear();
 
-    _pmt_v.reserve(geo->NOpDets());
+    _pmt_v.resize(geo->NOpDets());
 
     for (size_t opdet = 0; opdet < geo->NOpDets(); opdet++) {
 
@@ -84,13 +84,15 @@ namespace flashmatch{
       geo->OpDetGeoFromOpDet(opdet).GetCenter(&pos[0]);
 
       geoalgo::Point_t pmt(pos);
-      _pmt_v.push_back(pmt);
+      _pmt_v[opdet] = pmt;
     }
 
     double global_x_min = 1e9, global_x_max = -1e9;
     double global_y_min = 1e9, global_y_max = -1e9;
     double global_z_min = 1e9, global_z_max = -1e9;
 
+    _bbox_map.reserve(geo->Ncryostats() * geo->NTPC());
+
     for (size_t cryo = 0; cryo < geo->Ncryostats(); cryo++) {
       for (size_t tpc = 0; tpc < geo->NTPC(cryo); tpc++) {
         const geo::TPCGeo tpc_geo = geo->TPC(tpc, cryo);
@@ -110,8 +112,7 @@ namespace flashmatch{
         if (z_min < global_z_min) global_z_min = z_min;
         if (z_max > global_z_max) global_z_max = z_max;
 
-        auto pair = std::pair<int,int>(tpc, cryo);
-        _bbox_map[pair] = geoalgo::AABox(x_min, y_min, z_min, x_max, y_max, z_max);
+        _bbox_map.emplace(std::make_pair(tpc, cryo), geoalgo::AABox(x_min, y_min, z_min, x_max, y_max, z_max));
       }
 
       _bbox = geoalgo::AABox(global_x_min, global_y_min, global_z_min,
diff --git a/sbncode/OpT0Finder/flashmatch/Base/FMWKInterface.h b/sbncode/OpT0Finder/flashmatch/Base/FMWKInterface.h
index 129eaad..5d7a979 100644
--- a/sbncode/OpT0Finder/flashmatch/Base/FMWKInterface.h
+++ b/sbncode/OpT0Finder/flashmatch/Base/FMWKInterface.h
@@ -5,6 +5,9 @@
 #define USING_LARSOFT 1
 #endif
 
+#include <unordered_map>
+#include <boost/functional/hash.hpp>
+
 #if USING_LARSOFT == 0
 #include "FMWKTools/ConfigManager.h"
 #include "flashmatch/GeoAlgo/GeoAABox.h"
@@ -14,7 +17,8 @@ namespace flashmatch {
   using Config_t = flashmatch::PSet;
 }
 #else
-#include "sbncode/OpT0Finder/flashmatch/GeoAlgo/GeoAABox.h"
+// #include "sbncode/OpT0Finder/flashmatch/GeoAlgo/GeoAABox.h"
+#include "larcorealg/GeoAlgo/GeoAABox.h"
 #include "OpT0FinderException.h"
 #include "OpT0FinderLogger.h"
 #include "fhiclcpp/ParameterSet.h"
@@ -76,7 +80,7 @@ namespace flashmatch {
     static DetectorSpecs* _me;
     std::vector<geoalgo::Point_t> _pmt_v;
     geoalgo::AABox _bbox;
-    std::map<std::pair<int, int>, geoalgo::AABox> _bbox_map; ///< A bbox map (cryo,tpc) -> bbox
+    std::unordered_map<std::pair<int, int>, geoalgo::AABox, boost::hash<std::pair<int, int>>> _bbox_map; ///< A bbox map (cryo,tpc) -> bbox
     double _drift_velocity;
     #if USING_LARSOFT == 0
     sim::PhotonVoxelDef _voxel_def;
diff --git a/sbncode/OpT0Finder/flashmatch/Base/FlashMatchManager.cxx b/sbncode/OpT0Finder/flashmatch/Base/FlashMatchManager.cxx
index 2774b3b..d6c2218 100644
--- a/sbncode/OpT0Finder/flashmatch/Base/FlashMatchManager.cxx
+++ b/sbncode/OpT0Finder/flashmatch/Base/FlashMatchManager.cxx
@@ -401,6 +401,13 @@ namespace flashmatch {
     }
   }
 
+  #if USING_LARSOFT == 1
+  void FlashMatchManager::SetSemiAnalyticalModel(std::unique_ptr<SemiAnalyticalModel> model) {
+    if (_alg_flash_hypothesis) {
+      _alg_flash_hypothesis->SetSemiAnalyticalModel(std::move(model));
+    }
+  }
+  #endif
 
 }
 
diff --git a/sbncode/OpT0Finder/flashmatch/Base/FlashMatchManager.h b/sbncode/OpT0Finder/flashmatch/Base/FlashMatchManager.h
index 6c3020e..613122e 100644
--- a/sbncode/OpT0Finder/flashmatch/Base/FlashMatchManager.h
+++ b/sbncode/OpT0Finder/flashmatch/Base/FlashMatchManager.h
@@ -102,6 +102,10 @@ namespace flashmatch {
     /// Sets the channels sensitive to visible light
     void SetUncoatedPMTs(std::vector<int> ch_uncoated);
 
+    #if USING_LARSOFT == 1
+    void SetSemiAnalyticalModel(std::unique_ptr<SemiAnalyticalModel> model);
+    #endif
+
   private:
 
     void AddCustomAlgo(BaseAlgorithm* alg);
diff --git a/sbncode/OpT0Finder/flashmatch/CMakeLists.txt b/sbncode/OpT0Finder/flashmatch/CMakeLists.txt
index b7cb427..d3bb3f8 100644
--- a/sbncode/OpT0Finder/flashmatch/CMakeLists.txt
+++ b/sbncode/OpT0Finder/flashmatch/CMakeLists.txt
@@ -1,3 +1,3 @@
-add_subdirectory(GeoAlgo)
+# add_subdirectory(GeoAlgo) # Already in larcorealg
 add_subdirectory(Base)
 add_subdirectory(Algorithms)
diff --git a/sbncode/OpT0Finder/flashmatch/GeoAlgo/CMakeLists.txt b/sbncode/OpT0Finder/flashmatch/GeoAlgo/CMakeLists.txt
index a7a8eb7..9c05406 100644
--- a/sbncode/OpT0Finder/flashmatch/GeoAlgo/CMakeLists.txt
+++ b/sbncode/OpT0Finder/flashmatch/GeoAlgo/CMakeLists.txt
@@ -1,6 +1,6 @@
-art_make(
+art_make( ### MIGRATE-ACTION-RECOMMENDED: use art_make_library(), art_dictionary(), simple_plugin() with explicit source lists
     LIB_LIBRARIES
-        ${ROOT_BASIC_LIB_LIST}
+        ROOT::Core ROOT::Physics
 )
 
 install_headers()
diff --git a/sbncode/PID/CMakeLists.txt b/sbncode/PID/CMakeLists.txt
index a090c6e..9ab5078 100644
--- a/sbncode/PID/CMakeLists.txt
+++ b/sbncode/PID/CMakeLists.txt
@@ -1,41 +1,39 @@
-#link_directories(
+#link_directories( ### MIGRATE-ACTION-RECOMMENDED: use target_link_libraries() with target semantics
 # $ENV{ROOTSYS}/lib
 #)
 
-art_make( MODULE_LIBRARIES
-  ${ART_FRAMEWORK_CORE}
-  ${ART_FRAMEWORK_SERVICES_REGISTRY}
-  ${ART_FRAMEWORK_SERVICES_OPTIONAL}
-  ${ART_FRAMEWORK_SERVICES_OPTIONAL_TFILESERVICE_SERVICE}
-  ${ART_ROOT_IO_TFILE_SUPPORT}
-  ${ART_ROOT_IO_TFILESERVICE_SERVICE}
-  ${ART_FRAMEWORK_SERVICES}
-  ${ART_FRAMEWORK_PRINCIPAL}
-  art_Persistency_Common
-  art_Utilities canvas
+art_make( MODULE_LIBRARIES ### MIGRATE-ACTION-RECOMMENDED: use art_make_library(), art_dictionary(), simple_plugin() with explicit source lists
+  art::Framework_Core
+  art::Framework_Services_Registry
+  art_root_io::TFileService_service
+  art_root_io::tfile_support
+  art_root_io::TFileService_service
+  art::Framework_Principal
+  art::Persistency_Common
+  art::Utilities canvas::canvas
   ${MF_MESSAGELOGGER}
   ${MF_UTILITIES}
   ${FHICLCPP}
-  cetlib cetlib_except
+  cetlib::cetlib cetlib_except::cetlib_except
   ${ROOT_EVE_LIB_LIST}
   ${ROOT_X3d}
   ${ROOT_BASIC_LIB_LIST}
   ${ROOT_GEOM}
   ROOT::TMVA
 
-  MF_MessageLogger
+  messagefacility::MF_MessageLogger
 
   sbn_LArReco
-  sbnobj_Common_CRT
-  sbnobj_Common_Reco
-  lardataobj_RecoBase_AssnsDicts_dict
-  lardataobj_RecoBase_dict
-  lardataobj_RecoBase
-  larsim_Utils
-  larsim_Simulation
-  larsim_MCCheater_BackTrackerService_service
-  larsim_MCCheater_ParticleInventoryService_service
-  nusimdata_SimulationBase
+  sbnobj::Common_CRT
+  sbnobj::Common_Reco
+  lardataobj::RecoBase_AssnsDicts_dict
+  lardataobj::RecoBase_dict
+  lardataobj::RecoBase
+  larsim::Utils
+  larsim::Simulation
+  larsim::MCCheater_BackTrackerService_service
+  larsim::MCCheater_ParticleInventoryService_service
+  nusimdata::SimulationBase
 
   caf_RecoUtils
 )
diff --git a/sbncode/SBNEventWeight/App/CMakeLists.txt b/sbncode/SBNEventWeight/App/CMakeLists.txt
index 6d1d2fa..b7ee9ef 100644
--- a/sbncode/SBNEventWeight/App/CMakeLists.txt
+++ b/sbncode/SBNEventWeight/App/CMakeLists.txt
@@ -1,22 +1,8 @@
-art_make(
-  LIBRARY_NAME sbncode_SBNEventWeight
-  LIB_LIBRARIES
-    sbnobj_Common_SBNEventWeight
-    sbncode_SBNEventWeight_Base
-    sbncode_SBNEventWeight_Calculators_CrossSection
-    sbncode_SBNEventWeight_Calculators_BNBFlux
-    #sbncode_SBNEventWeight_Calculators_Geant4
-  MODULE_LIBRARIES
-    sbnobj_Common_SBNEventWeight
-    sbncode_SBNEventWeight_Base
-    sbncode_SBNEventWeight_Calculators_CrossSection
-    sbncode_SBNEventWeight_Calculators_BNBFlux
-    nusimdata_SimulationBase
-    ${MF_MESSAGELOGGER}
-    ${ROOT_GEOM}
-    ${LXML2}
-    GSL
-)
+simple_plugin(SBNEventWeight module
+  sbnobj::Common_SBNEventWeight sbncode::SBNEventWeight_Base
+  sbncode::SBNEventWeight_Calculators_CrossSection
+  sbncode::SBNEventWeight_Calculators_BNBFlux nusimdata::SimulationBase
+  ROOT::Geom)
 
 install_headers()
 install_fhicl()
diff --git a/sbncode/SBNEventWeight/Base/CMakeLists.txt b/sbncode/SBNEventWeight/Base/CMakeLists.txt
index c9d79d2..eece2cd 100644
--- a/sbncode/SBNEventWeight/Base/CMakeLists.txt
+++ b/sbncode/SBNEventWeight/Base/CMakeLists.txt
@@ -1,15 +1,15 @@
-art_make(
-  LIBRARY_NAME sbncode_SBNEventWeight_Base
+art_make( ### MIGRATE-ACTION-RECOMMENDED: use art_make_library(), art_dictionary(), simple_plugin() with explicit source lists
+  LIBRARY_NAME sbncode::SBNEventWeight_Base
   LIB_LIBRARIES
-    sbnobj_Common_SBNEventWeight
-    ${ART_FRAMEWORK_SERVICES_REGISTRY}
-    ${ART_FRAMEWORK_SERVICES_OPTIONAL}
+    sbnobj::Common_SBNEventWeight
+    nurandom::RandomUtils_NuRandomService_service
+    art::Framework_Services_Registry
     ${ART_FRAMEWORK_SERVICES_OPTIONAL_RANDOMNUMBERGENERATOR_SERVICE}
     ${ART_UTILITIES}
     ${ROOT_BASIC_LIB_LIST}
-    ${CLHEP}
-    canvas
-    cetlib_except
+    CLHEP::CLHEP
+    canvas::canvas
+    cetlib_except::cetlib_except
 )
 
 install_headers()
diff --git a/sbncode/SBNEventWeight/Calculators/BNBFlux/CMakeLists.txt b/sbncode/SBNEventWeight/Calculators/BNBFlux/CMakeLists.txt
index 56f20ab..66ae865 100644
--- a/sbncode/SBNEventWeight/Calculators/BNBFlux/CMakeLists.txt
+++ b/sbncode/SBNEventWeight/Calculators/BNBFlux/CMakeLists.txt
@@ -1,19 +1,20 @@
-include_directories($ENV{GENIE_INC}/GENIE)
+include_directories($ENV{GENIE}/include/GENIE)
 
 art_make(
   LIBRARY_NAME sbncode_SBNEventWeight_Calculators_BNBFlux
   LIB_LIBRARIES
-    sbncode_SBNEventWeight_Base
-    nugen_EventGeneratorBase_GENIE
-    nugen_NuReweight_art
-    nugen_NuReweight
-    nurandom_RandomUtils_NuRandomService_service
-    ${ART_FRAMEWORK_PRINCIPAL}
-    ${ART_PERSISTENCY_PROVENANCE}
-    ${ART_FRAMEWORK_SERVICES_REGISTRY}
-    ${FHICLCPP}
-    ${CETLIB}
-    nusimdata_SimulationBase
+    sbncode::SBNEventWeight_Base
+    nugen::EventGeneratorBase_GENIE
+    nugen::NuReweight_art
+    nugen::NuReweight
+    nurandom::RandomUtils_NuRandomService_service
+    art::Framework_Principal
+    art::Persistency_Provenance
+    art::Framework_Services_Registry
+    fhiclcpp::fhiclcpp
+    cetlib::cetlib
+    nusimdata::SimulationBase
+    ROOT::Hist
 )
 
 install_headers()
diff --git a/sbncode/SBNEventWeight/Calculators/CrossSections/CMakeLists.txt b/sbncode/SBNEventWeight/Calculators/CrossSections/CMakeLists.txt
index 354a4cc..a2d29bc 100644
--- a/sbncode/SBNEventWeight/Calculators/CrossSections/CMakeLists.txt
+++ b/sbncode/SBNEventWeight/Calculators/CrossSections/CMakeLists.txt
@@ -1,33 +1,17 @@
-# Headers needed for the GenieWeightCalc class
-include_directories ( $ENV{GENIE_INC} )
-include_directories ( $ENV{GENIE_INC}/GENIE )
-include_directories ( $ENV{LOG4CPP_INC} )
+include_directories($ENV{GENIE}/include/GENIE) ### MIGRATE-ACTION-RECOMMENDED: use target_link_directories() with target semantics
 
-# Builds of MicroBooNE-specific larsim releases should uncomment the
-# "add_definitions" line below. It enables extra reweighting functionality
-# which is present only in "MicroBooNE patch" releases of GENIE v3.0.4. These
-# require building against a special ups product.
-
-# Define a macro that indicates whether a GENIE version before 3.0.0 is in use
- parse_ups_version( ${GENIE_VERSION} )
- if( ${VMAJ} LESS 3 )
-   add_definitions(-DGENIE_PRE_R3)
-   endif()
-
-# not applying the following, YET
-#add_definitions(-DGENIE_UB_PATCH)
-
-art_make(
+art_make( ### MIGRATE-ACTION-RECOMMENDED: use art_make_library(), art_dictionary(), simple_plugin() with explicit source lists
   LIBRARY_NAME sbncode_SBNEventWeight_Calculators_CrossSection
   LIB_LIBRARIES
-    sbncode_SBNEventWeight_Base
-    nugen_EventGeneratorBase_GENIE
-    nurandom_RandomUtils_NuRandomService_service
-    ${ART_FRAMEWORK_PRINCIPAL}
+    sbncode::SBNEventWeight_Base
+    nugen::EventGeneratorBase_GENIE
+    nugen::NuReweight_art
+    nugen::NuReweight
+    nurandom::RandomUtils_NuRandomService_service
+    art::Framework_Principal
     ${ART_PERSISTENCY_PROVENANCE}
-    ${ART_FRAMEWORK_SERVICES_REGISTRY}
+    art::Framework_Services_Registry
     ${FHICLCPP}
-
    #GENIE_LIB_LIST is explicitly listed below:
     LOG4CPP
     GFWMSG
@@ -81,7 +65,7 @@ art_make(
 	GSL
     #GENIE libraries are above
     ${MF_MESSAGELOGGER}
-    cetlib_except
+    cetlib_except::cetlib_except
 )
 
 install_headers()
diff --git a/sbncode/SBNEventWeight/Calculators/CrossSections/GenieWeightCalc.cxx b/sbncode/SBNEventWeight/Calculators/CrossSections/GenieWeightCalc.cxx
index 4e96fbe..b5116c8 100644
--- a/sbncode/SBNEventWeight/Calculators/CrossSections/GenieWeightCalc.cxx
+++ b/sbncode/SBNEventWeight/Calculators/CrossSections/GenieWeightCalc.cxx
@@ -375,6 +375,25 @@ void GenieWeightCalc::Configure(fhicl::ParameterSet const& p,
       fParameterSet.AddParameter(pars[i], parsigmas[i]);
     }
 
+  }else if(mode.find("multisigma") != std::string::npos){
+
+    //==== pars.size()==1 is supported
+    array_name_for_exception = "";
+    if(pars.size()!=1){
+      array_name_for_exception = "multisigma";
+      throw cet::exception(__PRETTY_FUNCTION__) << GetName()
+        << "::Bad fcl configuration. multisigma only supports one parameter_list";
+    }
+
+    for (size_t i=0; i<pars.size(); i++){
+      num_universes = pars.size() * parsigmas.size();
+      std::vector<float> withds;
+      for (size_t j=0; j<parsigmas.size(); j++){
+        withds.push_back(parsigmas[j]);
+      }
+      fParameterSet.AddParameter(pars[i], withds);
+    }
+
   }else if(mode.find("multisim") != std::string::npos){
 
     num_universes = pset.get<int>( "number_of_multisims", 1 );
diff --git a/sbncode/SBNEventWeight/jobs/genie/eventweight_genie_sbn.fcl b/sbncode/SBNEventWeight/jobs/genie/eventweight_genie_sbn.fcl
index a0986ce..63d5269 100644
--- a/sbncode/SBNEventWeight/jobs/genie/eventweight_genie_sbn.fcl
+++ b/sbncode/SBNEventWeight/jobs/genie/eventweight_genie_sbn.fcl
@@ -21,18 +21,33 @@ sbn_eventweight_genie: {
   AllowMissingTruth: true # allow running over cosmics. The alternative approach is genie_module_label: ""
 
   #Off-set central value of knobs here:
+  # Note that the chosen central value here should match to the central value used for generating the input sample.
   genie_central_values: {
   # Example of shifting below two knobs 1 sigma
   # MaCCQE : 1
   # MaCCRES : 1
   }
 
-  weight_functions_genie: [ 
-   genie_sbnd_multisim
+  weight_functions_genie: [
+    # multisim
+    multisim,
+    # multisigma
+    # CCQE
+    MaCCQE_multisigma,
+    # Resonance
+    MaCCRES_multisigma, MvCCRES_multisigma, MaNCRES_multisigma, MvNCRES_multisigma,
+    # Non-Resonance
+    NonRESBGvpCC1pi_multisigma, NonRESBGvbarnCC1pi_multisigma, NonRESBGvpNC1pi_multisigma, NonRESBGvbarnNC1pi_multisigma, NonRESBGvnCC1pi_multisigma, NonRESBGvbarpCC1pi_multisigma, NonRESBGvnNC1pi_multisigma, NonRESBGvbarpNC1pi_multisigma, NonRESBGvpCC2pi_multisigma, NonRESBGvbarnCC2pi_multisigma, NonRESBGvpNC2pi_multisigma, NonRESBGvbarpNC2pi_multisigma, NonRESBGvnCC2pi_multisigma, NonRESBGvbarpCC2pi_multisigma, NonRESBGvnNC2pi_multisigma, NonRESBGvbarnNC2pi_multisigma,
+    # NC
+    MaNCEL_multisigma, EtaNCEL_multisigma,
+    # DIS
+    AhtBY_multisigma, BhtBY_multisigma, CV1uBY_multisigma, CV2uBY_multisigma, FormZone_multisigma,
+    # FSI
+    MFP_N_multisigma, FrCEx_N_multisigma, FrInel_N_multisigma, FrAbs_N_multisigma, FrPiProd_N_multisigma, MFP_pi_multisigma, FrCEx_pi_multisigma, FrInel_pi_multisigma, FrAbs_pi_multisigma, FrPiProd_pi_multisigma
   ]
- 
-  # Knobs that are used in both sbnd and ub
-  genie_sbnd_multisim: {
+
+  # Define each knob
+  multisim: {
     type: Genie
     random_seed: 100
     parameter_list: [
@@ -52,11 +67,11 @@ sbn_eventweight_genie: {
       "MaNCEL", "EtaNCEL", #"NC", 
 
     #DIS
-      "AhtBY","BhtBY","CV1uBY","CV2uBY","FormZone",
+      "AhtBY","BhtBY","CV1uBY","CV2uBY", #"FormZone",
 
     #FSI
-      "MFP_N" ,"FrCEx_N" ,"FrInel_N" ,"FrAbs_N" ,"FrPiProd_N",
-      "MFP_pi","FrCEx_pi","FrInel_pi","FrAbs_pi","FrPiProd_pi"
+      "MFP_N" ,"FrCEx_N" ,"FrInel_N" ,"FrAbs_N" , #"FrPiProd_N",
+      "MFP_pi","FrCEx_pi","FrInel_pi","FrAbs_pi" #, "FrPiProd_pi"
       ]
     parameter_sigma: [
       #CCQE
@@ -68,14 +83,241 @@ sbn_eventweight_genie: {
       #NC
       1,1, #1,
       #DIS
-      1,1,1,1,1,
+      1,1,1,1, #1,
       #FSI
-      1,1,1,1,1,1,1,1,1,1
+      1,1,1,1,1,1,1,1 #,1,1
     ]
     mode: multisim
     number_of_multisims: @local::n_universes
   }
-
+  MaCCQE_multisigma: {
+      type: Genie
+      parameter_list: ["MaCCQE"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  MaCCRES_multisigma: {
+      type: Genie
+      parameter_list: ["MaCCRES"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  MvCCRES_multisigma: {
+      type: Genie
+      parameter_list: ["MvCCRES"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  MaNCRES_multisigma: {
+      type: Genie
+      parameter_list: ["MaNCRES"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  MvNCRES_multisigma: {
+      type: Genie
+      parameter_list: ["MvNCRES"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  NonRESBGvpCC1pi_multisigma: {
+      type: Genie
+      parameter_list: ["NonRESBGvpCC1pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  NonRESBGvbarnCC1pi_multisigma: {
+      type: Genie
+      parameter_list: ["NonRESBGvbarnCC1pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  NonRESBGvpNC1pi_multisigma: {
+      type: Genie
+      parameter_list: ["NonRESBGvpNC1pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  NonRESBGvbarnNC1pi_multisigma: {
+      type: Genie
+      parameter_list: ["NonRESBGvbarnNC1pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  NonRESBGvnCC1pi_multisigma: {
+      type: Genie
+      parameter_list: ["NonRESBGvnCC1pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  NonRESBGvbarpCC1pi_multisigma: {
+      type: Genie
+      parameter_list: ["NonRESBGvbarpCC1pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  NonRESBGvnNC1pi_multisigma: {
+      type: Genie
+      parameter_list: ["NonRESBGvnNC1pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  NonRESBGvbarpNC1pi_multisigma: {
+      type: Genie
+      parameter_list: ["NonRESBGvbarpNC1pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  NonRESBGvpCC2pi_multisigma: {
+      type: Genie
+      parameter_list: ["NonRESBGvpCC2pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  NonRESBGvbarnCC2pi_multisigma: {
+      type: Genie
+      parameter_list: ["NonRESBGvbarnCC2pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  NonRESBGvpNC2pi_multisigma: {
+      type: Genie
+      parameter_list: ["NonRESBGvpNC2pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  NonRESBGvbarpNC2pi_multisigma: {
+      type: Genie
+      parameter_list: ["NonRESBGvbarpNC2pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  NonRESBGvnCC2pi_multisigma: {
+      type: Genie
+      parameter_list: ["NonRESBGvnCC2pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  NonRESBGvbarpCC2pi_multisigma: {
+      type: Genie
+      parameter_list: ["NonRESBGvbarpCC2pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  NonRESBGvnNC2pi_multisigma: {
+      type: Genie
+      parameter_list: ["NonRESBGvnNC2pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  NonRESBGvbarnNC2pi_multisigma: {
+      type: Genie
+      parameter_list: ["NonRESBGvbarnNC2pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  MaNCEL_multisigma: {
+      type: Genie
+      parameter_list: ["MaNCEL"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  EtaNCEL_multisigma: {
+      type: Genie
+      parameter_list: ["EtaNCEL"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  AhtBY_multisigma: {
+      type: Genie
+      parameter_list: ["AhtBY"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  BhtBY_multisigma: {
+      type: Genie
+      parameter_list: ["BhtBY"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  CV1uBY_multisigma: {
+      type: Genie
+      parameter_list: ["CV1uBY"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  CV2uBY_multisigma: {
+      type: Genie
+      parameter_list: ["CV2uBY"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  FormZone_multisigma: {
+      type: Genie
+      parameter_list: ["FormZone"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  MFP_N_multisigma: {
+      type: Genie
+      parameter_list: ["MFP_N"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  FrCEx_N_multisigma: {
+      type: Genie
+      parameter_list: ["FrCEx_N"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  FrInel_N_multisigma: {
+      type: Genie
+      parameter_list: ["FrInel_N"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  FrAbs_N_multisigma: {
+      type: Genie
+      parameter_list: ["FrAbs_N"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  FrPiProd_N_multisigma: {
+      type: Genie
+      parameter_list: ["FrPiProd_N"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  MFP_pi_multisigma: {
+      type: Genie
+      parameter_list: ["MFP_pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  FrCEx_pi_multisigma: {
+      type: Genie
+      parameter_list: ["FrCEx_pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  FrInel_pi_multisigma: {
+      type: Genie
+      parameter_list: ["FrInel_pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  FrAbs_pi_multisigma: {
+      type: Genie
+      parameter_list: ["FrAbs_pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
+  FrPiProd_pi_multisigma: {
+      type: Genie
+      parameter_list: ["FrPiProd_pi"]
+      parameter_sigma: [-1,+1,-2,+2,-3,+3]
+      mode: multisigma
+  }
 }
 
 END_PROLOG
diff --git a/sbncode/TPCReco/CMakeLists.txt b/sbncode/TPCReco/CMakeLists.txt
index 9c2b25c..8083eff 100644
--- a/sbncode/TPCReco/CMakeLists.txt
+++ b/sbncode/TPCReco/CMakeLists.txt
@@ -3,56 +3,58 @@ add_subdirectory(TrackSplit)
 add_subdirectory(VertexStub)
 add_subdirectory(CalorimetryAnalysis)
 
-link_directories(
+link_directories( ### MIGRATE-ACTION-RECOMMENDED: use target_link_libraries() with target semantics
  $ENV{ROOTSYS}/lib
 )
 
 simple_plugin(NuVertexChargeTree module
-	${ART_FRAMEWORK_CORE}
-	${ART_FRAMEWORK_SERVICES_REGISTRY}
-	${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-	${ART_FRAMEWORK_PRINCIPAL}
-	art_Persistency_Common
-	art_Utilities canvas
+	art::Framework_Core
+	art::Framework_Services_Registry
+	art_root_io::TFileService_service
+	art::Framework_Principal
+	art::Persistency_Common
+	art::Utilities canvas::canvas
 	${MF_MESSAGELOGGER}
 	${MF_UTILITIES}
 	${FHICLCPP}
-	cetlib cetlib_except
+	cetlib::cetlib cetlib_except::cetlib_except
 	${ROOT_EVE_LIB_LIST}
-	${ROOT_X3d}
+	ROOT::X3d
 	${ROOT_BASIC_LIB_LIST}
-	MF_MessageLogger
-
-	sbnobj_Common_Reco
-	lardataobj_AnalysisBase
-        
-        art_root_io_tfile_support
-        art_root_io
-        art_root_io_dict
+	messagefacility::MF_MessageLogger
+        lardata::DetectorInfoServices_DetectorClocksServiceStandard_service
+	sbnobj::Common_Reco
+	lardataobj::AnalysisBase
+        lardataalg::DetectorInfo        
+        art_root_io::tfile_support
+        art_root_io::art_root_io
+        art_root_io::dict
         caf_RecoUtils
-        larsim_MCCheater_BackTrackerService_service
-        nusimdata_SimulationBase
-        larcorealg_Geometry
-        larcore_Geometry_Geometry_service
-	larpandora_LArPandoraInterface
-        larsim_MCCheater_ParticleInventoryService_service
+        larsim::MCCheater_BackTrackerService_service
+        nusimdata::SimulationBase
+        larcorealg::Geometry
+        larcore::Geometry_Geometry_service
+	larpandora::LArPandoraInterface
+        larsim::MCCheater_ParticleInventoryService_service
 	sbn_LArReco	    
-	sbncode_TPCReco_VertexStub
+	sbncode::TPCReco_VertexStub
 )
+
+link_directories( $ENV{IFDHC_DIR}/lib )
+
 simple_plugin ( EventSelect module
-                IFDH_SERVICE
-               ${ART_FRAMEWORK_CORE}
-               ${ART_FRAMEWORK_PRINCIPAL}
-               ${ART_FRAMEWORK_SERVICES_REGISTRY}
-               ${ART_FRAMEWORK_SERVICES_BASIC}
-               ${ART_FRAMEWORK_SERVICES_OPTIONAL}
-               art_Utilities canvas
+               ifdh_art::IFDH_service
+               art::Framework_Core
+               art::Framework_Principal
+               art::Framework_Services_Registry
+               art::Utilities canvas::canvas
                ${MF_MESSAGELOGGER}
                ${MF_UTILITIES}
                ${FHICLCPP}
-               cetlib cetlib_except
+               cetlib::cetlib cetlib_except::cetlib_except
+               lardataalg::DetectorInfo        
 	${ROOT_EVE_LIB_LIST}
-	${ROOT_X3d}
+	ROOT::X3d
 	${ROOT_BASIC_LIB_LIST}
 )
 
diff --git a/sbncode/TPCReco/CalorimetryAnalysis/CMakeLists.txt b/sbncode/TPCReco/CalorimetryAnalysis/CMakeLists.txt
index cae53c3..3d184e7 100644
--- a/sbncode/TPCReco/CalorimetryAnalysis/CMakeLists.txt
+++ b/sbncode/TPCReco/CalorimetryAnalysis/CMakeLists.txt
@@ -1,33 +1,35 @@
 simple_plugin( CalorimetryAnalysis module
-                            ${ART_FRAMEWORK_CORE}
-                            ${ART_FRAMEWORK_SERVICES_REGISTRY}
-                            ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-                            ${ART_FRAMEWORK_PRINCIPAL}
-                            art_Persistency_Common
-                            art_Utilities canvas
+                            art::Framework_Core
+                            art::Framework_Services_Registry
+                            art_root_io::TFileService_service
+                            art::Framework_Principal
+                            art::Persistency_Common
+                            art::Utilities canvas::canvas
                             ${MF_MESSAGELOGGER}
                             ${MF_UTILITIES}
                             ${FHICLCPP}
-                            cetlib cetlib_except
-                            ${ROOT_EVE_LIB_LIST}
-                            ${ROOT_X3d}
-                            ${ROOT_BASIC_LIB_LIST}
-	art_root_io_tfile_support
-	art_root_io
-	art_root_io_dict
+                            cetlib::cetlib cetlib_except::cetlib_except
+                            ROOT::EG
+                            ROOT::X3d
+                            ROOT::Core
+	art_root_io::tfile_support
+	art_root_io::art_root_io
+	art_root_io::dict
         caf_RecoUtils
-        lardataobj_AnalysisBase
-        lardataobj_RecoBase
-        larcorealg_Geometry
-        larcore_Geometry_Geometry_service
-        larcorealg_GeoAlgo
-        larsim_MCCheater_BackTrackerService_service
-        nusimdata_SimulationBase
-        larsim_MCCheater_ParticleInventoryService_service
-	sbnobj_Common_Reco
-	larcorealg_GeoAlgo
-	lardata_DetectorInfoServices_DetectorPropertiesServiceStandard_service
-	lardataalg_DetectorInfo
+        larreco::RecoAlg
+        lardataobj::AnalysisBase
+        lardataobj::RecoBase
+        larcorealg::Geometry
+        larcore::Geometry_Geometry_service
+        larcorealg::GeoAlgo
+        larsim::MCCheater_BackTrackerService_service
+        nusimdata::SimulationBase
+        larsim::MCCheater_ParticleInventoryService_service
+	sbnobj::Common_Reco
+	larcorealg::GeoAlgo
+	lardata::DetectorInfoServices_DetectorPropertiesServiceStandard_service
+	lardataalg::DetectorInfo
+        larevt::SpaceCharge
 )
 
 
diff --git a/sbncode/TPCReco/KinkExp/CMakeLists.txt b/sbncode/TPCReco/KinkExp/CMakeLists.txt
index 17e04b1..d61df1d 100644
--- a/sbncode/TPCReco/KinkExp/CMakeLists.txt
+++ b/sbncode/TPCReco/KinkExp/CMakeLists.txt
@@ -1,4 +1,4 @@
-link_directories(
+link_directories( ### MIGRATE-ACTION-RECOMMENDED: use target_link_libraries() with target semantics
  $ENV{ROOTSYS}/lib
 )
 
@@ -6,85 +6,85 @@ art_make_library(
 	LIBRARY_NAME sbn_LArReco_PCA
 	SOURCE PCA.cc
 	LIBRARIES
-	sbnobj_Common_Reco
-	lardataobj_RecoBase_AssnsDicts_dict
-	lardataobj_RecoBase_dict	
+	sbnobj::Common_Reco
+	lardataobj::RecoBase_AssnsDicts_dict
+	lardataobj::RecoBase_dict	
 	sbndcode_OpDetSim
 )
 
 simple_plugin(PCAnglePlaneMaker module
-	${ART_FRAMEWORK_CORE}
-	${ART_FRAMEWORK_SERVICES_REGISTRY}
-	${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-	${ART_FRAMEWORK_PRINCIPAL}
-	art_Persistency_Common
-	art_Utilities canvas
+	art::Framework_Core
+	art::Framework_Services_Registry
+	art_root_io::TFileService_service
+	art::Framework_Principal
+	art::Persistency_Common
+	art::Utilities canvas::canvas
 	${MF_MESSAGELOGGER}
 	${MF_UTILITIES}
 	${FHICLCPP}
-	cetlib cetlib_except
+	cetlib::cetlib cetlib_except::cetlib_except
 	${ROOT_EVE_LIB_LIST}
 	${ROOT_X3d}
 	${ROOT_BASIC_LIB_LIST}
-	MF_MessageLogger
+	messagefacility::MF_MessageLogger
 
-	sbnobj_Common_Reco
-	lardataobj_AnalysisBase
-        larcorealg_Geometry
-        larcore_Geometry_Geometry_service
+	sbnobj::Common_Reco
+	lardataobj::AnalysisBase
+        larcorealg::Geometry
+        larcore::Geometry_Geometry_service
 	sbn_LArReco_PCA
 )
 
 simple_plugin(PCAngleKinkFinder module
-	${ART_FRAMEWORK_CORE}
-	${ART_FRAMEWORK_SERVICES_REGISTRY}
-	${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-	${ART_FRAMEWORK_PRINCIPAL}
-	art_Persistency_Common
-	art_Utilities canvas
+	art::Framework_Core
+	art::Framework_Services_Registry
+	art_root_io::TFileService_service
+	art::Framework_Principal
+	art::Persistency_Common
+	art::Utilities canvas::canvas
 	${MF_MESSAGELOGGER}
 	${MF_UTILITIES}
 	${FHICLCPP}
-	cetlib cetlib_except
+	cetlib::cetlib cetlib_except::cetlib_except
 	${ROOT_EVE_LIB_LIST}
 	${ROOT_X3d}
 	${ROOT_BASIC_LIB_LIST}
-	MF_MessageLogger
+	messagefacility::MF_MessageLogger
 	Minuit
 
-	sbnobj_Common_Reco
-	lardataobj_AnalysisBase
-        larcorealg_Geometry
-        larcore_Geometry_Geometry_service
+	sbnobj::Common_Reco
+	lardataobj::AnalysisBase
+        larcorealg::Geometry
+        larcore::Geometry_Geometry_service
 )
 
 simple_plugin(PCAngleKinkTree module
-	${ART_FRAMEWORK_CORE}
-	${ART_FRAMEWORK_SERVICES_REGISTRY}
-	${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-	${ART_FRAMEWORK_PRINCIPAL}
-	art_Persistency_Common
-	art_Utilities canvas
+	art::Framework_Core
+	art::Framework_Services_Registry
+	art_root_io::TFileService_service
+	art::Framework_Principal
+	art::Persistency_Common
+	art::Utilities canvas::canvas
 	${MF_MESSAGELOGGER}
 	${MF_UTILITIES}
 	${FHICLCPP}
-	cetlib cetlib_except
+	cetlib::cetlib cetlib_except::cetlib_except
 	${ROOT_EVE_LIB_LIST}
 	${ROOT_X3d}
 	${ROOT_BASIC_LIB_LIST}
-	MF_MessageLogger
+	messagefacility::MF_MessageLogger
 
-	sbnobj_Common_Reco
-	lardataobj_AnalysisBase
+	sbnobj::Common_Reco
+	lardataobj::AnalysisBase
         
-        art_root_io_tfile_support
-        art_root_io
-        art_root_io_dict
+        art_root_io::tfile_support
+        art_root_io::art_root_io
+        art_root_io::dict
         caf_RecoUtils
-        larsim_MCCheater_BackTrackerService_service
-        nusimdata_SimulationBase
-        larcorealg_Geometry
-        larcore_Geometry_Geometry_service
+        larsim::MCCheater_BackTrackerService_service
+        nusimdata::SimulationBase
+        larcorealg::Geometry
+        larcore::Geometry_Geometry_service
 	sbn_LArReco_PCA
 )
 
diff --git a/sbncode/TPCReco/TrackHit/CMakeLists.txt b/sbncode/TPCReco/TrackHit/CMakeLists.txt
index 7ee08b2..af538c3 100644
--- a/sbncode/TPCReco/TrackHit/CMakeLists.txt
+++ b/sbncode/TPCReco/TrackHit/CMakeLists.txt
@@ -1,73 +1,77 @@
 simple_plugin(TrackAreaHit module
-        ${ART_FRAMEWORK_CORE}
-        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-        ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-        ${ART_FRAMEWORK_PRINCIPAL}
-        art_Persistency_Common
-        art_Utilities canvas
+        art::Framework_Core
+        art::Framework_Services_Registry
+        art_root_io::TFileService_service
+        art::Framework_Principal
+        art::Persistency_Common
+        art::Utilities canvas::canvas
         ${MF_MESSAGELOGGER}
         ${MF_UTILITIES}
         ${FHICLCPP}
-        cetlib cetlib_except
+        cetlib::cetlib cetlib_except::cetlib_except
         ${ROOT_EVE_LIB_LIST}
         ${ROOT_X3d}
         ${ROOT_BASIC_LIB_LIST}
-        MF_MessageLogger
-        lardataobj_RecoBase_AssnsDicts_dict
-        lardataobj_RecoBase     
-        lardataobj_RecoBase_dict        
-
-        larcorealg_Geometry
-        larcore_Geometry_Geometry_service
-	lardata_DetectorInfoServices_DetectorClocksServiceStandard_service
-	lardata_DetectorInfoServices_DetectorPropertiesServiceStandard_service
-	lardataalg_DetectorInfo
+        messagefacility::MF_MessageLogger
+        lardataobj::RecoBase_AssnsDicts_dict
+        lardataobj::RecoBase     
+        lardataobj::RecoBase_dict        
+        larcorealg::Geometry
+        larcore::Geometry_Geometry_service
+	lardata::DetectorInfoServices_DetectorClocksServiceStandard_service
+	lardata::DetectorInfoServices_DetectorPropertiesServiceStandard_service
+	lardataalg::DetectorInfo
+        larsim::Simulation
 )
 
 simple_plugin(TrackHitFilter module
-        ${ART_FRAMEWORK_CORE}
-        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-        ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-        ${ART_FRAMEWORK_PRINCIPAL}
-        art_Persistency_Common
-        art_Utilities canvas
+        art::Framework_Core
+        art::Framework_Services_Registry
+        art_root_io::TFileService_service
+        art::Framework_Principal
+        art::Persistency_Common
+        art::Utilities canvas::canvas
         ${MF_MESSAGELOGGER}
         ${MF_UTILITIES}
         ${FHICLCPP}
-        cetlib cetlib_except
+        cetlib::cetlib cetlib_except::cetlib_except
         ${ROOT_EVE_LIB_LIST}
         ${ROOT_X3d}
         ${ROOT_BASIC_LIB_LIST}
-        MF_MessageLogger
-        lardataobj_RecoBase_AssnsDicts_dict
-        lardataobj_RecoBase     
-        lardataobj_RecoBase_dict        
+        messagefacility::MF_MessageLogger
+        lardataobj::RecoBase_AssnsDicts_dict
+        lardataobj::RecoBase     
+        lardataobj::RecoBase_dict        
+	lardataalg::DetectorInfo
+	lardata::DetectorInfoServices_DetectorPropertiesServiceStandard_service
 
-        larcorealg_Geometry
-        larcore_Geometry_Geometry_service
+        larcorealg::Geometry
+        larcore::Geometry_Geometry_service
 )
 
 simple_plugin(TrackHitDumper module
-	${ART_FRAMEWORK_CORE}
-	${ART_FRAMEWORK_SERVICES_REGISTRY}
-	${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-	${ART_FRAMEWORK_PRINCIPAL}
-	art_Persistency_Common
-	art_Utilities canvas
+	art::Framework_Core
+	art::Framework_Services_Registry
+	art_root_io::TFileService_service
+	art::Framework_Principal
+	art::Persistency_Common
+	art::Utilities canvas::canvas
 	${MF_MESSAGELOGGER}
 	${MF_UTILITIES}
 	${FHICLCPP}
-	cetlib cetlib_except
+	cetlib::cetlib cetlib_except::cetlib_except
 	${ROOT_EVE_LIB_LIST}
 	${ROOT_X3d}
 	${ROOT_BASIC_LIB_LIST}
-	MF_MessageLogger
-	lardataobj_RecoBase_AssnsDicts_dict
-	lardataobj_RecoBase	
-	lardataobj_RecoBase_dict	
+	messagefacility::MF_MessageLogger
+	lardataobj::RecoBase_AssnsDicts_dict
+	lardataobj::RecoBase	
+	lardataobj::RecoBase_dict	
+	lardataalg::DetectorInfo
+	lardata::DetectorInfoServices_DetectorPropertiesServiceStandard_service
 
-	larcorealg_Geometry
-	larcore_Geometry_Geometry_service
+	larcorealg::Geometry
+	larcore::Geometry_Geometry_service
 )
 
 install_headers()
diff --git a/sbncode/TPCReco/TrackSplit/CMakeLists.txt b/sbncode/TPCReco/TrackSplit/CMakeLists.txt
index 7e92476..4470cfd 100644
--- a/sbncode/TPCReco/TrackSplit/CMakeLists.txt
+++ b/sbncode/TPCReco/TrackSplit/CMakeLists.txt
@@ -1,49 +1,49 @@
 simple_plugin(TrackSplitter module
-  ${ART_FRAMEWORK_CORE}
-  ${ART_FRAMEWORK_SERVICES_REGISTRY}
-  ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-  ${ART_FRAMEWORK_PRINCIPAL}
-  art_Persistency_Common
-  art_Utilities canvas
+  art::Framework_Core
+  art::Framework_Services_Registry
+  art_root_io::TFileService_service
+  art::Framework_Principal
+  art::Persistency_Common
+  art::Utilities canvas::canvas
   ${MF_MESSAGELOGGER}
   ${MF_UTILITIES}
   ${FHICLCPP}
-  cetlib cetlib_except
+  cetlib::cetlib cetlib_except::cetlib_except
   ${ROOT_EVE_LIB_LIST}
   ${ROOT_X3d}
   ${ROOT_BASIC_LIB_LIST}
-  MF_MessageLogger
-  larcorealg_Geometry
-  larcore_Geometry_Geometry_service
-  lardata_DetectorInfoServices_DetectorClocksServiceStandard_service
-  lardata_DetectorInfoServices_DetectorPropertiesServiceStandard_service
-  lardataalg_DetectorInfo
+  messagefacility::MF_MessageLogger
+  larcorealg::Geometry
+  larcore::Geometry_Geometry_service
+  lardata::DetectorInfoServices_DetectorClocksServiceStandard_service
+  lardata::DetectorInfoServices_DetectorPropertiesServiceStandard_service
+  lardataalg::DetectorInfo
 
   sbn_LArReco
-  sbnobj_Common_Reco
+  sbnobj::Common_Reco
 )
 
 simple_plugin(MergedTrackIdentifier module
-  ${ART_FRAMEWORK_CORE}
-  ${ART_FRAMEWORK_SERVICES_REGISTRY}
-  ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-  ${ART_FRAMEWORK_PRINCIPAL}
-  art_Persistency_Common
-  art_Utilities canvas
+  art::Framework_Core
+  art::Framework_Services_Registry
+  art_root_io::TFileService_service
+  art::Framework_Principal
+  art::Persistency_Common
+  art::Utilities canvas::canvas
   ${MF_MESSAGELOGGER}
   ${MF_UTILITIES}
   ${FHICLCPP}
-  cetlib cetlib_except
+  cetlib::cetlib cetlib_except::cetlib_except
   ${ROOT_EVE_LIB_LIST}
   ${ROOT_X3d}
   ${ROOT_BASIC_LIB_LIST}
-  MF_MessageLogger
-  larcorealg_Geometry
-  larcore_Geometry_Geometry_service
-  larpandora_LArPandoraInterface
+  messagefacility::MF_MessageLogger
+  larcorealg::Geometry
+  larcore::Geometry_Geometry_service
+  larpandora::LArPandoraInterface
 
   sbn_LArReco
-  sbnobj_Common_Reco
+  sbnobj::Common_Reco
 )
 
 install_headers()
diff --git a/sbncode/TPCReco/VertexStub/CMakeLists.txt b/sbncode/TPCReco/VertexStub/CMakeLists.txt
index 66c0848..837bdc3 100644
--- a/sbncode/TPCReco/VertexStub/CMakeLists.txt
+++ b/sbncode/TPCReco/VertexStub/CMakeLists.txt
@@ -1,121 +1,125 @@
 art_make_library(
         SOURCE StubBuilder.cxx StubMergeAlgorithms.cxx
         LIBRARIES
-	${ART_FRAMEWORK_CORE}
-	${ART_FRAMEWORK_PRINCIPAL}
-	art_Persistency_Common
-	art_Persistency_Provenance
-	canvas art_Utilities
+	art::Framework_Core
+	art::Framework_Principal
+	art::Persistency_Common
+	art::Persistency_Provenance
+	canvas::canvas art::Utilities
 	${FHICLCPP}
-	cetlib cetlib_except
+	cetlib::cetlib cetlib_except::cetlib_except
 	${ROOT_BASIC_LIB_LIST}
-	MF_MessageLogger
-
-	sbnobj_Common_Reco
-	lardataobj_AnalysisBase
-        larcorealg_Geometry
-	larreco_Calorimetry
-	lardataobj_RecoBase
-	lardataalg_DetectorInfo
+	messagefacility::MF_MessageLogger
+lardata::DetectorInfoServices_DetectorPropertiesServiceStandard_service
+	sbnobj::Common_Reco
+	lardataobj::AnalysisBase
+        larcorealg::Geometry
+	larreco::Calorimetry
+	lardataobj::RecoBase
+	lardataalg::DetectorInfo
+        larevt::SpaceCharge
 )
 simple_plugin(VertexChargeVacuum module
-	${ART_FRAMEWORK_CORE}
-	${ART_FRAMEWORK_PRINCIPAL}
-	${ART_FRAMEWORK_SERVICES}
-	${ART_FRAMEWORK_SERVICES_REGISTRY}
-	art_Persistency_Common
-	art_Utilities canvas
+	art::Framework_Core
+	art::Framework_Principal
+	art::Framework_Services_Registry
+	art::Persistency_Common
+	art::Utilities canvas::canvas
 	${FHICLCPP}
-	cetlib cetlib_except
+	cetlib::cetlib cetlib_except::cetlib_except
 	${ROOT_EVE_LIB_LIST}
 	${ROOT_X3d}
 	${ROOT_BASIC_LIB_LIST}
-	MF_MessageLogger
-
-	sbnobj_Common_Reco
-	lardataobj_AnalysisBase
-        larcorealg_Geometry
-	larreco_Calorimetry
-	lardataobj_RecoBase
-	lardataalg_DetectorInfo
-	sbncode_TPCReco_VertexStub
+	messagefacility::MF_MessageLogger
+lardata::DetectorInfoServices_DetectorPropertiesServiceStandard_service
+	sbnobj::Common_Reco
+	lardataobj::AnalysisBase
+        larcorealg::Geometry
+	larreco::Calorimetry
+	lardataobj::RecoBase
+	lardataalg::DetectorInfo
+	sbncode::TPCReco_VertexStub
+        larevt::SpaceCharge
 )
 
 simple_plugin(VertexStubTracker module
-	${ART_FRAMEWORK_CORE}
-	${ART_FRAMEWORK_SERVICES_REGISTRY}
-	${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-	${ART_FRAMEWORK_PRINCIPAL}
-	art_Persistency_Common
-	art_Persistency_Provenance
-	art_Utilities canvas
+	art::Framework_Core
+	art::Framework_Services_Registry
+	art_root_io::TFileService_service
+	art::Framework_Principal
+	art::Persistency_Common
+	art::Persistency_Provenance
+	art::Utilities canvas::canvas
 	${MF_MESSAGELOGGER}
 	${MF_UTILITIES}
 	${FHICLCPP}
-	cetlib cetlib_except
+	cetlib::cetlib cetlib_except::cetlib_except
 	${ROOT_EVE_LIB_LIST}
 	${ROOT_X3d}
 	${ROOT_BASIC_LIB_LIST}
-	MF_MessageLogger
-
-	sbnobj_Common_Reco
-	lardataobj_AnalysisBase
-        larcorealg_Geometry
-        larcore_Geometry_Geometry_service
-	larreco_Calorimetry
-	lardataalg_DetectorInfo
-	sbncode_TPCReco_VertexStub
+	messagefacility::MF_MessageLogger
+lardata::DetectorInfoServices_DetectorPropertiesServiceStandard_service
+	sbnobj::Common_Reco
+	lardataobj::AnalysisBase
+        larcorealg::Geometry
+        larcore::Geometry_Geometry_service
+	larreco::Calorimetry
+	lardataalg::DetectorInfo
+	sbncode::TPCReco_VertexStub
+        larevt::SpaceCharge
 )
 
 simple_plugin(PlaneStubMerge tool
-        ${ART_FRAMEWORK_CORE}
-        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-        ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-        ${ART_FRAMEWORK_PRINCIPAL}
-        art_Persistency_Common
-	art_Persistency_Provenance
-        art_Utilities canvas
+        art::Framework_Core
+        art::Framework_Services_Registry
+        art_root_io::TFileService_service
+        art::Framework_Principal
+        art::Persistency_Common
+	art::Persistency_Provenance
+        art::Utilities canvas::canvas
         ${MF_MESSAGELOGGER}
         ${MF_UTILITIES}
         ${FHICLCPP}
-        cetlib cetlib_except
+        cetlib::cetlib cetlib_except::cetlib_except
         ${ROOT_EVE_LIB_LIST}
         ${ROOT_X3d}
         ${ROOT_BASIC_LIB_LIST}
-        MF_MessageLogger
-
-	sbnobj_Common_Reco
-	lardataobj_AnalysisBase
-        larcorealg_Geometry
-        larcore_Geometry_Geometry_service
-	larreco_Calorimetry
-	lardataalg_DetectorInfo
-	sbncode_TPCReco_VertexStub
+        messagefacility::MF_MessageLogger
+lardata::DetectorInfoServices_DetectorPropertiesServiceStandard_service
+	sbnobj::Common_Reco
+	lardataobj::AnalysisBase
+        larcorealg::Geometry
+        larcore::Geometry_Geometry_service
+	larreco::Calorimetry
+	lardataalg::DetectorInfo
+	sbncode::TPCReco_VertexStub
+        larevt::SpaceCharge
 )
 
 simple_plugin(TwoPlaneStubMerge tool
-        ${ART_FRAMEWORK_CORE}
-        ${ART_FRAMEWORK_SERVICES_REGISTRY}
-        ${ART_ROOT_IO_TFILESERVICE_SERVICE}                ${ART_FRAMEWORK_SERVICES}
-        ${ART_FRAMEWORK_PRINCIPAL}
-        art_Persistency_Common
-        art_Utilities canvas
+        art::Framework_Core
+        art::Framework_Services_Registry
+        art_root_io::TFileService_service
+        art::Framework_Principal
+        art::Persistency_Common
+        art::Utilities canvas::canvas
         ${MF_MESSAGELOGGER}
         ${MF_UTILITIES}
         ${FHICLCPP}
-        cetlib cetlib_except
+        cetlib::cetlib cetlib_except::cetlib_except
         ${ROOT_EVE_LIB_LIST}
         ${ROOT_X3d}
         ${ROOT_BASIC_LIB_LIST}
-        MF_MessageLogger
-
-	sbnobj_Common_Reco
-	lardataobj_AnalysisBase
-        larcorealg_Geometry
-        larcore_Geometry_Geometry_service
-	larreco_Calorimetry
-	lardataalg_DetectorInfo
-	sbncode_TPCReco_VertexStub
+        messagefacility::MF_MessageLogger
+lardata::DetectorInfoServices_DetectorPropertiesServiceStandard_service
+	sbnobj::Common_Reco
+	lardataobj::AnalysisBase
+        larcorealg::Geometry
+        larcore::Geometry_Geometry_service
+	larreco::Calorimetry
+	lardataalg::DetectorInfo
+	sbncode::TPCReco_VertexStub
+        larevt::SpaceCharge
 )
 
 add_subdirectory(config)
diff --git a/ups/product_deps b/ups/product_deps
index 8a97e3b..945ec24 100644
--- a/ups/product_deps
+++ b/ups/product_deps
@@ -34,10 +34,10 @@ fwdir   product_dir scripts
 # Add the dependent product and version
 
 product             version
-larsoft             v09_37_01_01
-sbnobj              v09_12_09
-sbnanaobj           v09_17_06_01
-sbndaq_artdaq_core  v1_00_00of0
+larsoft             v09_37_01_02
+sbnobj              v09_12_12
+sbnanaobj           v09_17_06_06
+sbndaq_artdaq_core  v1_00_00of2
 genie_xsec          v3_00_04a
 sbndata             v01_03
 
